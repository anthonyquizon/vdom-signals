if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.virtualDom=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var createElement = require("./vdom/create-element.js")

module.exports = createElement

},{"./vdom/create-element.js":15}],2:[function(require,module,exports){
var diff = require("./vtree/diff.js")

module.exports = diff

},{"./vtree/diff.js":35}],3:[function(require,module,exports){
var h = require("./virtual-hyperscript/index.js")

module.exports = h

},{"./virtual-hyperscript/index.js":22}],4:[function(require,module,exports){
var diff = require("./diff.js")
var patch = require("./patch.js")
var h = require("./h.js")
var create = require("./create-element.js")
var VNode = require('./vnode/vnode.js')
var VText = require('./vnode/vtext.js')

module.exports = {
    diff: diff,
    patch: patch,
    h: h,
    create: create,
    VNode: VNode,
    VText: VText
}

},{"./create-element.js":1,"./diff.js":2,"./h.js":3,"./patch.js":13,"./vnode/vnode.js":31,"./vnode/vtext.js":33}],5:[function(require,module,exports){
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
module.exports = (function split(undef) {

  var nativeSplit = String.prototype.split,
    compliantExecNpcg = /()??/.exec("")[1] === undef,
    // NPCG: nonparticipating capturing group
    self;

  self = function(str, separator, limit) {
    // If `separator` is not a regex, use `nativeSplit`
    if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
      return nativeSplit.call(str, separator, limit);
    }
    var output = [],
      flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.extended ? "x" : "") + // Proposed for ES6
      (separator.sticky ? "y" : ""),
      // Firefox 3+
      lastLastIndex = 0,
      // Make `global` and avoid `lastIndex` issues by working with a copy
      separator = new RegExp(separator.source, flags + "g"),
      separator2, match, lastIndex, lastLength;
    str += ""; // Type-convert
    if (!compliantExecNpcg) {
      // Doesn't need flags gy, but they don't hurt
      separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
    }
    /* Values for `limit`, per the spec:
     * If undefined: 4294967295 // Math.pow(2, 32) - 1
     * If 0, Infinity, or NaN: 0
     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
     * If negative number: 4294967296 - Math.floor(Math.abs(limit))
     * If other: Type-convert, then use the above rules
     */
    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1
    limit >>> 0; // ToUint32(limit)
    while (match = separator.exec(str)) {
      // `separator.lastIndex` is not reliable cross-browser
      lastIndex = match.index + match[0].length;
      if (lastIndex > lastLastIndex) {
        output.push(str.slice(lastLastIndex, match.index));
        // Fix browsers whose `exec` methods don't consistently return `undefined` for
        // nonparticipating capturing groups
        if (!compliantExecNpcg && match.length > 1) {
          match[0].replace(separator2, function() {
            for (var i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undef) {
                match[i] = undef;
              }
            }
          });
        }
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, match.slice(1));
        }
        lastLength = match[0].length;
        lastLastIndex = lastIndex;
        if (output.length >= limit) {
          break;
        }
      }
      if (separator.lastIndex === match.index) {
        separator.lastIndex++; // Avoid an infinite loop
      }
    }
    if (lastLastIndex === str.length) {
      if (lastLength || !separator.test("")) {
        output.push("");
      }
    } else {
      output.push(str.slice(lastLastIndex));
    }
    return output.length > limit ? output.slice(0, limit) : output;
  };

  return self;
})();

},{}],6:[function(require,module,exports){

},{}],7:[function(require,module,exports){
'use strict';

var OneVersionConstraint = require('individual/one-version');

var MY_VERSION = '7';
OneVersionConstraint('ev-store', MY_VERSION);

var hashKey = '__EV_STORE_KEY@' + MY_VERSION;

module.exports = EvStore;

function EvStore(elem) {
    var hash = elem[hashKey];

    if (!hash) {
        hash = elem[hashKey] = {};
    }

    return hash;
}

},{"individual/one-version":9}],8:[function(require,module,exports){
(function (global){
'use strict';

/*global window, global*/

var root = typeof window !== 'undefined' ?
    window : typeof global !== 'undefined' ?
    global : {};

module.exports = Individual;

function Individual(key, value) {
    if (key in root) {
        return root[key];
    }

    root[key] = value;

    return value;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],9:[function(require,module,exports){
'use strict';

var Individual = require('./index.js');

module.exports = OneVersion;

function OneVersion(moduleName, version, defaultValue) {
    var key = '__INDIVIDUAL_ONE_VERSION_' + moduleName;
    var enforceKey = key + '_ENFORCE_SINGLETON';

    var versionValue = Individual(enforceKey, version);

    if (versionValue !== version) {
        throw new Error('Can only have one copy of ' +
            moduleName + '.\n' +
            'You already have version ' + versionValue +
            ' installed.\n' +
            'This means you cannot install version ' + version);
    }

    return Individual(key, defaultValue);
}

},{"./index.js":8}],10:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":6}],11:[function(require,module,exports){
"use strict";

module.exports = function isObject(x) {
	return typeof x === "object" && x !== null;
};

},{}],12:[function(require,module,exports){
var nativeIsArray = Array.isArray
var toString = Object.prototype.toString

module.exports = nativeIsArray || isArray

function isArray(obj) {
    return toString.call(obj) === "[object Array]"
}

},{}],13:[function(require,module,exports){
var patch = require("./vdom/patch.js")

module.exports = patch

},{"./vdom/patch.js":18}],14:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook.js")

module.exports = applyProperties

function applyProperties(node, props, previous) {
    for (var propName in props) {
        var propValue = props[propName]

        if (propValue === undefined) {
            removeProperty(node, propName, propValue, previous);
        } else if (isHook(propValue)) {
            removeProperty(node, propName, propValue, previous)
            if (propValue.hook) {
                propValue.hook(node,
                    propName,
                    previous ? previous[propName] : undefined)
            }
        } else {
            if (isObject(propValue)) {
                patchObject(node, props, previous, propName, propValue);
            } else {
                node[propName] = propValue
            }
        }
    }
}

function removeProperty(node, propName, propValue, previous) {
    if (previous) {
        var previousValue = previous[propName]

        if (!isHook(previousValue)) {
            if (propName === "attributes") {
                for (var attrName in previousValue) {
                    node.removeAttribute(attrName)
                }
            } else if (propName === "style") {
                for (var i in previousValue) {
                    node.style[i] = ""
                }
            } else if (typeof previousValue === "string") {
                node[propName] = ""
            } else {
                node[propName] = null
            }
        } else if (previousValue.unhook) {
            previousValue.unhook(node, propName, propValue)
        }
    }
}

function patchObject(node, props, previous, propName, propValue) {
    var previousValue = previous ? previous[propName] : undefined

    // Set attributes
    if (propName === "attributes") {
        for (var attrName in propValue) {
            var attrValue = propValue[attrName]

            if (attrValue === undefined) {
                node.removeAttribute(attrName)
            } else {
                node.setAttribute(attrName, attrValue)
            }
        }

        return
    }

    if(previousValue && isObject(previousValue) &&
        getPrototype(previousValue) !== getPrototype(propValue)) {
        node[propName] = propValue
        return
    }

    if (!isObject(node[propName])) {
        node[propName] = {}
    }

    var replacer = propName === "style" ? "" : undefined

    for (var k in propValue) {
        var value = propValue[k]
        node[propName][k] = (value === undefined) ? replacer : value
    }
}

function getPrototype(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

},{"../vnode/is-vhook.js":26,"is-object":11}],15:[function(require,module,exports){
var document = require("global/document")

var applyProperties = require("./apply-properties")

var isVNode = require("../vnode/is-vnode.js")
var isVText = require("../vnode/is-vtext.js")
var isWidget = require("../vnode/is-widget.js")
var handleThunk = require("../vnode/handle-thunk.js")

module.exports = createElement

function createElement(vnode, opts) {
    var doc = opts ? opts.document || document : document
    var warn = opts ? opts.warn : null

    vnode = handleThunk(vnode).a

    if (isWidget(vnode)) {
        return vnode.init()
    } else if (isVText(vnode)) {
        return doc.createTextNode(vnode.text)
    } else if (!isVNode(vnode)) {
        if (warn) {
            warn("Item is not a valid virtual dom node", vnode)
        }
        return null
    }

    var node = (vnode.namespace === null) ?
        doc.createElement(vnode.tagName) :
        doc.createElementNS(vnode.namespace, vnode.tagName)

    var props = vnode.properties
    applyProperties(node, props)

    var children = vnode.children

    for (var i = 0; i < children.length; i++) {
        var childNode = createElement(children[i], opts)
        if (childNode) {
            node.appendChild(childNode)
        }
    }

    return node
}

},{"../vnode/handle-thunk.js":24,"../vnode/is-vnode.js":27,"../vnode/is-vtext.js":28,"../vnode/is-widget.js":29,"./apply-properties":14,"global/document":10}],16:[function(require,module,exports){
// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
// We don't want to read all of the DOM nodes in the tree so we use
// the in-order tree indexing to eliminate recursion down certain branches.
// We only recurse into a DOM node if we know that it contains a child of
// interest.

var noChild = {}

module.exports = domIndex

function domIndex(rootNode, tree, indices, nodes) {
    if (!indices || indices.length === 0) {
        return {}
    } else {
        indices.sort(ascending)
        return recurse(rootNode, tree, indices, nodes, 0)
    }
}

function recurse(rootNode, tree, indices, nodes, rootIndex) {
    nodes = nodes || {}


    if (rootNode) {
        if (indexInRange(indices, rootIndex, rootIndex)) {
            nodes[rootIndex] = rootNode
        }

        var vChildren = tree.children

        if (vChildren) {

            var childNodes = rootNode.childNodes

            for (var i = 0; i < tree.children.length; i++) {
                rootIndex += 1

                var vChild = vChildren[i] || noChild
                var nextIndex = rootIndex + (vChild.count || 0)

                // skip recursion down the tree if there are no nodes down here
                if (indexInRange(indices, rootIndex, nextIndex)) {
                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)
                }

                rootIndex = nextIndex
            }
        }
    }

    return nodes
}

// Binary search for an index in the interval [left, right]
function indexInRange(indices, left, right) {
    if (indices.length === 0) {
        return false
    }

    var minIndex = 0
    var maxIndex = indices.length - 1
    var currentIndex
    var currentItem

    while (minIndex <= maxIndex) {
        currentIndex = ((maxIndex + minIndex) / 2) >> 0
        currentItem = indices[currentIndex]

        if (minIndex === maxIndex) {
            return currentItem >= left && currentItem <= right
        } else if (currentItem < left) {
            minIndex = currentIndex + 1
        } else  if (currentItem > right) {
            maxIndex = currentIndex - 1
        } else {
            return true
        }
    }

    return false;
}

function ascending(a, b) {
    return a > b ? 1 : -1
}

},{}],17:[function(require,module,exports){
var applyProperties = require("./apply-properties")

var isWidget = require("../vnode/is-widget.js")
var VPatch = require("../vnode/vpatch.js")

var updateWidget = require("./update-widget")

module.exports = applyPatch

function applyPatch(vpatch, domNode, renderOptions) {
    var type = vpatch.type
    var vNode = vpatch.vNode
    var patch = vpatch.patch

    switch (type) {
        case VPatch.REMOVE:
            return removeNode(domNode, vNode)
        case VPatch.INSERT:
            return insertNode(domNode, patch, renderOptions)
        case VPatch.VTEXT:
            return stringPatch(domNode, vNode, patch, renderOptions)
        case VPatch.WIDGET:
            return widgetPatch(domNode, vNode, patch, renderOptions)
        case VPatch.VNODE:
            return vNodePatch(domNode, vNode, patch, renderOptions)
        case VPatch.ORDER:
            reorderChildren(domNode, patch)
            return domNode
        case VPatch.PROPS:
            applyProperties(domNode, patch, vNode.properties)
            return domNode
        case VPatch.THUNK:
            return replaceRoot(domNode,
                renderOptions.patch(domNode, patch, renderOptions))
        default:
            return domNode
    }
}

function removeNode(domNode, vNode) {
    var parentNode = domNode.parentNode

    if (parentNode) {
        parentNode.removeChild(domNode)
    }

    destroyWidget(domNode, vNode);

    return null
}

function insertNode(parentNode, vNode, renderOptions) {
    var newNode = renderOptions.render(vNode, renderOptions)

    if (parentNode) {
        parentNode.appendChild(newNode)
    }

    return parentNode
}

function stringPatch(domNode, leftVNode, vText, renderOptions) {
    var newNode

    if (domNode.nodeType === 3) {
        domNode.replaceData(0, domNode.length, vText.text)
        newNode = domNode
    } else {
        var parentNode = domNode.parentNode
        newNode = renderOptions.render(vText, renderOptions)

        if (parentNode && newNode !== domNode) {
            parentNode.replaceChild(newNode, domNode)
        }
    }

    return newNode
}

function widgetPatch(domNode, leftVNode, widget, renderOptions) {
    var updating = updateWidget(leftVNode, widget)
    var newNode

    if (updating) {
        newNode = widget.update(leftVNode, domNode) || domNode
    } else {
        newNode = renderOptions.render(widget, renderOptions)
    }

    var parentNode = domNode.parentNode

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    if (!updating) {
        destroyWidget(domNode, leftVNode)
    }

    return newNode
}

function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
    var parentNode = domNode.parentNode
    var newNode = renderOptions.render(vNode, renderOptions)

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    return newNode
}

function destroyWidget(domNode, w) {
    if (typeof w.destroy === "function" && isWidget(w)) {
        w.destroy(domNode)
    }
}

function reorderChildren(domNode, moves) {
    var childNodes = domNode.childNodes
    var keyMap = {}
    var node
    var remove
    var insert

    for (var i = 0; i < moves.removes.length; i++) {
        remove = moves.removes[i]
        node = childNodes[remove.from]
        if (remove.key) {
            keyMap[remove.key] = node
        }
        domNode.removeChild(node)
    }

    var length = childNodes.length
    for (var j = 0; j < moves.inserts.length; j++) {
        insert = moves.inserts[j]
        node = keyMap[insert.key]
        // this is the weirdest bug i've ever seen in webkit
        domNode.insertBefore(node, insert.to >= length++ ? null : childNodes[insert.to])
    }
}

function replaceRoot(oldRoot, newRoot) {
    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
        oldRoot.parentNode.replaceChild(newRoot, oldRoot)
    }

    return newRoot;
}

},{"../vnode/is-widget.js":29,"../vnode/vpatch.js":32,"./apply-properties":14,"./update-widget":19}],18:[function(require,module,exports){
var document = require("global/document")
var isArray = require("x-is-array")

var render = require("./create-element")
var domIndex = require("./dom-index")
var patchOp = require("./patch-op")
module.exports = patch

function patch(rootNode, patches, renderOptions) {
    renderOptions = renderOptions || {}
    renderOptions.patch = renderOptions.patch && renderOptions.patch !== patch
        ? renderOptions.patch
        : patchRecursive
    renderOptions.render = renderOptions.render || render

    return renderOptions.patch(rootNode, patches, renderOptions)
}

function patchRecursive(rootNode, patches, renderOptions) {
    var indices = patchIndices(patches)

    if (indices.length === 0) {
        return rootNode
    }

    var index = domIndex(rootNode, patches.a, indices)
    var ownerDocument = rootNode.ownerDocument

    if (!renderOptions.document && ownerDocument !== document) {
        renderOptions.document = ownerDocument
    }

    for (var i = 0; i < indices.length; i++) {
        var nodeIndex = indices[i]
        rootNode = applyPatch(rootNode,
            index[nodeIndex],
            patches[nodeIndex],
            renderOptions)
    }

    return rootNode
}

function applyPatch(rootNode, domNode, patchList, renderOptions) {
    if (!domNode) {
        return rootNode
    }

    var newNode

    if (isArray(patchList)) {
        for (var i = 0; i < patchList.length; i++) {
            newNode = patchOp(patchList[i], domNode, renderOptions)

            if (domNode === rootNode) {
                rootNode = newNode
            }
        }
    } else {
        newNode = patchOp(patchList, domNode, renderOptions)

        if (domNode === rootNode) {
            rootNode = newNode
        }
    }

    return rootNode
}

function patchIndices(patches) {
    var indices = []

    for (var key in patches) {
        if (key !== "a") {
            indices.push(Number(key))
        }
    }

    return indices
}

},{"./create-element":15,"./dom-index":16,"./patch-op":17,"global/document":10,"x-is-array":12}],19:[function(require,module,exports){
var isWidget = require("../vnode/is-widget.js")

module.exports = updateWidget

function updateWidget(a, b) {
    if (isWidget(a) && isWidget(b)) {
        if ("name" in a && "name" in b) {
            return a.id === b.id
        } else {
            return a.init === b.init
        }
    }

    return false
}

},{"../vnode/is-widget.js":29}],20:[function(require,module,exports){
'use strict';

var EvStore = require('ev-store');

module.exports = EvHook;

function EvHook(value) {
    if (!(this instanceof EvHook)) {
        return new EvHook(value);
    }

    this.value = value;
}

EvHook.prototype.hook = function (node, propertyName) {
    var es = EvStore(node);
    var propName = propertyName.substr(3);

    es[propName] = this.value;
};

EvHook.prototype.unhook = function(node, propertyName) {
    var es = EvStore(node);
    var propName = propertyName.substr(3);

    es[propName] = undefined;
};

},{"ev-store":7}],21:[function(require,module,exports){
'use strict';

module.exports = SoftSetHook;

function SoftSetHook(value) {
    if (!(this instanceof SoftSetHook)) {
        return new SoftSetHook(value);
    }

    this.value = value;
}

SoftSetHook.prototype.hook = function (node, propertyName) {
    if (node[propertyName] !== this.value) {
        node[propertyName] = this.value;
    }
};

},{}],22:[function(require,module,exports){
'use strict';

var isArray = require('x-is-array');

var VNode = require('../vnode/vnode.js');
var VText = require('../vnode/vtext.js');
var isVNode = require('../vnode/is-vnode');
var isVText = require('../vnode/is-vtext');
var isWidget = require('../vnode/is-widget');
var isHook = require('../vnode/is-vhook');
var isVThunk = require('../vnode/is-thunk');

var parseTag = require('./parse-tag.js');
var softSetHook = require('./hooks/soft-set-hook.js');
var evHook = require('./hooks/ev-hook.js');

module.exports = h;

function h(tagName, properties, children) {
    var childNodes = [];
    var tag, props, key, namespace;

    if (!children && isChildren(properties)) {
        children = properties;
        props = {};
    }

    props = props || properties || {};
    tag = parseTag(tagName, props);

    // support keys
    if (props.hasOwnProperty('key')) {
        key = props.key;
        props.key = undefined;
    }

    // support namespace
    if (props.hasOwnProperty('namespace')) {
        namespace = props.namespace;
        props.namespace = undefined;
    }

    // fix cursor bug
    if (tag === 'INPUT' &&
        !namespace &&
        props.hasOwnProperty('value') &&
        props.value !== undefined &&
        !isHook(props.value)
    ) {
        props.value = softSetHook(props.value);
    }

    transformProperties(props);

    if (children !== undefined && children !== null) {
        addChild(children, childNodes, tag, props);
    }


    return new VNode(tag, props, childNodes, key, namespace);
}

function addChild(c, childNodes, tag, props) {
    if (typeof c === 'string') {
        childNodes.push(new VText(c));
    } else if (typeof c === 'number') {
        childNodes.push(new VText(String(c)));
    } else if (isChild(c)) {
        childNodes.push(c);
    } else if (isArray(c)) {
        for (var i = 0; i < c.length; i++) {
            addChild(c[i], childNodes, tag, props);
        }
    } else if (c === null || c === undefined) {
        return;
    } else {
        throw UnexpectedVirtualElement({
            foreignObject: c,
            parentVnode: {
                tagName: tag,
                properties: props
            }
        });
    }
}

function transformProperties(props) {
    for (var propName in props) {
        if (props.hasOwnProperty(propName)) {
            var value = props[propName];

            if (isHook(value)) {
                continue;
            }

            if (propName.substr(0, 3) === 'ev-') {
                // add ev-foo support
                props[propName] = evHook(value);
            }
        }
    }
}

function isChild(x) {
    return isVNode(x) || isVText(x) || isWidget(x) || isVThunk(x);
}

function isChildren(x) {
    return typeof x === 'string' || isArray(x) || isChild(x);
}

function UnexpectedVirtualElement(data) {
    var err = new Error();

    err.type = 'virtual-hyperscript.unexpected.virtual-element';
    err.message = 'Unexpected virtual child passed to h().\n' +
        'Expected a VNode / Vthunk / VWidget / string but:\n' +
        'got:\n' +
        errorString(data.foreignObject) +
        '.\n' +
        'The parent vnode is:\n' +
        errorString(data.parentVnode)
        '\n' +
        'Suggested fix: change your `h(..., [ ... ])` callsite.';
    err.foreignObject = data.foreignObject;
    err.parentVnode = data.parentVnode;

    return err;
}

function errorString(obj) {
    try {
        return JSON.stringify(obj, null, '    ');
    } catch (e) {
        return String(obj);
    }
}

},{"../vnode/is-thunk":25,"../vnode/is-vhook":26,"../vnode/is-vnode":27,"../vnode/is-vtext":28,"../vnode/is-widget":29,"../vnode/vnode.js":31,"../vnode/vtext.js":33,"./hooks/ev-hook.js":20,"./hooks/soft-set-hook.js":21,"./parse-tag.js":23,"x-is-array":12}],23:[function(require,module,exports){
'use strict';

var split = require('browser-split');

var classIdSplit = /([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/;
var notClassId = /^\.|#/;

module.exports = parseTag;

function parseTag(tag, props) {
    if (!tag) {
        return 'DIV';
    }

    var noId = !(props.hasOwnProperty('id'));

    var tagParts = split(tag, classIdSplit);
    var tagName = null;

    if (notClassId.test(tagParts[1])) {
        tagName = 'DIV';
    }

    var classes, part, type, i;

    for (i = 0; i < tagParts.length; i++) {
        part = tagParts[i];

        if (!part) {
            continue;
        }

        type = part.charAt(0);

        if (!tagName) {
            tagName = part;
        } else if (type === '.') {
            classes = classes || [];
            classes.push(part.substring(1, part.length));
        } else if (type === '#' && noId) {
            props.id = part.substring(1, part.length);
        }
    }

    if (classes) {
        if (props.className) {
            classes.push(props.className);
        }

        props.className = classes.join(' ');
    }

    return props.namespace ? tagName : tagName.toUpperCase();
}

},{"browser-split":5}],24:[function(require,module,exports){
var isVNode = require("./is-vnode")
var isVText = require("./is-vtext")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")

module.exports = handleThunk

function handleThunk(a, b) {
    var renderedA = a
    var renderedB = b

    if (isThunk(b)) {
        renderedB = renderThunk(b, a)
    }

    if (isThunk(a)) {
        renderedA = renderThunk(a, null)
    }

    return {
        a: renderedA,
        b: renderedB
    }
}

function renderThunk(thunk, previous) {
    var renderedThunk = thunk.vnode

    if (!renderedThunk) {
        renderedThunk = thunk.vnode = thunk.render(previous)
    }

    if (!(isVNode(renderedThunk) ||
            isVText(renderedThunk) ||
            isWidget(renderedThunk))) {
        throw new Error("thunk did not return a valid node");
    }

    return renderedThunk
}

},{"./is-thunk":25,"./is-vnode":27,"./is-vtext":28,"./is-widget":29}],25:[function(require,module,exports){
module.exports = isThunk

function isThunk(t) {
    return t && t.type === "Thunk"
}

},{}],26:[function(require,module,exports){
module.exports = isHook

function isHook(hook) {
    return hook &&
      (typeof hook.hook === "function" && !hook.hasOwnProperty("hook") ||
       typeof hook.unhook === "function" && !hook.hasOwnProperty("unhook"))
}

},{}],27:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualNode

function isVirtualNode(x) {
    return x && x.type === "VirtualNode" && x.version === version
}

},{"./version":30}],28:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualText

function isVirtualText(x) {
    return x && x.type === "VirtualText" && x.version === version
}

},{"./version":30}],29:[function(require,module,exports){
module.exports = isWidget

function isWidget(w) {
    return w && w.type === "Widget"
}

},{}],30:[function(require,module,exports){
module.exports = "2"

},{}],31:[function(require,module,exports){
var version = require("./version")
var isVNode = require("./is-vnode")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")
var isVHook = require("./is-vhook")

module.exports = VirtualNode

var noProperties = {}
var noChildren = []

function VirtualNode(tagName, properties, children, key, namespace) {
    this.tagName = tagName
    this.properties = properties || noProperties
    this.children = children || noChildren
    this.key = key != null ? String(key) : undefined
    this.namespace = (typeof namespace === "string") ? namespace : null

    var count = (children && children.length) || 0
    var descendants = 0
    var hasWidgets = false
    var hasThunks = false
    var descendantHooks = false
    var hooks

    for (var propName in properties) {
        if (properties.hasOwnProperty(propName)) {
            var property = properties[propName]
            if (isVHook(property) && property.unhook) {
                if (!hooks) {
                    hooks = {}
                }

                hooks[propName] = property
            }
        }
    }

    for (var i = 0; i < count; i++) {
        var child = children[i]
        if (isVNode(child)) {
            descendants += child.count || 0

            if (!hasWidgets && child.hasWidgets) {
                hasWidgets = true
            }

            if (!hasThunks && child.hasThunks) {
                hasThunks = true
            }

            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
                descendantHooks = true
            }
        } else if (!hasWidgets && isWidget(child)) {
            if (typeof child.destroy === "function") {
                hasWidgets = true
            }
        } else if (!hasThunks && isThunk(child)) {
            hasThunks = true;
        }
    }

    this.count = count + descendants
    this.hasWidgets = hasWidgets
    this.hasThunks = hasThunks
    this.hooks = hooks
    this.descendantHooks = descendantHooks
}

VirtualNode.prototype.version = version
VirtualNode.prototype.type = "VirtualNode"

},{"./is-thunk":25,"./is-vhook":26,"./is-vnode":27,"./is-widget":29,"./version":30}],32:[function(require,module,exports){
var version = require("./version")

VirtualPatch.NONE = 0
VirtualPatch.VTEXT = 1
VirtualPatch.VNODE = 2
VirtualPatch.WIDGET = 3
VirtualPatch.PROPS = 4
VirtualPatch.ORDER = 5
VirtualPatch.INSERT = 6
VirtualPatch.REMOVE = 7
VirtualPatch.THUNK = 8

module.exports = VirtualPatch

function VirtualPatch(type, vNode, patch) {
    this.type = Number(type)
    this.vNode = vNode
    this.patch = patch
}

VirtualPatch.prototype.version = version
VirtualPatch.prototype.type = "VirtualPatch"

},{"./version":30}],33:[function(require,module,exports){
var version = require("./version")

module.exports = VirtualText

function VirtualText(text) {
    this.text = String(text)
}

VirtualText.prototype.version = version
VirtualText.prototype.type = "VirtualText"

},{"./version":30}],34:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook")

module.exports = diffProps

function diffProps(a, b) {
    var diff

    for (var aKey in a) {
        if (!(aKey in b)) {
            diff = diff || {}
            diff[aKey] = undefined
        }

        var aValue = a[aKey]
        var bValue = b[aKey]

        if (aValue === bValue) {
            continue
        } else if (isObject(aValue) && isObject(bValue)) {
            if (getPrototype(bValue) !== getPrototype(aValue)) {
                diff = diff || {}
                diff[aKey] = bValue
            } else if (isHook(bValue)) {
                 diff = diff || {}
                 diff[aKey] = bValue
            } else {
                var objectDiff = diffProps(aValue, bValue)
                if (objectDiff) {
                    diff = diff || {}
                    diff[aKey] = objectDiff
                }
            }
        } else {
            diff = diff || {}
            diff[aKey] = bValue
        }
    }

    for (var bKey in b) {
        if (!(bKey in a)) {
            diff = diff || {}
            diff[bKey] = b[bKey]
        }
    }

    return diff
}

function getPrototype(value) {
  if (Object.getPrototypeOf) {
    return Object.getPrototypeOf(value)
  } else if (value.__proto__) {
    return value.__proto__
  } else if (value.constructor) {
    return value.constructor.prototype
  }
}

},{"../vnode/is-vhook":26,"is-object":11}],35:[function(require,module,exports){
var isArray = require("x-is-array")

var VPatch = require("../vnode/vpatch")
var isVNode = require("../vnode/is-vnode")
var isVText = require("../vnode/is-vtext")
var isWidget = require("../vnode/is-widget")
var isThunk = require("../vnode/is-thunk")
var handleThunk = require("../vnode/handle-thunk")

var diffProps = require("./diff-props")

module.exports = diff

function diff(a, b) {
    var patch = { a: a }
    walk(a, b, patch, 0)
    return patch
}

function walk(a, b, patch, index) {
    if (a === b) {
        return
    }

    var apply = patch[index]
    var applyClear = false

    if (isThunk(a) || isThunk(b)) {
        thunks(a, b, patch, index)
    } else if (b == null) {

        // If a is a widget we will add a remove patch for it
        // Otherwise any child widgets/hooks must be destroyed.
        // This prevents adding two remove patches for a widget.
        if (!isWidget(a)) {
            clearState(a, patch, index)
            apply = patch[index]
        }

        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))
    } else if (isVNode(b)) {
        if (isVNode(a)) {
            if (a.tagName === b.tagName &&
                a.namespace === b.namespace &&
                a.key === b.key) {
                var propsPatch = diffProps(a.properties, b.properties)
                if (propsPatch) {
                    apply = appendPatch(apply,
                        new VPatch(VPatch.PROPS, a, propsPatch))
                }
                apply = diffChildren(a, b, patch, apply, index)
            } else {
                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
                applyClear = true
            }
        } else {
            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
            applyClear = true
        }
    } else if (isVText(b)) {
        if (!isVText(a)) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
            applyClear = true
        } else if (a.text !== b.text) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
        }
    } else if (isWidget(b)) {
        if (!isWidget(a)) {
            applyClear = true
        }

        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))
    }

    if (apply) {
        patch[index] = apply
    }

    if (applyClear) {
        clearState(a, patch, index)
    }
}

function diffChildren(a, b, patch, apply, index) {
    var aChildren = a.children
    var orderedSet = reorder(aChildren, b.children)
    var bChildren = orderedSet.children

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen

    for (var i = 0; i < len; i++) {
        var leftNode = aChildren[i]
        var rightNode = bChildren[i]
        index += 1

        if (!leftNode) {
            if (rightNode) {
                // Excess nodes in b need to be added
                apply = appendPatch(apply,
                    new VPatch(VPatch.INSERT, null, rightNode))
            }
        } else {
            walk(leftNode, rightNode, patch, index)
        }

        if (isVNode(leftNode) && leftNode.count) {
            index += leftNode.count
        }
    }

    if (orderedSet.moves) {
        // Reorder nodes last
        apply = appendPatch(apply, new VPatch(
            VPatch.ORDER,
            a,
            orderedSet.moves
        ))
    }

    return apply
}

function clearState(vNode, patch, index) {
    // TODO: Make this a single walk, not two
    unhook(vNode, patch, index)
    destroyWidgets(vNode, patch, index)
}

// Patch records for all destroyed widgets must be added because we need
// a DOM node reference for the destroy function
function destroyWidgets(vNode, patch, index) {
    if (isWidget(vNode)) {
        if (typeof vNode.destroy === "function") {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(VPatch.REMOVE, vNode, null)
            )
        }
    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {
        var children = vNode.children
        var len = children.length
        for (var i = 0; i < len; i++) {
            var child = children[i]
            index += 1

            destroyWidgets(child, patch, index)

            if (isVNode(child) && child.count) {
                index += child.count
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

// Create a sub-patch for thunks
function thunks(a, b, patch, index) {
    var nodes = handleThunk(a, b)
    var thunkPatch = diff(nodes.a, nodes.b)
    if (hasPatches(thunkPatch)) {
        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)
    }
}

function hasPatches(patch) {
    for (var index in patch) {
        if (index !== "a") {
            return true
        }
    }

    return false
}

// Execute hooks when two nodes are identical
function unhook(vNode, patch, index) {
    if (isVNode(vNode)) {
        if (vNode.hooks) {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(
                    VPatch.PROPS,
                    vNode,
                    undefinedKeys(vNode.hooks)
                )
            )
        }

        if (vNode.descendantHooks || vNode.hasThunks) {
            var children = vNode.children
            var len = children.length
            for (var i = 0; i < len; i++) {
                var child = children[i]
                index += 1

                unhook(child, patch, index)

                if (isVNode(child) && child.count) {
                    index += child.count
                }
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

function undefinedKeys(obj) {
    var result = {}

    for (var key in obj) {
        result[key] = undefined
    }

    return result
}

// List diff, naive left to right reordering
function reorder(aChildren, bChildren) {
    // O(M) time, O(M) memory
    var bChildIndex = keyIndex(bChildren)
    var bKeys = bChildIndex.keys
    var bFree = bChildIndex.free

    if (bFree.length === bChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(N) time, O(N) memory
    var aChildIndex = keyIndex(aChildren)
    var aKeys = aChildIndex.keys
    var aFree = aChildIndex.free

    if (aFree.length === aChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(MAX(N, M)) memory
    var newChildren = []

    var freeIndex = 0
    var freeCount = bFree.length
    var deletedItems = 0

    // Iterate through a and match a node in b
    // O(N) time,
    for (var i = 0 ; i < aChildren.length; i++) {
        var aItem = aChildren[i]
        var itemIndex

        if (aItem.key) {
            if (bKeys.hasOwnProperty(aItem.key)) {
                // Match up the old keys
                itemIndex = bKeys[aItem.key]
                newChildren.push(bChildren[itemIndex])

            } else {
                // Remove old keyed items
                itemIndex = i - deletedItems++
                newChildren.push(null)
            }
        } else {
            // Match the item in a with the next free item in b
            if (freeIndex < freeCount) {
                itemIndex = bFree[freeIndex++]
                newChildren.push(bChildren[itemIndex])
            } else {
                // There are no free items in b to match with
                // the free items in a, so the extra free nodes
                // are deleted.
                itemIndex = i - deletedItems++
                newChildren.push(null)
            }
        }
    }

    var lastFreeIndex = freeIndex >= bFree.length ?
        bChildren.length :
        bFree[freeIndex]

    // Iterate through b and append any new keys
    // O(M) time
    for (var j = 0; j < bChildren.length; j++) {
        var newItem = bChildren[j]

        if (newItem.key) {
            if (!aKeys.hasOwnProperty(newItem.key)) {
                // Add any new keyed items
                // We are adding new items to the end and then sorting them
                // in place. In future we should insert new items in place.
                newChildren.push(newItem)
            }
        } else if (j >= lastFreeIndex) {
            // Add any leftover non-keyed items
            newChildren.push(newItem)
        }
    }

    var simulate = newChildren.slice()
    var simulateIndex = 0
    var removes = []
    var inserts = []
    var simulateItem

    for (var k = 0; k < bChildren.length;) {
        var wantedItem = bChildren[k]
        simulateItem = simulate[simulateIndex]

        // remove items
        while (simulateItem === null && simulate.length) {
            removes.push(remove(simulate, simulateIndex, null))
            simulateItem = simulate[simulateIndex]
        }

        if (!simulateItem || simulateItem.key !== wantedItem.key) {
            // if we need a key in this position...
            if (wantedItem.key) {
                if (simulateItem && simulateItem.key) {
                    // if an insert doesn't put this key in place, it needs to move
                    if (bKeys[simulateItem.key] !== k + 1) {
                        removes.push(remove(simulate, simulateIndex, simulateItem.key))
                        simulateItem = simulate[simulateIndex]
                        // if the remove didn't put the wanted item in place, we need to insert it
                        if (!simulateItem || simulateItem.key !== wantedItem.key) {
                            inserts.push({key: wantedItem.key, to: k})
                        }
                        // items are matching, so skip ahead
                        else {
                            simulateIndex++
                        }
                    }
                    else {
                        inserts.push({key: wantedItem.key, to: k})
                    }
                }
                else {
                    inserts.push({key: wantedItem.key, to: k})
                }
                k++
            }
            // a key in simulate has no matching wanted key, remove it
            else if (simulateItem && simulateItem.key) {
                removes.push(remove(simulate, simulateIndex, simulateItem.key))
            }
        }
        else {
            simulateIndex++
            k++
        }
    }

    // remove all the remaining nodes from simulate
    while(simulateIndex < simulate.length) {
        simulateItem = simulate[simulateIndex]
        removes.push(remove(simulate, simulateIndex, simulateItem && simulateItem.key))
    }

    // If the only moves we have are deletes then we can just
    // let the delete patch remove these items.
    if (removes.length === deletedItems && !inserts.length) {
        return {
            children: newChildren,
            moves: null
        }
    }

    return {
        children: newChildren,
        moves: {
            removes: removes,
            inserts: inserts
        }
    }
}

function remove(arr, index, key) {
    arr.splice(index, 1)

    return {
        from: index,
        key: key
    }
}

function keyIndex(children) {
    var keys = {}
    var free = []
    var length = children.length

    for (var i = 0; i < length; i++) {
        var child = children[i]

        if (child.key) {
            keys[child.key] = i
        } else {
            free.push(i)
        }
    }

    return {
        keys: keys,     // A hash of key name to index
        free: free      // An array of unkeyed item indices
    }
}

function appendPatch(apply, patch) {
    if (apply) {
        if (isArray(apply)) {
            apply.push(patch)
        } else {
            apply = [apply, patch]
        }

        return apply
    } else {
        return patch
    }
}

},{"../vnode/handle-thunk":24,"../vnode/is-thunk":25,"../vnode/is-vnode":27,"../vnode/is-vtext":28,"../vnode/is-widget":29,"../vnode/vpatch":32,"./diff-props":34,"x-is-array":12}]},{},[4])(4)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.define("goog.DEBUG", true);
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error("Invalid module identifier");
  }
  if (!goog.isInModuleLoader_()) {
    throw Error("Module " + name + " has been loaded incorrectly.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return name in goog.loadedModules_ ? goog.loadedModules_[name] : goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
goog.forwardDeclare("Document");
goog.forwardDeclare("HTMLScriptElement");
goog.forwardDeclare("XMLHttpRequest");
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_isModule) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      deps.pathIsModule[path] = !!opt_isModule;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.writeScripts_(path);
        return null;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    goog.logToConsole_(errorMessage);
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.dependencies_ = {pathIsModule:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return doc != null && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("SCRIPT");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var script = (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document && goog.global.document.all);
  goog.importModule_ = function(src) {
    var bootstrap = 'goog.retrieveAndExecModule_("' + src + '");';
    if (goog.importScript_("", bootstrap)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.queuedModules_ = [];
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + scriptText + "\n" + ";return exports" + "});" + "\n//# sourceURL\x3d" + srcUrl + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(scriptText + "\n//# sourceURL\x3d" + srcUrl + "\n") + ");";
    }
  };
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0;i < count;i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && goog.dependencies_.pathIsModule[path]) {
      var abspath = goog.basePath + path;
      return abspath in goog.dependencies_.deferred;
    }
    return false;
  };
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && path in goog.dependencies_.requires) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };
  goog.loadModuleFromUrl = function(url) {
    goog.retrieveAndExecModule_(url);
  };
  goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName:undefined, declareLegacyNamespace:false};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else {
        if (goog.isString(moduleDef)) {
          exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
        } else {
          throw Error("Invalid module definition");
        }
      }
      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name "' + moduleName + '"');
      }
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
          Object.seal(exports);
        }
      }
      goog.loadedModules_[moduleName] = exports;
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };
  goog.loadModuleFromSource_ = function() {
    var exports = {};
    eval(arguments[0]);
    return exports;
  };
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
  };
  goog.appendScriptSrcNode_ = function(src) {
    var doc = goog.global.document;
    var scriptEl = (doc.createElement("script"));
    scriptEl.type = "text/javascript";
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      var isOldIE = goog.IS_OLD_IE_;
      if (opt_sourceText === undefined) {
        if (!isOldIE) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange\x3d'goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"' + state + "\x3e\x3c/" + "script\x3e");
        }
      } else {
        doc.write('\x3cscript type\x3d"text/javascript"\x3e' + opt_sourceText + "\x3c/" + "script\x3e");
      }
      return true;
    } else {
      return false;
    }
  };
  goog.lastNonModuleScriptIndex_ = 0;
  goog.onScriptLoad_ = function(script, scriptIndex) {
    if (script.readyState == "complete" && goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };
  goog.writeScripts_ = function(pathToLoad) {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    visitNode(pathToLoad);
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      if (path) {
        if (!deps.pathIsModule[path]) {
          goog.importScript_(goog.basePath + path);
        } else {
          goog.importModule_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error("Undefined script input");
      }
    }
    goog.moduleLoaderState_ = moduleState;
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    var xhr = new goog.global["XMLHttpRequest"];
    xhr.open("get", src, false);
    xhr.send();
    return xhr.responseText;
  }
};
goog.retrieveAndExecModule_ = function(src) {
  if (!COMPILED) {
    var originalPath = src;
    src = goog.normalizePath_(src);
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    var scriptText = goog.loadFileSync_(src);
    if (scriptText != null) {
      var execModuleScript = goog.wrapModule_(src, scriptText);
      var isOldIE = goog.IS_OLD_IE_;
      if (isOldIE) {
        goog.dependencies_.deferred[originalPath] = execModuleScript;
        goog.queuedModules_.push(originalPath);
      } else {
        importScript(src, execModuleScript);
      }
    } else {
      throw new Error("load of " + src + "failed");
    }
  }
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in (obj)) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _evalTest_ \x3d 1;");
        if (typeof goog.global["_evalTest_"] != "undefined") {
          try {
            delete goog.global["_evalTest_"];
          } catch (ignore) {
          }
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = (doc.createElement("SCRIPT"));
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2;i < arguments.length;i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1;i < arguments.length;i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2;i < arguments.length;i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(tokenizerRegExp);
  var tokens2 = str2.toLowerCase().match(tokenizerRegExp);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.intAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\D+/g);
};
goog.string.floatAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\.\d+|\D+/g);
};
goog.string.numerateCompare = goog.string.floatAwareCompare;
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\", "\x3c":"\x3c"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  var sb = ['"'];
  for (var i = 0;i < s.length;i++) {
    var ch = s.charAt(i);
    var cc = ch.charCodeAt(0);
    sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
  }
  sb.push('"');
  return sb.join("");
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = String.prototype.repeat ? function(string, length) {
  return string.repeat(length);
} : function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i) >>> 0;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0;i < b.length + 1;i++) {
    v0[i] = i;
  }
  for (var i = 0;i < a.length;i++) {
    v1[0] = i + 1;
    for (var j = 0;j < b.length;j++) {
      var cost = a[i] != b[j];
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0;j < v0.length;j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return obj !== null && key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in (obj)) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (obj !== null && key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (obj !== null && key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in (obj) ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  var val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (goog.isFunction(obj.clone)) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0;j < len2;j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(item) ? "o" + goog.getUid(item) : (typeof item).charAt(0) + item;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0;c < element.length;c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0;r < recurseResult.length;r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  var minLen = arguments[0].length;
  for (var i = 1;i < arguments.length;i++) {
    if (arguments[i].length < minLen) {
      minLen = arguments[i].length;
    }
  }
  for (var i = 0;i < minLen;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      value.push(arguments[j][i]);
    }
    result.push(value);
  }
  return result;
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.provide("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "1.7.170";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_;
goog.define("cljs.core._STAR_target_STAR_", "default");
cljs.core._STAR_ns_STAR_ = null;
cljs.core._STAR_out_STAR_ = null;
cljs.core._STAR_assert_STAR_ = true;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
if (typeof cljs.core._STAR_print_err_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_err_fn_STAR_ = function cljs$core$_STAR_print_err_fn_STAR_(_) {
    throw new Error("No *print-err-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core.set_print_err_fn_BANG_ = function cljs$core$set_print_err_fn_BANG_(f) {
  return cljs.core._STAR_print_err_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.into_array;
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var G__6777__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__6777 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__6778__i = 0, G__6778__a = new Array(arguments.length - 0);
        while (G__6778__i < G__6778__a.length) {
          G__6778__a[G__6778__i] = arguments[G__6778__i + 0];
          ++G__6778__i;
        }
        args = new cljs.core.IndexedSeq(G__6778__a, 0);
      }
      return G__6777__delegate.call(this, args);
    };
    G__6777.cljs$lang$maxFixedArity = 0;
    G__6777.cljs$lang$applyTo = function(arglist__6779) {
      var args = cljs.core.seq(arglist__6779);
      return G__6777__delegate(args);
    };
    G__6777.cljs$core$IFn$_invoke$arity$variadic = G__6777__delegate;
    return G__6777;
  }();
  cljs.core._STAR_print_err_fn_STAR_ = function() {
    var G__6780__delegate = function(args) {
      return console.error.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__6780 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__6781__i = 0, G__6781__a = new Array(arguments.length - 0);
        while (G__6781__i < G__6781__a.length) {
          G__6781__a[G__6781__i] = arguments[G__6781__i + 0];
          ++G__6781__i;
        }
        args = new cljs.core.IndexedSeq(G__6781__a, 0);
      }
      return G__6780__delegate.call(this, args);
    };
    G__6780.cljs$lang$maxFixedArity = 0;
    G__6780.cljs$lang$applyTo = function(arglist__6782) {
      var args = cljs.core.seq(arglist__6782);
      return G__6780__delegate(args);
    };
    G__6780.cljs$core$IFn$_invoke$arity$variadic = G__6780__delegate;
    return G__6780;
  }();
  return null;
};
cljs.core._STAR_1;
cljs.core._STAR_2;
cljs.core._STAR_3;
cljs.core._STAR_e;
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.instance_QMARK_;
cljs.core.Keyword;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (x == null) {
    return true;
  } else {
    if (x === false) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.char_QMARK_ = function cljs$core$char_QMARK_(x) {
  return goog.string.isUnicodeChar(x);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4656__auto__ = ty;
    if (cljs.core.truth_(and__4656__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4656__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4423__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4423__auto__)) {
    var s = temp__4423__auto__;
    return s;
  } else {
    return [cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && goog.typeOf(Symbol) === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.CHAR_MAP = {"]":"_RBRACK_", "'":"_SINGLEQUOTE_", "\x3d":"_EQ_", '"':"_DOUBLEQUOTE_", "!":"_BANG_", "*":"_STAR_", "%":"_PERCENT_", "|":"_BAR_", "~":"_TILDE_", "/":"_SLASH_", "\\":"_BSLASH_", "-":"_", "?":"_QMARK_", "\x26":"_AMPERSAND_", ":":"_COLON_", "\x3c":"_LT_", "{":"_LBRACE_", "}":"_RBRACE_", "[":"_LBRACK_", "#":"_SHARP_", "^":"_CARET_", "+":"_PLUS_", "@":"_CIRCA_", "\x3e":"_GT_"};
cljs.core.DEMUNGE_MAP = {"_RBRACE_":"}", "_COLON_":":", "_BANG_":"!", "_QMARK_":"?", "_BSLASH_":"\\\\", "_SLASH_":"/", "_PERCENT_":"%", "_PLUS_":"+", "_SHARP_":"#", "_LBRACE_":"{", "_BAR_":"|", "_LBRACK_":"[", "_EQ_":"\x3d", "_":"-", "_TILDE_":"~", "_RBRACK_":"]", "_GT_":"\x3e", "_SINGLEQUOTE_":"'", "_CIRCA_":"@", "_AMPERSAND_":"\x26", "_DOUBLEQUOTE_":'\\"', "_CARET_":"^", "_LT_":"\x3c", "_STAR_":"*"};
cljs.core.DEMUNGE_PATTERN = null;
cljs.core.system_time = function cljs$core$system_time() {
  if (typeof performance !== "undefined" && !(performance.now == null)) {
    return performance.now();
  } else {
    if (typeof process !== "undefined" && !(process.hrtime == null)) {
      var t = process.hrtime();
      return (t[0] * 1E9 + t[1]) / 1E6;
    } else {
      return (new Date).getTime();
    }
  }
};
cljs.core.make_array = function cljs$core$make_array(var_args) {
  var args6783 = [];
  var len__5726__auto___6786 = arguments.length;
  var i__5727__auto___6787 = 0;
  while (true) {
    if (i__5727__auto___6787 < len__5726__auto___6786) {
      args6783.push(arguments[i__5727__auto___6787]);
      var G__6788 = i__5727__auto___6787 + 1;
      i__5727__auto___6787 = G__6788;
      continue;
    } else {
    }
    break;
  }
  var G__6785 = args6783.length;
  switch(G__6785) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6783.length)].join(""));;
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5571__auto___6790 = len;
  var i_6791 = 0;
  while (true) {
    if (i_6791 < n__5571__auto___6790) {
      new_arr[i_6791] = arr[i_6791];
      var G__6792 = i_6791 + 1;
      i_6791 = G__6792;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__6793 = i + 1;
      i = G__6793;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.apply;
cljs.core.aget = function cljs$core$aget(var_args) {
  var args6794 = [];
  var len__5726__auto___6803 = arguments.length;
  var i__5727__auto___6804 = 0;
  while (true) {
    if (i__5727__auto___6804 < len__5726__auto___6803) {
      args6794.push(arguments[i__5727__auto___6804]);
      var G__6805 = i__5727__auto___6804 + 1;
      i__5727__auto___6804 = G__6805;
      continue;
    } else {
    }
    break;
  }
  var G__6799 = args6794.length;
  switch(G__6799) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args6794.slice(2), 0);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__6800 = cljs.core.aget;
  var G__6801 = array[i];
  var G__6802 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__6800, G__6801, G__6802) : cljs.core.apply.call(null, G__6800, G__6801, G__6802);
};
cljs.core.aget.cljs$lang$applyTo = function(seq6795) {
  var G__6796 = cljs.core.first(seq6795);
  var seq6795__$1 = cljs.core.next(seq6795);
  var G__6797 = cljs.core.first(seq6795__$1);
  var seq6795__$2 = cljs.core.next(seq6795__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__6796, G__6797, seq6795__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset(var_args) {
  var args6807 = [];
  var len__5726__auto___6818 = arguments.length;
  var i__5727__auto___6819 = 0;
  while (true) {
    if (i__5727__auto___6819 < len__5726__auto___6818) {
      args6807.push(arguments[i__5727__auto___6819]);
      var G__6820 = i__5727__auto___6819 + 1;
      i__5727__auto___6819 = G__6820;
      continue;
    } else {
    }
    break;
  }
  var G__6813 = args6807.length;
  switch(G__6813) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args6807.slice(3), 0);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5745__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__6814 = cljs.core.aset;
  var G__6815 = array[idx];
  var G__6816 = idx2;
  var G__6817 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__6814, G__6815, G__6816, G__6817) : cljs.core.apply.call(null, G__6814, G__6815, G__6816, G__6817);
};
cljs.core.aset.cljs$lang$applyTo = function(seq6808) {
  var G__6809 = cljs.core.first(seq6808);
  var seq6808__$1 = cljs.core.next(seq6808);
  var G__6810 = cljs.core.first(seq6808__$1);
  var seq6808__$2 = cljs.core.next(seq6808__$1);
  var G__6811 = cljs.core.first(seq6808__$2);
  var seq6808__$3 = cljs.core.next(seq6808__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__6809, G__6810, G__6811, seq6808__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.reduce;
cljs.core.into_array = function cljs$core$into_array(var_args) {
  var args6822 = [];
  var len__5726__auto___6828 = arguments.length;
  var i__5727__auto___6829 = 0;
  while (true) {
    if (i__5727__auto___6829 < len__5726__auto___6828) {
      args6822.push(arguments[i__5727__auto___6829]);
      var G__6830 = i__5727__auto___6829 + 1;
      i__5727__auto___6829 = G__6830;
      continue;
    } else {
    }
    break;
  }
  var G__6824 = args6822.length;
  switch(G__6824) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6822.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__6825 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__6826 = [];
  var G__6827 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__6825, G__6826, G__6827) : cljs.core.reduce.call(null, G__6825, G__6826, G__6827);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___6835 = arguments.length;
  var i__5727__auto___6836 = 0;
  while (true) {
    if (i__5727__auto___6836 < len__5726__auto___6835) {
      args__5733__auto__.push(arguments[i__5727__auto___6836]);
      var G__6837 = i__5727__auto___6836 + 1;
      i__5727__auto___6836 = G__6837;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 2 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(2), 0) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5734__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq6832) {
  var G__6833 = cljs.core.first(seq6832);
  var seq6832__$1 = cljs.core.next(seq6832);
  var G__6834 = cljs.core.first(seq6832__$1);
  var seq6832__$2 = cljs.core.next(seq6832__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__6833, G__6834, seq6832__$2);
};
cljs.core.Fn = function() {
};
cljs.core.IFn = function() {
};
cljs.core._invoke = function cljs$core$_invoke(var_args) {
  var args6838 = [];
  var len__5726__auto___6841 = arguments.length;
  var i__5727__auto___6842 = 0;
  while (true) {
    if (i__5727__auto___6842 < len__5726__auto___6841) {
      args6838.push(arguments[i__5727__auto___6842]);
      var G__6843 = i__5727__auto___6842 + 1;
      i__5727__auto___6842 = G__6843;
      continue;
    } else {
    }
    break;
  }
  var G__6840 = args6838.length;
  switch(G__6840) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6838.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$1 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__5324__auto__.call(null, this$);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(this$) : m__5324__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$2 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__5324__auto__.call(null, this$, a);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, a) : m__5324__auto____$1.call(null, this$, a);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$3 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__5324__auto__.call(null, this$, a, b);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__5324__auto____$1.call(null, this$, a, b);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$4 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$4 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__5324__auto__.call(null, this$, a, b, c);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__5324__auto____$1.call(null, this$, a, b, c);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$5 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$5 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__5324__auto__.call(null, this$, a, b, c, d);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__5324__auto____$1.call(null, this$, a, b, c, d);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$6 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$6 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__5324__auto__.call(null, this$, a, b, c, d, e);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$6 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__5324__auto____$1.call(null, this$, a, b, c, d, e);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$7 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$7 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__5324__auto__.call(null, this$, a, b, c, d, e, f);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$7 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$8 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$8 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$8 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$9 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$9 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$9 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$10 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$10 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$10 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$11 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$11 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$11 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$12 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$12 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$12 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$13 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$13 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$13 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$14 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$14 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$14 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$15 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$15 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$15 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$16 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$16 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$16 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$17 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$17 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$17 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$18 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$18 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$18 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$19 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$19 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$19 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$20 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$20 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$20 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$21 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$21 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$21 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$22 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._invoke[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$22 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__5324__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var m__5324__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$22 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__5324__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
};
cljs.core._clone = function cljs$core$_clone(value) {
  if (!(value == null) && !(value.cljs$core$ICloneable$_clone$arity$1 == null)) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__5323__auto__ = value == null ? null : value;
    var m__5324__auto__ = cljs.core._clone[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__5324__auto__.call(null, value);
    } else {
      var m__5324__auto____$1 = cljs.core._clone["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(value) : m__5324__auto____$1.call(null, value);
      } else {
        throw cljs.core.missing_protocol("ICloneable.-clone", value);
      }
    }
  }
};
cljs.core.ICounted = function() {
};
cljs.core._count = function cljs$core$_count(coll) {
  if (!(coll == null) && !(coll.cljs$core$ICounted$_count$arity$1 == null)) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._count[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._count["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ICounted.-count", coll);
      }
    }
  }
};
cljs.core.IEmptyableCollection = function() {
};
cljs.core._empty = function cljs$core$_empty(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEmptyableCollection$_empty$arity$1 == null)) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._empty[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._empty["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
      }
    }
  }
};
cljs.core.ICollection = function() {
};
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (!(coll == null) && !(coll.cljs$core$ICollection$_conj$arity$2 == null)) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._conj[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__5324__auto__.call(null, coll, o);
    } else {
      var m__5324__auto____$1 = cljs.core._conj["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, o) : m__5324__auto____$1.call(null, coll, o);
      } else {
        throw cljs.core.missing_protocol("ICollection.-conj", coll);
      }
    }
  }
};
cljs.core.IIndexed = function() {
};
cljs.core._nth = function cljs$core$_nth(var_args) {
  var args6845 = [];
  var len__5726__auto___6848 = arguments.length;
  var i__5727__auto___6849 = 0;
  while (true) {
    if (i__5727__auto___6849 < len__5726__auto___6848) {
      args6845.push(arguments[i__5727__auto___6849]);
      var G__6850 = i__5727__auto___6849 + 1;
      i__5727__auto___6849 = G__6850;
      continue;
    } else {
    }
    break;
  }
  var G__6847 = args6845.length;
  switch(G__6847) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6845.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$2 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._nth[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__5324__auto__.call(null, coll, n);
    } else {
      var m__5324__auto____$1 = cljs.core._nth["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, n) : m__5324__auto____$1.call(null, coll, n);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$3 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._nth[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__5324__auto__.call(null, coll, n, not_found);
    } else {
      var m__5324__auto____$1 = cljs.core._nth["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__5324__auto____$1.call(null, coll, n, not_found);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
};
cljs.core.ISeq = function() {
};
cljs.core._first = function cljs$core$_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_first$arity$1 == null)) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._first[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._first["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-first", coll);
      }
    }
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_rest$arity$1 == null)) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._rest[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._rest["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-rest", coll);
      }
    }
  }
};
cljs.core.INext = function() {
};
cljs.core._next = function cljs$core$_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$INext$_next$arity$1 == null)) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._next[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._next["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("INext.-next", coll);
      }
    }
  }
};
cljs.core.ILookup = function() {
};
cljs.core._lookup = function cljs$core$_lookup(var_args) {
  var args6852 = [];
  var len__5726__auto___6855 = arguments.length;
  var i__5727__auto___6856 = 0;
  while (true) {
    if (i__5727__auto___6856 < len__5726__auto___6855) {
      args6852.push(arguments[i__5727__auto___6856]);
      var G__6857 = i__5727__auto___6856 + 1;
      i__5727__auto___6856 = G__6857;
      continue;
    } else {
    }
    break;
  }
  var G__6854 = args6852.length;
  switch(G__6854) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6852.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$2 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._lookup[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__5324__auto__.call(null, o, k);
    } else {
      var m__5324__auto____$1 = cljs.core._lookup["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(o, k) : m__5324__auto____$1.call(null, o, k);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$3 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._lookup[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__5324__auto__.call(null, o, k, not_found);
    } else {
      var m__5324__auto____$1 = cljs.core._lookup["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__5324__auto____$1.call(null, o, k, not_found);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
};
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 == null)) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__5324__auto__.call(null, coll, k);
    } else {
      var m__5324__auto____$1 = cljs.core._contains_key_QMARK_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__5324__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
      }
    }
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_assoc$arity$3 == null)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._assoc[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__5324__auto__.call(null, coll, k, v);
    } else {
      var m__5324__auto____$1 = cljs.core._assoc["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__5324__auto____$1.call(null, coll, k, v);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
      }
    }
  }
};
cljs.core.IMap = function() {
};
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IMap$_dissoc$arity$2 == null)) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._dissoc[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__5324__auto__.call(null, coll, k);
    } else {
      var m__5324__auto____$1 = cljs.core._dissoc["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__5324__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IMap.-dissoc", coll);
      }
    }
  }
};
cljs.core.IMapEntry = function() {
};
cljs.core._key = function cljs$core$_key(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_key$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._key[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._key["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-key", coll);
      }
    }
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_val$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._val[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._val["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-val", coll);
      }
    }
  }
};
cljs.core.ISet = function() {
};
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (!(coll == null) && !(coll.cljs$core$ISet$_disjoin$arity$2 == null)) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._disjoin[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__5324__auto__.call(null, coll, v);
    } else {
      var m__5324__auto____$1 = cljs.core._disjoin["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, v) : m__5324__auto____$1.call(null, coll, v);
      } else {
        throw cljs.core.missing_protocol("ISet.-disjoin", coll);
      }
    }
  }
};
cljs.core.IStack = function() {
};
cljs.core._peek = function cljs$core$_peek(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_peek$arity$1 == null)) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._peek[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._peek["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-peek", coll);
      }
    }
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_pop$arity$1 == null)) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._pop[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._pop["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-pop", coll);
      }
    }
  }
};
cljs.core.IVector = function() {
};
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (!(coll == null) && !(coll.cljs$core$IVector$_assoc_n$arity$3 == null)) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._assoc_n[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__5324__auto__.call(null, coll, n, val);
    } else {
      var m__5324__auto____$1 = cljs.core._assoc_n["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__5324__auto____$1.call(null, coll, n, val);
      } else {
        throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
      }
    }
  }
};
cljs.core.IDeref = function() {
};
cljs.core._deref = function cljs$core$_deref(o) {
  if (!(o == null) && !(o.cljs$core$IDeref$_deref$arity$1 == null)) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._deref[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__5324__auto__.call(null, o);
    } else {
      var m__5324__auto____$1 = cljs.core._deref["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__5324__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IDeref.-deref", o);
      }
    }
  }
};
cljs.core.IDerefWithTimeout = function() {
};
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (!(o == null) && !(o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3 == null)) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__5324__auto__.call(null, o, msec, timeout_val);
    } else {
      var m__5324__auto____$1 = cljs.core._deref_with_timeout["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__5324__auto____$1.call(null, o, msec, timeout_val);
      } else {
        throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
      }
    }
  }
};
cljs.core.IMeta = function() {
};
cljs.core._meta = function cljs$core$_meta(o) {
  if (!(o == null) && !(o.cljs$core$IMeta$_meta$arity$1 == null)) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._meta[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__5324__auto__.call(null, o);
    } else {
      var m__5324__auto____$1 = cljs.core._meta["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__5324__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IMeta.-meta", o);
      }
    }
  }
};
cljs.core.IWithMeta = function() {
};
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (!(o == null) && !(o.cljs$core$IWithMeta$_with_meta$arity$2 == null)) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._with_meta[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__5324__auto__.call(null, o, meta);
    } else {
      var m__5324__auto____$1 = cljs.core._with_meta["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(o, meta) : m__5324__auto____$1.call(null, o, meta);
      } else {
        throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
      }
    }
  }
};
cljs.core.IReduce = function() {
};
cljs.core._reduce = function cljs$core$_reduce(var_args) {
  var args6859 = [];
  var len__5726__auto___6862 = arguments.length;
  var i__5727__auto___6863 = 0;
  while (true) {
    if (i__5727__auto___6863 < len__5726__auto___6862) {
      args6859.push(arguments[i__5727__auto___6863]);
      var G__6864 = i__5727__auto___6863 + 1;
      i__5727__auto___6863 = G__6864;
      continue;
    } else {
    }
    break;
  }
  var G__6861 = args6859.length;
  switch(G__6861) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6859.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$2 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._reduce[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__5324__auto__.call(null, coll, f);
    } else {
      var m__5324__auto____$1 = cljs.core._reduce["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, f) : m__5324__auto____$1.call(null, coll, f);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$3 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._reduce[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__5324__auto__.call(null, coll, f, start);
    } else {
      var m__5324__auto____$1 = cljs.core._reduce["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__5324__auto____$1.call(null, coll, f, start);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
};
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (!(coll == null) && !(coll.cljs$core$IKVReduce$_kv_reduce$arity$3 == null)) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._kv_reduce[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__5324__auto__.call(null, coll, f, init);
    } else {
      var m__5324__auto____$1 = cljs.core._kv_reduce["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__5324__auto____$1.call(null, coll, f, init);
      } else {
        throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
      }
    }
  }
};
cljs.core.IEquiv = function() {
};
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (!(o == null) && !(o.cljs$core$IEquiv$_equiv$arity$2 == null)) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._equiv[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__5324__auto__.call(null, o, other);
    } else {
      var m__5324__auto____$1 = cljs.core._equiv["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(o, other) : m__5324__auto____$1.call(null, o, other);
      } else {
        throw cljs.core.missing_protocol("IEquiv.-equiv", o);
      }
    }
  }
};
cljs.core.IHash = function() {
};
cljs.core._hash = function cljs$core$_hash(o) {
  if (!(o == null) && !(o.cljs$core$IHash$_hash$arity$1 == null)) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._hash[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__5324__auto__.call(null, o);
    } else {
      var m__5324__auto____$1 = cljs.core._hash["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__5324__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IHash.-hash", o);
      }
    }
  }
};
cljs.core.ISeqable = function() {
};
cljs.core._seq = function cljs$core$_seq(o) {
  if (!(o == null) && !(o.cljs$core$ISeqable$_seq$arity$1 == null)) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._seq[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__5324__auto__.call(null, o);
    } else {
      var m__5324__auto____$1 = cljs.core._seq["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__5324__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("ISeqable.-seq", o);
      }
    }
  }
};
cljs.core.ISequential = function() {
};
cljs.core.IList = function() {
};
cljs.core.IRecord = function() {
};
cljs.core.IReversible = function() {
};
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (!(coll == null) && !(coll.cljs$core$IReversible$_rseq$arity$1 == null)) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._rseq[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._rseq["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IReversible.-rseq", coll);
      }
    }
  }
};
cljs.core.ISorted = function() {
};
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq$arity$2 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._sorted_seq[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__5324__auto__.call(null, coll, ascending_QMARK_);
    } else {
      var m__5324__auto____$1 = cljs.core._sorted_seq["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__5324__auto____$1.call(null, coll, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
      }
    }
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq_from$arity$3 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__5324__auto__.call(null, coll, k, ascending_QMARK_);
    } else {
      var m__5324__auto____$1 = cljs.core._sorted_seq_from["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__5324__auto____$1.call(null, coll, k, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
      }
    }
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_entry_key$arity$2 == null)) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._entry_key[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__5324__auto__.call(null, coll, entry);
    } else {
      var m__5324__auto____$1 = cljs.core._entry_key["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__5324__auto____$1.call(null, coll, entry);
      } else {
        throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
      }
    }
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_comparator$arity$1 == null)) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._comparator[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._comparator["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISorted.-comparator", coll);
      }
    }
  }
};
cljs.core.IWriter = function() {
};
cljs.core._write = function cljs$core$_write(writer, s) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_write$arity$2 == null)) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__5323__auto__ = writer == null ? null : writer;
    var m__5324__auto__ = cljs.core._write[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__5324__auto__.call(null, writer, s);
    } else {
      var m__5324__auto____$1 = cljs.core._write["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(writer, s) : m__5324__auto____$1.call(null, writer, s);
      } else {
        throw cljs.core.missing_protocol("IWriter.-write", writer);
      }
    }
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_flush$arity$1 == null)) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__5323__auto__ = writer == null ? null : writer;
    var m__5324__auto__ = cljs.core._flush[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__5324__auto__.call(null, writer);
    } else {
      var m__5324__auto____$1 = cljs.core._flush["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(writer) : m__5324__auto____$1.call(null, writer);
      } else {
        throw cljs.core.missing_protocol("IWriter.-flush", writer);
      }
    }
  }
};
cljs.core.IPrintWithWriter = function() {
};
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (!(o == null) && !(o.cljs$core$IPrintWithWriter$_pr_writer$arity$3 == null)) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._pr_writer[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__5324__auto__.call(null, o, writer, opts);
    } else {
      var m__5324__auto____$1 = cljs.core._pr_writer["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__5324__auto____$1.call(null, o, writer, opts);
      } else {
        throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
      }
    }
  }
};
cljs.core.IPending = function() {
};
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (!(d == null) && !(d.cljs$core$IPending$_realized_QMARK_$arity$1 == null)) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__5323__auto__ = d == null ? null : d;
    var m__5324__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(d) : m__5324__auto__.call(null, d);
    } else {
      var m__5324__auto____$1 = cljs.core._realized_QMARK_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(d) : m__5324__auto____$1.call(null, d);
      } else {
        throw cljs.core.missing_protocol("IPending.-realized?", d);
      }
    }
  }
};
cljs.core.IWatchable = function() {
};
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_notify_watches$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._notify_watches[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__5324__auto__.call(null, this$, oldval, newval);
    } else {
      var m__5324__auto____$1 = cljs.core._notify_watches["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__5324__auto____$1.call(null, this$, oldval, newval);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
      }
    }
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_add_watch$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._add_watch[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__5324__auto__.call(null, this$, key, f);
    } else {
      var m__5324__auto____$1 = cljs.core._add_watch["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__5324__auto____$1.call(null, this$, key, f);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
      }
    }
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_remove_watch$arity$2 == null)) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core._remove_watch[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__5324__auto__.call(null, this$, key);
    } else {
      var m__5324__auto____$1 = cljs.core._remove_watch["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, key) : m__5324__auto____$1.call(null, this$, key);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
      }
    }
  }
};
cljs.core.IEditableCollection = function() {
};
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEditableCollection$_as_transient$arity$1 == null)) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._as_transient[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._as_transient["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
      }
    }
  }
};
cljs.core.ITransientCollection = function() {
};
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__5323__auto__ = tcoll == null ? null : tcoll;
    var m__5324__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__5324__auto__.call(null, tcoll, val);
    } else {
      var m__5324__auto____$1 = cljs.core._conj_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__5324__auto____$1.call(null, tcoll, val);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
      }
    }
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__5323__auto__ = tcoll == null ? null : tcoll;
    var m__5324__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__5324__auto__.call(null, tcoll);
    } else {
      var m__5324__auto____$1 = cljs.core._persistent_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__5324__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
      }
    }
  }
};
cljs.core.ITransientAssociative = function() {
};
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__5323__auto__ = tcoll == null ? null : tcoll;
    var m__5324__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__5324__auto__.call(null, tcoll, key, val);
    } else {
      var m__5324__auto____$1 = cljs.core._assoc_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__5324__auto____$1.call(null, tcoll, key, val);
      } else {
        throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientMap = function() {
};
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__5323__auto__ = tcoll == null ? null : tcoll;
    var m__5324__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__5324__auto__.call(null, tcoll, key);
    } else {
      var m__5324__auto____$1 = cljs.core._dissoc_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__5324__auto____$1.call(null, tcoll, key);
      } else {
        throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientVector = function() {
};
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__5323__auto__ = tcoll == null ? null : tcoll;
    var m__5324__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__5324__auto__.call(null, tcoll, n, val);
    } else {
      var m__5324__auto____$1 = cljs.core._assoc_n_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__5324__auto____$1.call(null, tcoll, n, val);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
      }
    }
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__5323__auto__ = tcoll == null ? null : tcoll;
    var m__5324__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__5324__auto__.call(null, tcoll);
    } else {
      var m__5324__auto____$1 = cljs.core._pop_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__5324__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
      }
    }
  }
};
cljs.core.ITransientSet = function() {
};
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__5323__auto__ = tcoll == null ? null : tcoll;
    var m__5324__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__5324__auto__.call(null, tcoll, v);
    } else {
      var m__5324__auto____$1 = cljs.core._disjoin_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__5324__auto____$1.call(null, tcoll, v);
      } else {
        throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
      }
    }
  }
};
cljs.core.IComparable = function() {
};
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (!(x == null) && !(x.cljs$core$IComparable$_compare$arity$2 == null)) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__5323__auto__ = x == null ? null : x;
    var m__5324__auto__ = cljs.core._compare[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__5324__auto__.call(null, x, y);
    } else {
      var m__5324__auto____$1 = cljs.core._compare["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(x, y) : m__5324__auto____$1.call(null, x, y);
      } else {
        throw cljs.core.missing_protocol("IComparable.-compare", x);
      }
    }
  }
};
cljs.core.IChunk = function() {
};
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunk$_drop_first$arity$1 == null)) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._drop_first[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._drop_first["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
      }
    }
  }
};
cljs.core.IChunkedSeq = function() {
};
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_first$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._chunked_first[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._chunked_first["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
      }
    }
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._chunked_rest[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._chunked_rest["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
      }
    }
  }
};
cljs.core.IChunkedNext = function() {
};
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedNext$_chunked_next$arity$1 == null)) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._chunked_next[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._chunked_next["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
      }
    }
  }
};
cljs.core.INamed = function() {
};
cljs.core._name = function cljs$core$_name(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_name$arity$1 == null)) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__5323__auto__ = x == null ? null : x;
    var m__5324__auto__ = cljs.core._name[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5324__auto__.call(null, x);
    } else {
      var m__5324__auto____$1 = cljs.core._name["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5324__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-name", x);
      }
    }
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_namespace$arity$1 == null)) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__5323__auto__ = x == null ? null : x;
    var m__5324__auto__ = cljs.core._namespace[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5324__auto__.call(null, x);
    } else {
      var m__5324__auto____$1 = cljs.core._namespace["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5324__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-namespace", x);
      }
    }
  }
};
cljs.core.IAtom = function() {
};
cljs.core.IReset = function() {
};
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IReset$_reset_BANG_$arity$2 == null)) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__5324__auto__.call(null, o, new_value);
    } else {
      var m__5324__auto____$1 = cljs.core._reset_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__5324__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IReset.-reset!", o);
      }
    }
  }
};
cljs.core.ISwap = function() {
};
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_(var_args) {
  var args6866 = [];
  var len__5726__auto___6869 = arguments.length;
  var i__5727__auto___6870 = 0;
  while (true) {
    if (i__5727__auto___6870 < len__5726__auto___6869) {
      args6866.push(arguments[i__5727__auto___6870]);
      var G__6871 = i__5727__auto___6870 + 1;
      i__5727__auto___6870 = G__6871;
      continue;
    } else {
    }
    break;
  }
  var G__6868 = args6866.length;
  switch(G__6868) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6866.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$2 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__5324__auto__.call(null, o, f);
    } else {
      var m__5324__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(o, f) : m__5324__auto____$1.call(null, o, f);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$3 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__5324__auto__.call(null, o, f, a);
    } else {
      var m__5324__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__5324__auto____$1.call(null, o, f, a);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$4 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$4 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__5324__auto__.call(null, o, f, a, b);
    } else {
      var m__5324__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__5324__auto____$1.call(null, o, f, a, b);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$5 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$5 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__5324__auto__.call(null, o, f, a, b, xs);
    } else {
      var m__5324__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__5324__auto____$1.call(null, o, f, a, b, xs);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
};
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IVolatile$_vreset_BANG_$arity$2 == null)) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__5323__auto__ = o == null ? null : o;
    var m__5324__auto__ = cljs.core._vreset_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__5324__auto__.call(null, o, new_value);
    } else {
      var m__5324__auto____$1 = cljs.core._vreset_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__5324__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
      }
    }
  }
};
cljs.core.IIterable = function() {
};
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (!(coll == null) && !(coll.cljs$core$IIterable$_iterator$arity$1 == null)) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__5323__auto__ = coll == null ? null : coll;
    var m__5324__auto__ = cljs.core._iterator[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto__.call(null, coll);
    } else {
      var m__5324__auto____$1 = cljs.core._iterator["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5324__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IIterable.-iterator", coll);
      }
    }
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "sb", "sb", -1249746442, null)], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return [cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul(4294967295, 5) === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__6873 = i + 2;
        var G__6874 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__6873;
        h1 = G__6874;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.list;
cljs.core.Symbol;
cljs.core._EQ_;
cljs.core.compare;
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__6877 = i + 1;
          var G__6878 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__6877;
          hash = G__6878;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 4194304 || o.cljs$core$IHash$ ? true : false : false) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4656__auto__ = cljs.core.not(a.ns);
      if (and__4656__auto__) {
        return b.ns;
      } else {
        return and__4656__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__6891 = a.ns;
            var G__6892 = b.ns;
            return goog.array.defaultCompare(G__6891, G__6892);
          }();
          if (0 === nsc) {
            var G__6893 = a.name;
            var G__6894 = b.name;
            return goog.array.defaultCompare(G__6893, G__6894);
          } else {
            return nsc;
          }
        }
      } else {
        var G__6895 = a.name;
        var G__6896 = b.name;
        return goog.array.defaultCompare(G__6895, G__6896);
      }
    }
  }
};
cljs.core.get;
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__6898 = null;
  var G__6898__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
  };
  var G__6898__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
  };
  G__6898 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6898__2.call(this, self__, coll);
      case 3:
        return G__6898__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6898.cljs$core$IFn$_invoke$arity$2 = G__6898__2;
  G__6898.cljs$core$IFn$_invoke$arity$3 = G__6898__3;
  return G__6898;
}();
cljs.core.Symbol.prototype.apply = function(self__, args6897) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6897)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__5103__auto__ = self__._hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "str", "str", -1564826950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, 
  "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol(var_args) {
  var args6899 = [];
  var len__5726__auto___6902 = arguments.length;
  var i__5727__auto___6903 = 0;
  while (true) {
    if (i__5727__auto___6903 < len__5726__auto___6902) {
      args6899.push(arguments[i__5727__auto___6903]);
      var G__6904 = i__5727__auto___6903 + 1;
      i__5727__auto___6903 = G__6904;
      continue;
    } else {
    }
    break;
  }
  var G__6901 = args6899.length;
  switch(G__6901) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6899.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    var idx = name.indexOf("/");
    if (idx === -1) {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    } else {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(name.substring(0, idx), name.substring(idx + 1, name.length));
    }
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2523137;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.isMacro = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).cljs$lang$macro;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Var(self__.val, self__.sym, new_meta);
};
cljs.core.Var.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  if (other instanceof cljs.core.Var) {
    var G__6907 = this$__$1.sym;
    var G__6908 = other.sym;
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 ? cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(G__6907, G__6908) : cljs.core._EQ_.call(null, G__6907, G__6908);
  } else {
    return false;
  }
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.call = function() {
  var G__6953 = null;
  var G__6953__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
  };
  var G__6953__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
  };
  var G__6953__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
  };
  var G__6953__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
  };
  var G__6953__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
  };
  var G__6953__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
  };
  var G__6953__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
  };
  var G__6953__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
  };
  var G__6953__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
  };
  var G__6953__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__6953__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__6953__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__6953__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__6953__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__6953__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__6953__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__6953__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__6953__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__6953__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__6953__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__6953__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__6953__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6909 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    var G__6910 = a;
    var G__6911 = b;
    var G__6912 = c;
    var G__6913 = d;
    var G__6914 = e;
    var G__6915 = f;
    var G__6916 = g;
    var G__6917 = h;
    var G__6918 = i;
    var G__6919 = j;
    var G__6920 = k;
    var G__6921 = l;
    var G__6922 = m;
    var G__6923 = n;
    var G__6924 = o;
    var G__6925 = p;
    var G__6926 = q;
    var G__6927 = r;
    var G__6928 = s;
    var G__6929 = t;
    var G__6930 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6909, G__6910, G__6911, G__6912, G__6913, G__6914, G__6915, G__6916, G__6917, G__6918, G__6919, G__6920, G__6921, G__6922, G__6923, G__6924, G__6925, G__6926, G__6927, G__6928, G__6929, G__6930) : cljs.core.apply.call(null, G__6909, G__6910, G__6911, G__6912, G__6913, G__6914, G__6915, G__6916, G__6917, G__6918, G__6919, G__6920, G__6921, G__6922, G__6923, G__6924, G__6925, G__6926, G__6927, 
    G__6928, G__6929, G__6930);
  };
  G__6953 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__6953__1.call(this, self__);
      case 2:
        return G__6953__2.call(this, self__, a);
      case 3:
        return G__6953__3.call(this, self__, a, b);
      case 4:
        return G__6953__4.call(this, self__, a, b, c);
      case 5:
        return G__6953__5.call(this, self__, a, b, c, d);
      case 6:
        return G__6953__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__6953__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__6953__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__6953__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__6953__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__6953__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__6953__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__6953__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__6953__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__6953__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__6953__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__6953__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__6953__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__6953__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__6953__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__6953__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__6953__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6953.cljs$core$IFn$_invoke$arity$1 = G__6953__1;
  G__6953.cljs$core$IFn$_invoke$arity$2 = G__6953__2;
  G__6953.cljs$core$IFn$_invoke$arity$3 = G__6953__3;
  G__6953.cljs$core$IFn$_invoke$arity$4 = G__6953__4;
  G__6953.cljs$core$IFn$_invoke$arity$5 = G__6953__5;
  G__6953.cljs$core$IFn$_invoke$arity$6 = G__6953__6;
  G__6953.cljs$core$IFn$_invoke$arity$7 = G__6953__7;
  G__6953.cljs$core$IFn$_invoke$arity$8 = G__6953__8;
  G__6953.cljs$core$IFn$_invoke$arity$9 = G__6953__9;
  G__6953.cljs$core$IFn$_invoke$arity$10 = G__6953__10;
  G__6953.cljs$core$IFn$_invoke$arity$11 = G__6953__11;
  G__6953.cljs$core$IFn$_invoke$arity$12 = G__6953__12;
  G__6953.cljs$core$IFn$_invoke$arity$13 = G__6953__13;
  G__6953.cljs$core$IFn$_invoke$arity$14 = G__6953__14;
  G__6953.cljs$core$IFn$_invoke$arity$15 = G__6953__15;
  G__6953.cljs$core$IFn$_invoke$arity$16 = G__6953__16;
  G__6953.cljs$core$IFn$_invoke$arity$17 = G__6953__17;
  G__6953.cljs$core$IFn$_invoke$arity$18 = G__6953__18;
  G__6953.cljs$core$IFn$_invoke$arity$19 = G__6953__19;
  G__6953.cljs$core$IFn$_invoke$arity$20 = G__6953__20;
  G__6953.cljs$core$IFn$_invoke$arity$21 = G__6953__21;
  G__6953.cljs$core$IFn$_invoke$arity$22 = G__6953__22;
  return G__6953;
}();
cljs.core.Var.prototype.apply = function(self__, args6906) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6906)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__6931 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  var G__6932 = a;
  var G__6933 = b;
  var G__6934 = c;
  var G__6935 = d;
  var G__6936 = e;
  var G__6937 = f;
  var G__6938 = g;
  var G__6939 = h;
  var G__6940 = i;
  var G__6941 = j;
  var G__6942 = k;
  var G__6943 = l;
  var G__6944 = m;
  var G__6945 = n;
  var G__6946 = o;
  var G__6947 = p;
  var G__6948 = q;
  var G__6949 = r;
  var G__6950 = s;
  var G__6951 = t;
  var G__6952 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6931, G__6932, G__6933, G__6934, G__6935, G__6936, G__6937, G__6938, G__6939, G__6940, G__6941, G__6942, G__6943, G__6944, G__6945, G__6946, G__6947, G__6948, G__6949, G__6950, G__6951, G__6952) : cljs.core.apply.call(null, G__6931, G__6932, G__6933, G__6934, G__6935, G__6936, G__6937, G__6938, G__6939, G__6940, G__6941, G__6942, G__6943, G__6944, G__6945, G__6946, G__6947, G__6948, G__6949, 
  G__6950, G__6951, G__6952);
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.array_seq;
cljs.core.prim_seq;
cljs.core.IndexedSeq;
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  if (!(x == null)) {
    if (false || x.cljs$core$IIterable$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  if (!(value == null)) {
    if (value.cljs$lang$protocol_mask$partition1$ & 8192 || value.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!value.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 128 || coll.cljs$core$INext$ ? true : false : false) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_(var_args) {
  var args6966 = [];
  var len__5726__auto___6972 = arguments.length;
  var i__5727__auto___6973 = 0;
  while (true) {
    if (i__5727__auto___6973 < len__5726__auto___6972) {
      args6966.push(arguments[i__5727__auto___6973]);
      var G__6974 = i__5727__auto___6973 + 1;
      i__5727__auto___6973 = G__6974;
      continue;
    } else {
    }
    break;
  }
  var G__6971 = args6966.length;
  switch(G__6971) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args6966.slice(2), 0);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__6976 = y;
        var G__6977 = cljs.core.first(more);
        var G__6978 = cljs.core.next(more);
        x = G__6976;
        y = G__6977;
        more = G__6978;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq6967) {
  var G__6968 = cljs.core.first(seq6967);
  var seq6967__$1 = cljs.core.next(seq6967);
  var G__6969 = cljs.core.first(seq6967__$1);
  var seq6967__$2 = cljs.core.next(seq6967__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__6968, G__6969, seq6967__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.es6_iterator_seq;
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(self__.iter) : cljs.core.es6_iterator_seq.call(null, self__.iter);
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_rest", "_rest", -2100466189, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6979 = n + 1;
      var G__6980 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6981 = cljs.core.next(coll__$1);
      n = G__6979;
      hash_code = G__6980;
      coll__$1 = G__6981;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6982 = n + 1;
      var G__6983 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6984 = cljs.core.next(coll__$1);
      n = G__6982;
      hash_code = G__6983;
      coll__$1 = G__6984;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.hash_map;
cljs.core.list;
cljs.core.equiv_sequential;
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof Date) {
    var G__6985 = this$__$1.valueOf();
    var G__6986 = other.valueOf();
    return goog.array.defaultCompare(G__6985, G__6986);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.with_meta;
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.deref;
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce(var_args) {
  var args6987 = [];
  var len__5726__auto___6996 = arguments.length;
  var i__5727__auto___6997 = 0;
  while (true) {
    if (i__5727__auto___6997 < len__5726__auto___6996) {
      args6987.push(arguments[i__5727__auto___6997]);
      var G__6998 = i__5727__auto___6997 + 1;
      i__5727__auto___6997 = G__6998;
      continue;
    } else {
    }
    break;
  }
  var G__6989 = args6987.length;
  switch(G__6989) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6987.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6990 = val;
          var G__6991 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6990, G__6991) : f.call(null, G__6990, G__6991);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__7000 = nval;
          var G__7001 = n + 1;
          val = G__7000;
          n = G__7001;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6992 = val__$1;
        var G__6993 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6992, G__6993) : f.call(null, G__6992, G__6993);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__7002 = nval;
        var G__7003 = n + 1;
        val__$1 = G__7002;
        n = G__7003;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6994 = val__$1;
        var G__6995 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6994, G__6995) : f.call(null, G__6994, G__6995);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__7004 = nval;
        var G__7005 = n + 1;
        val__$1 = G__7004;
        n = G__7005;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce(var_args) {
  var args7006 = [];
  var len__5726__auto___7015 = arguments.length;
  var i__5727__auto___7016 = 0;
  while (true) {
    if (i__5727__auto___7016 < len__5726__auto___7015) {
      args7006.push(arguments[i__5727__auto___7016]);
      var G__7017 = i__5727__auto___7016 + 1;
      i__5727__auto___7016 = G__7017;
      continue;
    } else {
    }
    break;
  }
  var G__7008 = args7006.length;
  switch(G__7008) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7006.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__7009 = val;
          var G__7010 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7009, G__7010) : f.call(null, G__7009, G__7010);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__7019 = nval;
          var G__7020 = n + 1;
          val = G__7019;
          n = G__7020;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__7011 = val__$1;
        var G__7012 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7011, G__7012) : f.call(null, G__7011, G__7012);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__7021 = nval;
        var G__7022 = n + 1;
        val__$1 = G__7021;
        n = G__7022;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__7013 = val__$1;
        var G__7014 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7013, G__7014) : f.call(null, G__7013, G__7014);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__7023 = nval;
        var G__7024 = n + 1;
        val__$1 = G__7023;
        n = G__7024;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.hash_coll;
cljs.core.cons;
cljs.core.RSeq;
cljs.core.List;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 2 || x.cljs$core$ICounted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16 || x.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  var x__4999__auto__ = 0;
  var y__5000__auto__ = self__.arr.length - self__.i;
  return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.i < self__.arr.length) {
    return this$__$1;
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq(var_args) {
  var args7029 = [];
  var len__5726__auto___7032 = arguments.length;
  var i__5727__auto___7033 = 0;
  while (true) {
    if (i__5727__auto___7033 < len__5726__auto___7032) {
      args7029.push(arguments[i__5727__auto___7033]);
      var G__7034 = i__5727__auto___7033 + 1;
      i__5727__auto___7033 = G__7034;
      continue;
    } else {
    }
    break;
  }
  var G__7031 = args7029.length;
  switch(G__7031) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7029.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq(var_args) {
  var args7036 = [];
  var len__5726__auto___7039 = arguments.length;
  var i__5727__auto___7040 = 0;
  while (true) {
    if (i__5727__auto___7040 < len__5726__auto___7039) {
      args7036.push(arguments[i__5727__auto___7040]);
      var G__7041 = i__5727__auto___7040 + 1;
      i__5727__auto___7040 = G__7041;
      continue;
    } else {
    }
    break;
  }
  var G__7038 = args7036.length;
  switch(G__7038) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7036.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.with_meta;
cljs.core.seq_reduce;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__7043 = cljs.core.List.EMPTY;
  var G__7044 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__7043, G__7044) : cljs.core.with_meta.call(null, G__7043, G__7044);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, col__$1) : cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, col__$1) : cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__7045 = sn;
      s = G__7045;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj(var_args) {
  var args7046 = [];
  var len__5726__auto___7052 = arguments.length;
  var i__5727__auto___7053 = 0;
  while (true) {
    if (i__5727__auto___7053 < len__5726__auto___7052) {
      args7046.push(arguments[i__5727__auto___7053]);
      var G__7054 = i__5727__auto___7053 + 1;
      i__5727__auto___7053 = G__7054;
      continue;
    } else {
    }
    break;
  }
  var G__7051 = args7046.length;
  switch(G__7051) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7046.slice(2), 0);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__7056 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__7057 = cljs.core.first(xs);
      var G__7058 = cljs.core.next(xs);
      coll = G__7056;
      x = G__7057;
      xs = G__7058;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq7047) {
  var G__7048 = cljs.core.first(seq7047);
  var seq7047__$1 = cljs.core.next(seq7047);
  var G__7049 = cljs.core.first(seq7047__$1);
  var seq7047__$2 = cljs.core.next(seq7047__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__7048, G__7049, seq7047__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__7059 = cljs.core.next(s);
      var G__7060 = acc + 1;
      s = G__7059;
      acc = G__7060;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 2 || coll.cljs$core$ICounted$ ? true : false : false) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
            return cljs.core.accumulating_seq_count(coll);
          } else {
            return cljs.core._count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth(var_args) {
  var args7065 = [];
  var len__5726__auto___7068 = arguments.length;
  var i__5727__auto___7069 = 0;
  while (true) {
    if (i__5727__auto___7069 < len__5726__auto___7068) {
      args7065.push(arguments[i__5727__auto___7069]);
      var G__7070 = i__5727__auto___7069 + 1;
      i__5727__auto___7069 = G__7070;
      continue;
    } else {
    }
    break;
  }
  var G__7067 = args7065.length;
  switch(G__7067) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7065.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__7072 = cljs.core.next(coll);
            var G__7073 = n - 1;
            coll = G__7072;
            n = G__7073;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__7074 = cljs.core.next(coll);
            var G__7075 = n - 1;
            var G__7076 = not_found;
            coll = G__7074;
            n = G__7075;
            not_found = G__7076;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth(var_args) {
  var args7077 = [];
  var len__5726__auto___7084 = arguments.length;
  var i__5727__auto___7085 = 0;
  while (true) {
    if (i__5727__auto___7085 < len__5726__auto___7084) {
      args7077.push(arguments[i__5727__auto___7085]);
      var G__7086 = i__5727__auto___7085 + 1;
      i__5727__auto___7085 = G__7086;
      continue;
    } else {
    }
    break;
  }
  var G__7079 = args7077.length;
  switch(G__7079) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7077.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return null;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return not_found;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__7088 = n__$1 - 1;
      var G__7089 = cljs.core.rest(xs);
      n__$1 = G__7088;
      xs = G__7089;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get(var_args) {
  var args7090 = [];
  var len__5726__auto___7095 = arguments.length;
  var i__5727__auto___7096 = 0;
  while (true) {
    if (i__5727__auto___7096 < len__5726__auto___7095) {
      args7090.push(arguments[i__5727__auto___7096]);
      var G__7097 = i__5727__auto___7096 + 1;
      i__5727__auto___7096 = G__7097;
      continue;
    } else {
    }
    break;
  }
  var G__7092 = args7090.length;
  switch(G__7092) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7090.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k | 0];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k | 0];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.PersistentHashMap;
cljs.core.assoc = function cljs$core$assoc(var_args) {
  var args7099 = [];
  var len__5726__auto___7106 = arguments.length;
  var i__5727__auto___7107 = 0;
  while (true) {
    if (i__5727__auto___7107 < len__5726__auto___7106) {
      args7099.push(arguments[i__5727__auto___7107]);
      var G__7108 = i__5727__auto___7107 + 1;
      i__5727__auto___7107 = G__7108;
      continue;
    } else {
    }
    break;
  }
  var G__7105 = args7099.length;
  switch(G__7105) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7099.slice(3), 0);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5745__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__7110 = ret;
      var G__7111 = cljs.core.first(kvs);
      var G__7112 = cljs.core.second(kvs);
      var G__7113 = cljs.core.nnext(kvs);
      coll = G__7110;
      k = G__7111;
      v = G__7112;
      kvs = G__7113;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq7100) {
  var G__7101 = cljs.core.first(seq7100);
  var seq7100__$1 = cljs.core.next(seq7100);
  var G__7102 = cljs.core.first(seq7100__$1);
  var seq7100__$2 = cljs.core.next(seq7100__$1);
  var G__7103 = cljs.core.first(seq7100__$2);
  var seq7100__$3 = cljs.core.next(seq7100__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__7101, G__7102, G__7103, seq7100__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc(var_args) {
  var args7114 = [];
  var len__5726__auto___7120 = arguments.length;
  var i__5727__auto___7121 = 0;
  while (true) {
    if (i__5727__auto___7121 < len__5726__auto___7120) {
      args7114.push(arguments[i__5727__auto___7121]);
      var G__7122 = i__5727__auto___7121 + 1;
      i__5727__auto___7121 = G__7122;
      continue;
    } else {
    }
    break;
  }
  var G__7119 = args7114.length;
  switch(G__7119) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7114.slice(2), 0);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__7124 = ret;
        var G__7125 = cljs.core.first(ks);
        var G__7126 = cljs.core.next(ks);
        coll = G__7124;
        k = G__7125;
        ks = G__7126;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq7115) {
  var G__7116 = cljs.core.first(seq7115);
  var seq7115__$1 = cljs.core.next(seq7115);
  var G__7117 = cljs.core.first(seq7115__$1);
  var seq7115__$2 = cljs.core.next(seq7115__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__7116, G__7117, seq7115__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4668__auto__ = goog.isFunction(f);
  if (or__4668__auto__) {
    return or__4668__auto__;
  } else {
    if (!(f == null)) {
      if (false || f.cljs$core$Fn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.call = function() {
  var G__7132 = null;
  var G__7132__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__7132__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
  };
  var G__7132__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
  };
  var G__7132__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
  };
  var G__7132__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
  };
  var G__7132__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
  };
  var G__7132__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__7132__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__7132__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__7132__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__7132__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__7132__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__7132__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__7132__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__7132__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__7132__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__7132__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__7132__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__7132__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__7132__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__7132__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__7132__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__7132 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__7132__1.call(this, self__);
      case 2:
        return G__7132__2.call(this, self__, a);
      case 3:
        return G__7132__3.call(this, self__, a, b);
      case 4:
        return G__7132__4.call(this, self__, a, b, c);
      case 5:
        return G__7132__5.call(this, self__, a, b, c, d);
      case 6:
        return G__7132__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__7132__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__7132__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__7132__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__7132__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__7132__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__7132__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__7132__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__7132__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__7132__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__7132__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__7132__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__7132__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__7132__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__7132__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__7132__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__7132__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7132.cljs$core$IFn$_invoke$arity$1 = G__7132__1;
  G__7132.cljs$core$IFn$_invoke$arity$2 = G__7132__2;
  G__7132.cljs$core$IFn$_invoke$arity$3 = G__7132__3;
  G__7132.cljs$core$IFn$_invoke$arity$4 = G__7132__4;
  G__7132.cljs$core$IFn$_invoke$arity$5 = G__7132__5;
  G__7132.cljs$core$IFn$_invoke$arity$6 = G__7132__6;
  G__7132.cljs$core$IFn$_invoke$arity$7 = G__7132__7;
  G__7132.cljs$core$IFn$_invoke$arity$8 = G__7132__8;
  G__7132.cljs$core$IFn$_invoke$arity$9 = G__7132__9;
  G__7132.cljs$core$IFn$_invoke$arity$10 = G__7132__10;
  G__7132.cljs$core$IFn$_invoke$arity$11 = G__7132__11;
  G__7132.cljs$core$IFn$_invoke$arity$12 = G__7132__12;
  G__7132.cljs$core$IFn$_invoke$arity$13 = G__7132__13;
  G__7132.cljs$core$IFn$_invoke$arity$14 = G__7132__14;
  G__7132.cljs$core$IFn$_invoke$arity$15 = G__7132__15;
  G__7132.cljs$core$IFn$_invoke$arity$16 = G__7132__16;
  G__7132.cljs$core$IFn$_invoke$arity$17 = G__7132__17;
  G__7132.cljs$core$IFn$_invoke$arity$18 = G__7132__18;
  G__7132.cljs$core$IFn$_invoke$arity$19 = G__7132__19;
  G__7132.cljs$core$IFn$_invoke$arity$20 = G__7132__20;
  G__7132.cljs$core$IFn$_invoke$arity$21 = G__7132__21;
  G__7132.cljs$core$IFn$_invoke$arity$22 = G__7132__22;
  return G__7132;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args7131) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args7131)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "afn", "afn", 216963467, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (goog.isFunction(o)) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4656__auto__ = !(o == null);
    if (and__4656__auto__) {
      if (!(o == null)) {
        if (o.cljs$lang$protocol_mask$partition0$ & 131072 || o.cljs$core$IMeta$) {
          return true;
        } else {
          if (!o.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
      }
    } else {
      return and__4656__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj(var_args) {
  var args7137 = [];
  var len__5726__auto___7143 = arguments.length;
  var i__5727__auto___7144 = 0;
  while (true) {
    if (i__5727__auto___7144 < len__5726__auto___7143) {
      args7137.push(arguments[i__5727__auto___7144]);
      var G__7145 = i__5727__auto___7144 + 1;
      i__5727__auto___7144 = G__7145;
      continue;
    } else {
    }
    break;
  }
  var G__7142 = args7137.length;
  switch(G__7142) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7137.slice(2), 0);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__7147 = ret;
        var G__7148 = cljs.core.first(ks);
        var G__7149 = cljs.core.next(ks);
        coll = G__7147;
        k = G__7148;
        ks = G__7149;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq7138) {
  var G__7139 = cljs.core.first(seq7138);
  var seq7138__$1 = cljs.core.next(seq7138);
  var G__7140 = cljs.core.first(seq7138__$1);
  var seq7138__$2 = cljs.core.next(seq7138__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__7139, G__7140, seq7138__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 8 || x.cljs$core$ICollection$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 4096 || x.cljs$core$ISet$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 512 || x.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16777216 || x.cljs$core$ISequential$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 268435456 || x.cljs$core$ISorted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 524288 || x.cljs$core$IReduce$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 1024 || x.cljs$core$IMap$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 67108864 || x.cljs$core$IRecord$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16384 || x.cljs$core$IVector$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
  }
};
cljs.core.ChunkedCons;
cljs.core.ChunkedSeq;
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition1$ & 512 || x.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj(var_args) {
  var args7170 = [];
  var len__5726__auto___7176 = arguments.length;
  var i__5727__auto___7177 = 0;
  while (true) {
    if (i__5727__auto___7177 < len__5726__auto___7176) {
      args7170.push(arguments[i__5727__auto___7177]);
      var G__7178 = i__5727__auto___7177 + 1;
      i__5727__auto___7177 = G__7178;
      continue;
    } else {
    }
    break;
  }
  var G__7173 = args7170.length;
  switch(G__7173) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7170.slice(0), 0);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__5745__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  return {};
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(goog.object.create, keyvals) : cljs.core.apply.call(null, goog.object.create, keyvals);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq7171) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7171));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__7182_7184 = obj;
  var G__7183_7185 = function(G__7182_7184, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__7182_7184, keys);
  goog.object.forEach(G__7182_7184, G__7183_7185);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__7186 = i__$1 + 1;
      var G__7187 = j__$1 + 1;
      var G__7188 = len__$1 - 1;
      i__$1 = G__7186;
      j__$1 = G__7187;
      len__$1 = G__7188;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__7189 = i__$1 - 1;
      var G__7190 = j__$1 - 1;
      var G__7191 = len__$1 - 1;
      i__$1 = G__7189;
      j__$1 = G__7190;
      len__$1 = G__7191;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    if (!(s == null)) {
      if (s.cljs$lang$protocol_mask$partition0$ & 64 || s.cljs$core$ISeq$) {
        return true;
      } else {
        if (!s.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  if (!(s == null)) {
    if (s.cljs$lang$protocol_mask$partition0$ & 8388608 || s.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!s.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (x == null) {
    return false;
  } else {
    if (x === false) {
      return false;
    } else {
      return true;
    }
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4668__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4668__auto__) {
    return or__4668__auto__;
  } else {
    if (!(f == null)) {
      if (f.cljs$lang$protocol_mask$partition0$ & 1 || f.cljs$core$IFn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_(var_args) {
  var args7202 = [];
  var len__5726__auto___7208 = arguments.length;
  var i__5727__auto___7209 = 0;
  while (true) {
    if (i__5727__auto___7209 < len__5726__auto___7208) {
      args7202.push(arguments[i__5727__auto___7209]);
      var G__7210 = i__5727__auto___7209 + 1;
      i__5727__auto___7209 = G__7210;
      continue;
    } else {
    }
    break;
  }
  var G__7207 = args7202.length;
  switch(G__7207) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7202.slice(2), 0);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__7212 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__7213 = etc;
          s = G__7212;
          xs = G__7213;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq7203) {
  var G__7204 = cljs.core.first(seq7203);
  var seq7203__$1 = cljs.core.next(seq7203);
  var G__7205 = cljs.core.first(seq7203__$1);
  var seq7203__$2 = cljs.core.next(seq7203__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__7204, G__7205, seq7203__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (typeof x === "number") {
          if (typeof y === "number") {
            return goog.array.defaultCompare(x, y);
          } else {
            throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
          }
        } else {
          if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 2048 || x.cljs$core$IComparable$ ? true : !x.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x)) {
            return cljs.core._compare(x, y);
          } else {
            if ((typeof x === "string" || cljs.core.array_QMARK_(x) || x === true || x === false) && cljs.core.type(x) === cljs.core.type(y)) {
              return goog.array.defaultCompare(x, y);
            } else {
              throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed(var_args) {
  var args7216 = [];
  var len__5726__auto___7219 = arguments.length;
  var i__5727__auto___7220 = 0;
  while (true) {
    if (i__5727__auto___7220 < len__5726__auto___7219) {
      args7216.push(arguments[i__5727__auto___7220]);
      var G__7221 = i__5727__auto___7220 + 1;
      i__5727__auto___7220 = G__7221;
      continue;
    } else {
    }
    break;
  }
  var G__7218 = args7216.length;
  switch(G__7218) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7216.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__7223 = xs;
      var G__7224 = ys;
      var G__7225 = len;
      var G__7226 = n + 1;
      xs = G__7223;
      ys = G__7224;
      len = G__7225;
      n = G__7226;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(y, x) : f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.to_array;
cljs.core.sort = function cljs$core$sort(var_args) {
  var args7227 = [];
  var len__5726__auto___7232 = arguments.length;
  var i__5727__auto___7233 = 0;
  while (true) {
    if (i__5727__auto___7233 < len__5726__auto___7232) {
      args7227.push(arguments[i__5727__auto___7233]);
      var G__7234 = i__5727__auto___7233 + 1;
      i__5727__auto___7233 = G__7234;
      continue;
    } else {
    }
    break;
  }
  var G__7229 = args7227.length;
  switch(G__7229) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7227.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
    var G__7230_7236 = a;
    var G__7231_7237 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__7230_7236, G__7231_7237);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by(var_args) {
  var args7238 = [];
  var len__5726__auto___7241 = arguments.length;
  var i__5727__auto___7242 = 0;
  while (true) {
    if (i__5727__auto___7242 < len__5726__auto___7241) {
      args7238.push(arguments[i__5727__auto___7242]);
      var G__7243 = i__5727__auto___7242 + 1;
      i__5727__auto___7242 = G__7243;
      continue;
    } else {
    }
    break;
  }
  var G__7240 = args7238.length;
  switch(G__7240) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7238.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(x) : keyfn.call(null, x), keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(y) : keyfn.call(null, y));
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce(var_args) {
  var args7245 = [];
  var len__5726__auto___7253 = arguments.length;
  var i__5727__auto___7254 = 0;
  while (true) {
    if (i__5727__auto___7254 < len__5726__auto___7253) {
      args7245.push(arguments[i__5727__auto___7254]);
      var G__7255 = i__5727__auto___7254 + 1;
      i__5727__auto___7254 = G__7255;
      continue;
    } else {
    }
    break;
  }
  var G__7247 = args7245.length;
  switch(G__7247) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7245.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4423__auto__ = cljs.core.seq(coll);
  if (temp__4423__auto__) {
    var s = temp__4423__auto__;
    var G__7248 = f;
    var G__7249 = cljs.core.first(s);
    var G__7250 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__7248, G__7249, G__7250) : cljs.core.reduce.call(null, G__7248, G__7249, G__7250);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__7251 = val__$1;
        var G__7252 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7251, G__7252) : f.call(null, G__7251, G__7252);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__7257 = nval;
        var G__7258 = cljs.core.next(coll__$1);
        val__$1 = G__7257;
        coll__$1 = G__7258;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.vec;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(a) : cljs.core.vec.call(null, a);
};
cljs.core.reduce = function cljs$core$reduce(var_args) {
  var args7259 = [];
  var len__5726__auto___7264 = arguments.length;
  var i__5727__auto___7265 = 0;
  while (true) {
    if (i__5727__auto___7265 < len__5726__auto___7264) {
      args7259.push(arguments[i__5727__auto___7265]);
      var G__7266 = i__5727__auto___7265 + 1;
      i__5727__auto___7265 = G__7266;
      continue;
    } else {
    }
    break;
  }
  var G__7261 = args7259.length;
  switch(G__7261) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7259.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing(var_args) {
  var args7268 = [];
  var len__5726__auto___7271 = arguments.length;
  var i__5727__auto___7272 = 0;
  while (true) {
    if (i__5727__auto___7272 < len__5726__auto___7271) {
      args7268.push(arguments[i__5727__auto___7272]);
      var G__7273 = i__5727__auto___7272 + 1;
      i__5727__auto___7272 = G__7273;
      continue;
    } else {
    }
    break;
  }
  var G__7270 = args7268.length;
  switch(G__7270) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7268.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__7275 = null;
    var G__7275__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__7275__1 = function(x) {
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(x) : cf.call(null, x);
    };
    var G__7275__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
    };
    G__7275 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__7275__0.call(this);
        case 1:
          return G__7275__1.call(this, x);
        case 2:
          return G__7275__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7275.cljs$core$IFn$_invoke$arity$0 = G__7275__0;
    G__7275.cljs$core$IFn$_invoke$arity$1 = G__7275__1;
    G__7275.cljs$core$IFn$_invoke$arity$2 = G__7275__2;
    return G__7275;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce(var_args) {
  var args7276 = [];
  var len__5726__auto___7279 = arguments.length;
  var i__5727__auto___7280 = 0;
  while (true) {
    if (i__5727__auto___7280 < len__5726__auto___7279) {
      args7276.push(arguments[i__5727__auto___7280]);
      var G__7281 = i__5727__auto___7280 + 1;
      i__5727__auto___7280 = G__7281;
      continue;
    } else {
    }
    break;
  }
  var G__7278 = args7276.length;
  switch(G__7278) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7276.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(f) : xform.call(null, f);
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(ret) : f__$1.call(null, ret);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_(var_args) {
  var args7283 = [];
  var len__5726__auto___7289 = arguments.length;
  var i__5727__auto___7290 = 0;
  while (true) {
    if (i__5727__auto___7290 < len__5726__auto___7289) {
      args7283.push(arguments[i__5727__auto___7290]);
      var G__7291 = i__5727__auto___7290 + 1;
      i__5727__auto___7290 = G__7291;
      continue;
    } else {
    }
    break;
  }
  var G__7288 = args7283.length;
  switch(G__7288) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7283.slice(2), 0);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq7284) {
  var G__7285 = cljs.core.first(seq7284);
  var seq7284__$1 = cljs.core.next(seq7284);
  var G__7286 = cljs.core.first(seq7284__$1);
  var seq7284__$2 = cljs.core.next(seq7284__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__7285, G__7286, seq7284__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_(var_args) {
  var args7293 = [];
  var len__5726__auto___7299 = arguments.length;
  var i__5727__auto___7300 = 0;
  while (true) {
    if (i__5727__auto___7300 < len__5726__auto___7299) {
      args7293.push(arguments[i__5727__auto___7300]);
      var G__7301 = i__5727__auto___7300 + 1;
      i__5727__auto___7300 = G__7301;
      continue;
    } else {
    }
    break;
  }
  var G__7298 = args7293.length;
  switch(G__7298) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7293.slice(2), 0);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq7294) {
  var G__7295 = cljs.core.first(seq7294);
  var seq7294__$1 = cljs.core.next(seq7294);
  var G__7296 = cljs.core.first(seq7294__$1);
  var seq7294__$2 = cljs.core.next(seq7294__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__7295, G__7296, seq7294__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_(var_args) {
  var args7303 = [];
  var len__5726__auto___7309 = arguments.length;
  var i__5727__auto___7310 = 0;
  while (true) {
    if (i__5727__auto___7310 < len__5726__auto___7309) {
      args7303.push(arguments[i__5727__auto___7310]);
      var G__7311 = i__5727__auto___7310 + 1;
      i__5727__auto___7310 = G__7311;
      continue;
    } else {
    }
    break;
  }
  var G__7308 = args7303.length;
  switch(G__7308) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7303.slice(2), 0);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq7304) {
  var G__7305 = cljs.core.first(seq7304);
  var seq7304__$1 = cljs.core.next(seq7304);
  var G__7306 = cljs.core.first(seq7304__$1);
  var seq7304__$2 = cljs.core.next(seq7304__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__7305, G__7306, seq7304__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.divide;
cljs.core._SLASH_ = function cljs$core$_SLASH_(var_args) {
  var args7313 = [];
  var len__5726__auto___7319 = arguments.length;
  var i__5727__auto___7320 = 0;
  while (true) {
    if (i__5727__auto___7320 < len__5726__auto___7319) {
      args7313.push(arguments[i__5727__auto___7320]);
      var G__7321 = i__5727__auto___7320 + 1;
      i__5727__auto___7320 = G__7321;
      continue;
    } else {
    }
    break;
  }
  var G__7318 = args7313.length;
  switch(G__7318) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7313.slice(2), 0);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq7314) {
  var G__7315 = cljs.core.first(seq7314);
  var seq7314__$1 = cljs.core.next(seq7314);
  var G__7316 = cljs.core.first(seq7314__$1);
  var seq7314__$2 = cljs.core.next(seq7314__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__7315, G__7316, seq7314__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_(var_args) {
  var args7323 = [];
  var len__5726__auto___7329 = arguments.length;
  var i__5727__auto___7330 = 0;
  while (true) {
    if (i__5727__auto___7330 < len__5726__auto___7329) {
      args7323.push(arguments[i__5727__auto___7330]);
      var G__7331 = i__5727__auto___7330 + 1;
      i__5727__auto___7330 = G__7331;
      continue;
    } else {
    }
    break;
  }
  var G__7328 = args7323.length;
  switch(G__7328) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7323.slice(2), 0);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__7333 = y;
        var G__7334 = cljs.core.first(more);
        var G__7335 = cljs.core.next(more);
        x = G__7333;
        y = G__7334;
        more = G__7335;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq7324) {
  var G__7325 = cljs.core.first(seq7324);
  var seq7324__$1 = cljs.core.next(seq7324);
  var G__7326 = cljs.core.first(seq7324__$1);
  var seq7324__$2 = cljs.core.next(seq7324__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__7325, G__7326, seq7324__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_(var_args) {
  var args7336 = [];
  var len__5726__auto___7342 = arguments.length;
  var i__5727__auto___7343 = 0;
  while (true) {
    if (i__5727__auto___7343 < len__5726__auto___7342) {
      args7336.push(arguments[i__5727__auto___7343]);
      var G__7344 = i__5727__auto___7343 + 1;
      i__5727__auto___7343 = G__7344;
      continue;
    } else {
    }
    break;
  }
  var G__7341 = args7336.length;
  switch(G__7341) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7336.slice(2), 0);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__7346 = y;
        var G__7347 = cljs.core.first(more);
        var G__7348 = cljs.core.next(more);
        x = G__7346;
        y = G__7347;
        more = G__7348;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq7337) {
  var G__7338 = cljs.core.first(seq7337);
  var seq7337__$1 = cljs.core.next(seq7337);
  var G__7339 = cljs.core.first(seq7337__$1);
  var seq7337__$2 = cljs.core.next(seq7337__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__7338, G__7339, seq7337__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_(var_args) {
  var args7349 = [];
  var len__5726__auto___7355 = arguments.length;
  var i__5727__auto___7356 = 0;
  while (true) {
    if (i__5727__auto___7356 < len__5726__auto___7355) {
      args7349.push(arguments[i__5727__auto___7356]);
      var G__7357 = i__5727__auto___7356 + 1;
      i__5727__auto___7356 = G__7357;
      continue;
    } else {
    }
    break;
  }
  var G__7354 = args7349.length;
  switch(G__7354) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7349.slice(2), 0);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__7359 = y;
        var G__7360 = cljs.core.first(more);
        var G__7361 = cljs.core.next(more);
        x = G__7359;
        y = G__7360;
        more = G__7361;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq7350) {
  var G__7351 = cljs.core.first(seq7350);
  var seq7350__$1 = cljs.core.next(seq7350);
  var G__7352 = cljs.core.first(seq7350__$1);
  var seq7350__$2 = cljs.core.next(seq7350__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__7351, G__7352, seq7350__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_(var_args) {
  var args7362 = [];
  var len__5726__auto___7368 = arguments.length;
  var i__5727__auto___7369 = 0;
  while (true) {
    if (i__5727__auto___7369 < len__5726__auto___7368) {
      args7362.push(arguments[i__5727__auto___7369]);
      var G__7370 = i__5727__auto___7369 + 1;
      i__5727__auto___7369 = G__7370;
      continue;
    } else {
    }
    break;
  }
  var G__7367 = args7362.length;
  switch(G__7367) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7362.slice(2), 0);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__7372 = y;
        var G__7373 = cljs.core.first(more);
        var G__7374 = cljs.core.next(more);
        x = G__7372;
        y = G__7373;
        more = G__7374;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq7363) {
  var G__7364 = cljs.core.first(seq7363);
  var seq7363__$1 = cljs.core.next(seq7363);
  var G__7365 = cljs.core.first(seq7363__$1);
  var seq7363__$2 = cljs.core.next(seq7363__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__7364, G__7365, seq7363__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max(var_args) {
  var args7375 = [];
  var len__5726__auto___7381 = arguments.length;
  var i__5727__auto___7382 = 0;
  while (true) {
    if (i__5727__auto___7382 < len__5726__auto___7381) {
      args7375.push(arguments[i__5727__auto___7382]);
      var G__7383 = i__5727__auto___7382 + 1;
      i__5727__auto___7382 = G__7383;
      continue;
    } else {
    }
    break;
  }
  var G__7380 = args7375.length;
  switch(G__7380) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7375.slice(2), 0);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4999__auto__ = x;
  var y__5000__auto__ = y;
  return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__4999__auto__ = x;
    var y__5000__auto__ = y;
    return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq7376) {
  var G__7377 = cljs.core.first(seq7376);
  var seq7376__$1 = cljs.core.next(seq7376);
  var G__7378 = cljs.core.first(seq7376__$1);
  var seq7376__$2 = cljs.core.next(seq7376__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__7377, G__7378, seq7376__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min(var_args) {
  var args7385 = [];
  var len__5726__auto___7391 = arguments.length;
  var i__5727__auto___7392 = 0;
  while (true) {
    if (i__5727__auto___7392 < len__5726__auto___7391) {
      args7385.push(arguments[i__5727__auto___7392]);
      var G__7393 = i__5727__auto___7392 + 1;
      i__5727__auto___7392 = G__7393;
      continue;
    } else {
    }
    break;
  }
  var G__7390 = args7385.length;
  switch(G__7390) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7385.slice(2), 0);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__5006__auto__ = x;
  var y__5007__auto__ = y;
  return x__5006__auto__ < y__5007__auto__ ? x__5006__auto__ : y__5007__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__5006__auto__ = x;
    var y__5007__auto__ = y;
    return x__5006__auto__ < y__5007__auto__ ? x__5006__auto__ : y__5007__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq7386) {
  var G__7387 = cljs.core.first(seq7386);
  var seq7386__$1 = cljs.core.next(seq7386);
  var G__7388 = cljs.core.first(seq7386__$1);
  var seq7386__$2 = cljs.core.next(seq7386__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__7387, G__7388, seq7386__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add(var_args) {
  var args7395 = [];
  var len__5726__auto___7401 = arguments.length;
  var i__5727__auto___7402 = 0;
  while (true) {
    if (i__5727__auto___7402 < len__5726__auto___7401) {
      args7395.push(arguments[i__5727__auto___7402]);
      var G__7403 = i__5727__auto___7402 + 1;
      i__5727__auto___7402 = G__7403;
      continue;
    } else {
    }
    break;
  }
  var G__7400 = args7395.length;
  switch(G__7400) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7395.slice(2), 0);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq7396) {
  var G__7397 = cljs.core.first(seq7396);
  var seq7396__$1 = cljs.core.next(seq7396);
  var G__7398 = cljs.core.first(seq7396__$1);
  var seq7396__$2 = cljs.core.next(seq7396__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__7397, G__7398, seq7396__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int(var_args) {
  var args7405 = [];
  var len__5726__auto___7411 = arguments.length;
  var i__5727__auto___7412 = 0;
  while (true) {
    if (i__5727__auto___7412 < len__5726__auto___7411) {
      args7405.push(arguments[i__5727__auto___7412]);
      var G__7413 = i__5727__auto___7412 + 1;
      i__5727__auto___7412 = G__7413;
      continue;
    } else {
    }
    break;
  }
  var G__7410 = args7405.length;
  switch(G__7410) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7405.slice(2), 0);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq7406) {
  var G__7407 = cljs.core.first(seq7406);
  var seq7406__$1 = cljs.core.next(seq7406);
  var G__7408 = cljs.core.first(seq7406__$1);
  var seq7406__$2 = cljs.core.next(seq7406__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__7407, G__7408, seq7406__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int(var_args) {
  var args7415 = [];
  var len__5726__auto___7421 = arguments.length;
  var i__5727__auto___7422 = 0;
  while (true) {
    if (i__5727__auto___7422 < len__5726__auto___7421) {
      args7415.push(arguments[i__5727__auto___7422]);
      var G__7423 = i__5727__auto___7422 + 1;
      i__5727__auto___7422 = G__7423;
      continue;
    } else {
    }
    break;
  }
  var G__7420 = args7415.length;
  switch(G__7420) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7415.slice(2), 0);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq7416) {
  var G__7417 = cljs.core.first(seq7416);
  var seq7416__$1 = cljs.core.next(seq7416);
  var G__7418 = cljs.core.first(seq7416__$1);
  var seq7416__$2 = cljs.core.next(seq7416__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__7417, G__7418, seq7416__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply(var_args) {
  var args7425 = [];
  var len__5726__auto___7431 = arguments.length;
  var i__5727__auto___7432 = 0;
  while (true) {
    if (i__5727__auto___7432 < len__5726__auto___7431) {
      args7425.push(arguments[i__5727__auto___7432]);
      var G__7433 = i__5727__auto___7432 + 1;
      i__5727__auto___7432 = G__7433;
      continue;
    } else {
    }
    break;
  }
  var G__7430 = args7425.length;
  switch(G__7430) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7425.slice(2), 0);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq7426) {
  var G__7427 = cljs.core.first(seq7426);
  var seq7426__$1 = cljs.core.next(seq7426);
  var G__7428 = cljs.core.first(seq7426__$1);
  var seq7426__$2 = cljs.core.next(seq7426__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__7427, G__7428, seq7426__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int(var_args) {
  var args7435 = [];
  var len__5726__auto___7441 = arguments.length;
  var i__5727__auto___7442 = 0;
  while (true) {
    if (i__5727__auto___7442 < len__5726__auto___7441) {
      args7435.push(arguments[i__5727__auto___7442]);
      var G__7443 = i__5727__auto___7442 + 1;
      i__5727__auto___7442 = G__7443;
      continue;
    } else {
    }
    break;
  }
  var G__7440 = args7435.length;
  switch(G__7440) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7435.slice(2), 0);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq7436) {
  var G__7437 = cljs.core.first(seq7436);
  var seq7436__$1 = cljs.core.next(seq7436);
  var G__7438 = cljs.core.first(seq7436__$1);
  var seq7436__$2 = cljs.core.next(seq7436__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__7437, G__7438, seq7436__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.mod;
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(x, n) : cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract(var_args) {
  var args7445 = [];
  var len__5726__auto___7451 = arguments.length;
  var i__5727__auto___7452 = 0;
  while (true) {
    if (i__5727__auto___7452 < len__5726__auto___7451) {
      args7445.push(arguments[i__5727__auto___7452]);
      var G__7453 = i__5727__auto___7452 + 1;
      i__5727__auto___7452 = G__7453;
      continue;
    } else {
    }
    break;
  }
  var G__7450 = args7445.length;
  switch(G__7450) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7445.slice(2), 0);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq7446) {
  var G__7447 = cljs.core.first(seq7446);
  var seq7446__$1 = cljs.core.next(seq7446);
  var G__7448 = cljs.core.first(seq7446__$1);
  var seq7446__$2 = cljs.core.next(seq7446__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__7447, G__7448, seq7446__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int(var_args) {
  var args7455 = [];
  var len__5726__auto___7461 = arguments.length;
  var i__5727__auto___7462 = 0;
  while (true) {
    if (i__5727__auto___7462 < len__5726__auto___7461) {
      args7455.push(arguments[i__5727__auto___7462]);
      var G__7463 = i__5727__auto___7462 + 1;
      i__5727__auto___7462 = G__7463;
      continue;
    } else {
    }
    break;
  }
  var G__7460 = args7455.length;
  switch(G__7460) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7455.slice(2), 0);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq7456) {
  var G__7457 = cljs.core.first(seq7456);
  var seq7456__$1 = cljs.core.next(seq7456);
  var G__7458 = cljs.core.first(seq7456__$1);
  var seq7456__$2 = cljs.core.next(seq7456__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__7457, G__7458, seq7456__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    return Math.floor(q);
  } else {
    return Math.ceil(q);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor(var_args) {
  var args7465 = [];
  var len__5726__auto___7471 = arguments.length;
  var i__5727__auto___7472 = 0;
  while (true) {
    if (i__5727__auto___7472 < len__5726__auto___7471) {
      args7465.push(arguments[i__5727__auto___7472]);
      var G__7473 = i__5727__auto___7472 + 1;
      i__5727__auto___7472 = G__7473;
      continue;
    } else {
    }
    break;
  }
  var G__7470 = args7465.length;
  switch(G__7470) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7465.slice(2), 0);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq7466) {
  var G__7467 = cljs.core.first(seq7466);
  var seq7466__$1 = cljs.core.next(seq7466);
  var G__7468 = cljs.core.first(seq7466__$1);
  var seq7466__$2 = cljs.core.next(seq7466__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__7467, G__7468, seq7466__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and(var_args) {
  var args7475 = [];
  var len__5726__auto___7481 = arguments.length;
  var i__5727__auto___7482 = 0;
  while (true) {
    if (i__5727__auto___7482 < len__5726__auto___7481) {
      args7475.push(arguments[i__5727__auto___7482]);
      var G__7483 = i__5727__auto___7482 + 1;
      i__5727__auto___7482 = G__7483;
      continue;
    } else {
    }
    break;
  }
  var G__7480 = args7475.length;
  switch(G__7480) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7475.slice(2), 0);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq7476) {
  var G__7477 = cljs.core.first(seq7476);
  var seq7476__$1 = cljs.core.next(seq7476);
  var G__7478 = cljs.core.first(seq7476__$1);
  var seq7476__$2 = cljs.core.next(seq7476__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__7477, G__7478, seq7476__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or(var_args) {
  var args7485 = [];
  var len__5726__auto___7491 = arguments.length;
  var i__5727__auto___7492 = 0;
  while (true) {
    if (i__5727__auto___7492 < len__5726__auto___7491) {
      args7485.push(arguments[i__5727__auto___7492]);
      var G__7493 = i__5727__auto___7492 + 1;
      i__5727__auto___7492 = G__7493;
      continue;
    } else {
    }
    break;
  }
  var G__7490 = args7485.length;
  switch(G__7490) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7485.slice(2), 0);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq7486) {
  var G__7487 = cljs.core.first(seq7486);
  var seq7486__$1 = cljs.core.next(seq7486);
  var G__7488 = cljs.core.first(seq7486__$1);
  var seq7486__$2 = cljs.core.next(seq7486__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__7487, G__7488, seq7486__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not(var_args) {
  var args7495 = [];
  var len__5726__auto___7501 = arguments.length;
  var i__5727__auto___7502 = 0;
  while (true) {
    if (i__5727__auto___7502 < len__5726__auto___7501) {
      args7495.push(arguments[i__5727__auto___7502]);
      var G__7503 = i__5727__auto___7502 + 1;
      i__5727__auto___7502 = G__7503;
      continue;
    } else {
    }
    break;
  }
  var G__7500 = args7495.length;
  switch(G__7500) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7495.slice(2), 0);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq7496) {
  var G__7497 = cljs.core.first(seq7496);
  var seq7496__$1 = cljs.core.next(seq7496);
  var G__7498 = cljs.core.first(seq7496__$1);
  var seq7496__$2 = cljs.core.next(seq7496__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__7497, G__7498, seq7496__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_(var_args) {
  var args7505 = [];
  var len__5726__auto___7511 = arguments.length;
  var i__5727__auto___7512 = 0;
  while (true) {
    if (i__5727__auto___7512 < len__5726__auto___7511) {
      args7505.push(arguments[i__5727__auto___7512]);
      var G__7513 = i__5727__auto___7512 + 1;
      i__5727__auto___7512 = G__7513;
      continue;
    } else {
    }
    break;
  }
  var G__7510 = args7505.length;
  switch(G__7510) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7505.slice(2), 0);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__7515 = y;
        var G__7516 = cljs.core.first(more);
        var G__7517 = cljs.core.next(more);
        x = G__7515;
        y = G__7516;
        more = G__7517;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq7506) {
  var G__7507 = cljs.core.first(seq7506);
  var seq7506__$1 = cljs.core.next(seq7506);
  var G__7508 = cljs.core.first(seq7506__$1);
  var seq7506__$2 = cljs.core.next(seq7506__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__7507, G__7508, seq7506__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__7518 = n__$1 - 1;
      var G__7519 = cljs.core.next(xs);
      n__$1 = G__7518;
      xs = G__7519;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str(var_args) {
  var args7520 = [];
  var len__5726__auto___7525 = arguments.length;
  var i__5727__auto___7526 = 0;
  while (true) {
    if (i__5727__auto___7526 < len__5726__auto___7525) {
      args7520.push(arguments[i__5727__auto___7526]);
      var G__7527 = i__5727__auto___7526 + 1;
      i__5727__auto___7526 = G__7527;
      continue;
    } else {
    }
    break;
  }
  var G__7524 = args7520.length;
  switch(G__7524) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7520.slice(1), 0);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5745__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    return [x].join("");
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__7529 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__7530 = cljs.core.next(more);
      sb = G__7529;
      more = G__7530;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq7521) {
  var G__7522 = cljs.core.first(seq7521);
  var seq7521__$1 = cljs.core.next(seq7521);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__7522, seq7521__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs(var_args) {
  var args7531 = [];
  var len__5726__auto___7534 = arguments.length;
  var i__5727__auto___7535 = 0;
  while (true) {
    if (i__5727__auto___7535 < len__5726__auto___7534) {
      args7531.push(arguments[i__5727__auto___7535]);
      var G__7536 = i__5727__auto___7535 + 1;
      i__5727__auto___7535 = G__7536;
      continue;
    } else {
    }
    break;
  }
  var G__7533 = args7531.length;
  switch(G__7533) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7531.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.map;
cljs.core.name;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__7538 = cljs.core.next(xs);
            var G__7539 = cljs.core.next(ys);
            xs = G__7538;
            ys = G__7539;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__7540 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__7541 = cljs.core.next(s);
        res = G__7540;
        s = G__7541;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.key;
cljs.core.val;
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__7542 = (h + (cljs.core.hash(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e)) ^ cljs.core.hash(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__7543 = cljs.core.next(s);
      h = G__7542;
      s = G__7543;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__7544 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__7545 = cljs.core.next(s__$1);
      h = G__7544;
      s__$1 = G__7545;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.name;
cljs.core.chunk_first;
cljs.core.chunk_rest;
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__7552_7558 = cljs.core.seq(fn_map);
  var chunk__7553_7559 = null;
  var count__7554_7560 = 0;
  var i__7555_7561 = 0;
  while (true) {
    if (i__7555_7561 < count__7554_7560) {
      var vec__7556_7562 = chunk__7553_7559.cljs$core$IIndexed$_nth$arity$2(null, i__7555_7561);
      var key_name_7563 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7556_7562, 0, null);
      var f_7564 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7556_7562, 1, null);
      var str_name_7565 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_7563) : cljs.core.name.call(null, key_name_7563);
      obj[str_name_7565] = f_7564;
      var G__7566 = seq__7552_7558;
      var G__7567 = chunk__7553_7559;
      var G__7568 = count__7554_7560;
      var G__7569 = i__7555_7561 + 1;
      seq__7552_7558 = G__7566;
      chunk__7553_7559 = G__7567;
      count__7554_7560 = G__7568;
      i__7555_7561 = G__7569;
      continue;
    } else {
      var temp__4425__auto___7570 = cljs.core.seq(seq__7552_7558);
      if (temp__4425__auto___7570) {
        var seq__7552_7571__$1 = temp__4425__auto___7570;
        if (cljs.core.chunked_seq_QMARK_(seq__7552_7571__$1)) {
          var c__5471__auto___7572 = cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(seq__7552_7571__$1) : cljs.core.chunk_first.call(null, seq__7552_7571__$1);
          var G__7573 = cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(seq__7552_7571__$1) : cljs.core.chunk_rest.call(null, seq__7552_7571__$1);
          var G__7574 = c__5471__auto___7572;
          var G__7575 = cljs.core.count(c__5471__auto___7572);
          var G__7576 = 0;
          seq__7552_7558 = G__7573;
          chunk__7553_7559 = G__7574;
          count__7554_7560 = G__7575;
          i__7555_7561 = G__7576;
          continue;
        } else {
          var vec__7557_7577 = cljs.core.first(seq__7552_7571__$1);
          var key_name_7578 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7557_7577, 0, null);
          var f_7579 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7557_7577, 1, null);
          var str_name_7580 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_7578) : cljs.core.name.call(null, key_name_7578);
          obj[str_name_7580] = f_7579;
          var G__7581 = cljs.core.next(seq__7552_7571__$1);
          var G__7582 = null;
          var G__7583 = 0;
          var G__7584 = 0;
          seq__7552_7558 = G__7581;
          chunk__7553_7559 = G__7582;
          count__7554_7560 = G__7583;
          i__7555_7561 = G__7584;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 33554432 || x.cljs$core$IList$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
  }
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.list_QMARK_(other) || cljs.core.sequential_QMARK_(other)) {
    return cljs.core.seq(other) == null;
  } else {
    return false;
  }
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  if (!(coll == null)) {
    if (coll.cljs$lang$protocol_mask$partition0$ & 134217728 || coll.cljs$core$IReversible$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___7590 = arguments.length;
  var i__5727__auto___7591 = 0;
  while (true) {
    if (i__5727__auto___7591 < len__5726__auto___7590) {
      args__5733__auto__.push(arguments[i__5727__auto___7591]);
      var G__7592 = i__5727__auto___7591 + 1;
      i__5727__auto___7591 = G__7592;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__7593 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__7593;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__7594 = i - 1;
      var G__7595 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__7594;
      r = G__7595;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq7589) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7589));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4668__auto__ = coll == null;
    if (or__4668__auto__) {
      return or__4668__auto__;
    } else {
      if (!(coll == null)) {
        if (coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4656__auto__ = cljs.core.not(a.ns);
      if (and__4656__auto__) {
        return b.ns;
      } else {
        return and__4656__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__7606 = a.ns;
            var G__7607 = b.ns;
            return goog.array.defaultCompare(G__7606, G__7607);
          }();
          if (0 === nsc) {
            var G__7608 = a.name;
            var G__7609 = b.name;
            return goog.array.defaultCompare(G__7608, G__7609);
          } else {
            return nsc;
          }
        }
      } else {
        var G__7610 = a.name;
        var G__7611 = b.name;
        return goog.array.defaultCompare(G__7610, G__7611);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__7613 = null;
  var G__7613__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__7613__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__7613 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7613__2.call(this, self__, coll);
      case 3:
        return G__7613__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7613.cljs$core$IFn$_invoke$arity$2 = G__7613__2;
  G__7613.cljs$core$IFn$_invoke$arity$3 = G__7613__3;
  return G__7613;
}();
cljs.core.Keyword.prototype.apply = function(self__, args7612) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args7612)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__5103__auto__ = self__._hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.symbol_identical_QMARK_ = function cljs$core$symbol_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Symbol && y instanceof cljs.core.Symbol) {
      return x.str === y.str;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword(var_args) {
  var args7616 = [];
  var len__5726__auto___7619 = arguments.length;
  var i__5727__auto___7620 = 0;
  while (true) {
    if (i__5727__auto___7620 < len__5726__auto___7619) {
      args7616.push(arguments[i__5727__auto___7620]);
      var G__7621 = i__5727__auto___7620 + 1;
      i__5727__auto___7620 = G__7621;
      continue;
    } else {
    }
    break;
  }
  var G__7618 = args7616.length;
  switch(G__7618) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7616.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__7623 = ls.sval();
        ls = G__7623;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.ArrayChunk;
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk(var_args) {
  var args7624 = [];
  var len__5726__auto___7627 = arguments.length;
  var i__5727__auto___7628 = 0;
  while (true) {
    if (i__5727__auto___7628 < len__5726__auto___7627) {
      args7624.push(arguments[i__5727__auto___7628]);
      var G__7629 = i__5727__auto___7628 + 1;
      i__5727__auto___7628 = G__7629;
      continue;
    } else {
    }
    break;
  }
  var G__7626 = args7624.length;
  switch(G__7626) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7624.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.Symbol(null, "more", "more", -418290273, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (!(s == null) ? s.cljs$lang$protocol_mask$partition1$ & 1024 || s.cljs$core$IChunkedNext$ ? true : false : false) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__7633 = cljs.core.next(s__$1);
      s__$1 = G__7633;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_7634 = 0;
  var xs_7635 = cljs.core.seq(coll);
  while (true) {
    if (xs_7635) {
      ret[i_7634] = cljs.core.to_array(cljs.core.first(xs_7635));
      var G__7636 = i_7634 + 1;
      var G__7637 = cljs.core.next(xs_7635);
      i_7634 = G__7636;
      xs_7635 = G__7637;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array(var_args) {
  var args7638 = [];
  var len__5726__auto___7641 = arguments.length;
  var i__5727__auto___7642 = 0;
  while (true) {
    if (i__5727__auto___7642 < len__5726__auto___7641) {
      args7638.push(arguments[i__5727__auto___7642]);
      var G__7643 = i__5727__auto___7642 + 1;
      i__5727__auto___7642 = G__7643;
      continue;
    } else {
    }
    break;
  }
  var G__7640 = args7638.length;
  switch(G__7640) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7638.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7645 = i + 1;
        var G__7646 = cljs.core.next(s__$1);
        i = G__7645;
        s__$1 = G__7646;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5571__auto___7647 = size;
    var i_7648 = 0;
    while (true) {
      if (i_7648 < n__5571__auto___7647) {
        a[i_7648] = init_val_or_seq;
        var G__7649 = i_7648 + 1;
        i_7648 = G__7649;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array(var_args) {
  var args7650 = [];
  var len__5726__auto___7653 = arguments.length;
  var i__5727__auto___7654 = 0;
  while (true) {
    if (i__5727__auto___7654 < len__5726__auto___7653) {
      args7650.push(arguments[i__5727__auto___7654]);
      var G__7655 = i__5727__auto___7654 + 1;
      i__5727__auto___7654 = G__7655;
      continue;
    } else {
    }
    break;
  }
  var G__7652 = args7650.length;
  switch(G__7652) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7650.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7657 = i + 1;
        var G__7658 = cljs.core.next(s__$1);
        i = G__7657;
        s__$1 = G__7658;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5571__auto___7659 = size;
    var i_7660 = 0;
    while (true) {
      if (i_7660 < n__5571__auto___7659) {
        a[i_7660] = init_val_or_seq;
        var G__7661 = i_7660 + 1;
        i_7660 = G__7661;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array(var_args) {
  var args7662 = [];
  var len__5726__auto___7665 = arguments.length;
  var i__5727__auto___7666 = 0;
  while (true) {
    if (i__5727__auto___7666 < len__5726__auto___7665) {
      args7662.push(arguments[i__5727__auto___7666]);
      var G__7667 = i__5727__auto___7666 + 1;
      i__5727__auto___7666 = G__7667;
      continue;
    } else {
    }
    break;
  }
  var G__7664 = args7662.length;
  switch(G__7664) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7662.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7669 = i + 1;
        var G__7670 = cljs.core.next(s__$1);
        i = G__7669;
        s__$1 = G__7670;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5571__auto___7671 = size;
    var i_7672 = 0;
    while (true) {
      if (i_7672 < n__5571__auto___7671) {
        a[i_7672] = init_val_or_seq;
        var G__7673 = i_7672 + 1;
        i_7672 = G__7673;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array(var_args) {
  var args7674 = [];
  var len__5726__auto___7677 = arguments.length;
  var i__5727__auto___7678 = 0;
  while (true) {
    if (i__5727__auto___7678 < len__5726__auto___7677) {
      args7674.push(arguments[i__5727__auto___7678]);
      var G__7679 = i__5727__auto___7678 + 1;
      i__5727__auto___7678 = G__7679;
      continue;
    } else {
    }
    break;
  }
  var G__7676 = args7674.length;
  switch(G__7676) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7674.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7681 = i + 1;
        var G__7682 = cljs.core.next(s__$1);
        i = G__7681;
        s__$1 = G__7682;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5571__auto___7683 = size;
    var i_7684 = 0;
    while (true) {
      if (i_7684 < n__5571__auto___7683) {
        a[i_7684] = init_val_or_seq;
        var G__7685 = i_7684 + 1;
        i_7684 = G__7685;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__7686 = cljs.core.next(s__$1);
        var G__7687 = i - 1;
        var G__7688 = sum + 1;
        s__$1 = G__7686;
        i = G__7687;
        sum = G__7688;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat(var_args) {
  var args7690 = [];
  var len__5726__auto___7702 = arguments.length;
  var i__5727__auto___7703 = 0;
  while (true) {
    if (i__5727__auto___7703 < len__5726__auto___7702) {
      args7690.push(arguments[i__5727__auto___7703]);
      var G__7704 = i__5727__auto___7703 + 1;
      i__5727__auto___7703 = G__7704;
      continue;
    } else {
    }
    break;
  }
  var G__7695 = args7690.length;
  switch(G__7695) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7690.slice(2), 0);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq7691) {
  var G__7692 = cljs.core.first(seq7691);
  var seq7691__$1 = cljs.core.next(seq7691);
  var G__7693 = cljs.core.first(seq7691__$1);
  var seq7691__$2 = cljs.core.next(seq7691__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__7692, G__7693, seq7691__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_(var_args) {
  var args7706 = [];
  var len__5726__auto___7714 = arguments.length;
  var i__5727__auto___7715 = 0;
  while (true) {
    if (i__5727__auto___7715 < len__5726__auto___7714) {
      args7706.push(arguments[i__5727__auto___7715]);
      var G__7716 = i__5727__auto___7715 + 1;
      i__5727__auto___7715 = G__7716;
      continue;
    } else {
    }
    break;
  }
  var G__7713 = args7706.length;
  switch(G__7713) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7706.slice(4), 0);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5745__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq7707) {
  var G__7708 = cljs.core.first(seq7707);
  var seq7707__$1 = cljs.core.next(seq7707);
  var G__7709 = cljs.core.first(seq7707__$1);
  var seq7707__$2 = cljs.core.next(seq7707__$1);
  var G__7710 = cljs.core.first(seq7707__$2);
  var seq7707__$3 = cljs.core.next(seq7707__$2);
  var G__7711 = cljs.core.first(seq7707__$3);
  var seq7707__$4 = cljs.core.next(seq7707__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__7708, G__7709, G__7710, G__7711, seq7707__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_(var_args) {
  var args7718 = [];
  var len__5726__auto___7724 = arguments.length;
  var i__5727__auto___7725 = 0;
  while (true) {
    if (i__5727__auto___7725 < len__5726__auto___7724) {
      args7718.push(arguments[i__5727__auto___7725]);
      var G__7726 = i__5727__auto___7725 + 1;
      i__5727__auto___7725 = G__7726;
      continue;
    } else {
    }
    break;
  }
  var G__7723 = args7718.length;
  switch(G__7723) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7718.slice(2), 0);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__7728 = ntcoll;
      var G__7729 = cljs.core.first(vals);
      var G__7730 = cljs.core.next(vals);
      tcoll = G__7728;
      val = G__7729;
      vals = G__7730;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq7719) {
  var G__7720 = cljs.core.first(seq7719);
  var seq7719__$1 = cljs.core.next(seq7719);
  var G__7721 = cljs.core.first(seq7719__$1);
  var seq7719__$2 = cljs.core.next(seq7719__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7720, G__7721, seq7719__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_(var_args) {
  var args7731 = [];
  var len__5726__auto___7738 = arguments.length;
  var i__5727__auto___7739 = 0;
  while (true) {
    if (i__5727__auto___7739 < len__5726__auto___7738) {
      args7731.push(arguments[i__5727__auto___7739]);
      var G__7740 = i__5727__auto___7739 + 1;
      i__5727__auto___7739 = G__7740;
      continue;
    } else {
    }
    break;
  }
  var G__7737 = args7731.length;
  switch(G__7737) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7731.slice(3), 0);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5745__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__7742 = ntcoll;
      var G__7743 = cljs.core.first(kvs);
      var G__7744 = cljs.core.second(kvs);
      var G__7745 = cljs.core.nnext(kvs);
      tcoll = G__7742;
      key = G__7743;
      val = G__7744;
      kvs = G__7745;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq7732) {
  var G__7733 = cljs.core.first(seq7732);
  var seq7732__$1 = cljs.core.next(seq7732);
  var G__7734 = cljs.core.first(seq7732__$1);
  var seq7732__$2 = cljs.core.next(seq7732__$1);
  var G__7735 = cljs.core.first(seq7732__$2);
  var seq7732__$3 = cljs.core.next(seq7732__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7733, G__7734, G__7735, seq7732__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_(var_args) {
  var args7746 = [];
  var len__5726__auto___7752 = arguments.length;
  var i__5727__auto___7753 = 0;
  while (true) {
    if (i__5727__auto___7753 < len__5726__auto___7752) {
      args7746.push(arguments[i__5727__auto___7753]);
      var G__7754 = i__5727__auto___7753 + 1;
      i__5727__auto___7753 = G__7754;
      continue;
    } else {
    }
    break;
  }
  var G__7751 = args7746.length;
  switch(G__7751) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7746.slice(2), 0);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__7756 = ntcoll;
      var G__7757 = cljs.core.first(ks);
      var G__7758 = cljs.core.next(ks);
      tcoll = G__7756;
      key = G__7757;
      ks = G__7758;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq7747) {
  var G__7748 = cljs.core.first(seq7747);
  var seq7747__$1 = cljs.core.next(seq7747);
  var G__7749 = cljs.core.first(seq7747__$1);
  var seq7747__$2 = cljs.core.next(seq7747__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7748, G__7749, seq7747__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_(var_args) {
  var args7759 = [];
  var len__5726__auto___7765 = arguments.length;
  var i__5727__auto___7766 = 0;
  while (true) {
    if (i__5727__auto___7766 < len__5726__auto___7765) {
      args7759.push(arguments[i__5727__auto___7766]);
      var G__7767 = i__5727__auto___7766 + 1;
      i__5727__auto___7766 = G__7767;
      continue;
    } else {
    }
    break;
  }
  var G__7764 = args7759.length;
  switch(G__7764) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7759.slice(2), 0);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__7769 = ntcoll;
      var G__7770 = cljs.core.first(vals);
      var G__7771 = cljs.core.next(vals);
      tcoll = G__7769;
      val = G__7770;
      vals = G__7771;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq7760) {
  var G__7761 = cljs.core.first(seq7760);
  var seq7760__$1 = cljs.core.next(seq7760);
  var G__7762 = cljs.core.first(seq7760__$1);
  var seq7760__$2 = cljs.core.next(seq7760__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7761, G__7762, seq7760__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5615 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5615);
      } else {
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a5615) : f.call(null, a5615);
      }
    } else {
      var b5616 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5615, b5616);
        } else {
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a5615, b5616) : f.call(null, a5615, b5616);
        }
      } else {
        var c5617 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5615, b5616, c5617);
          } else {
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a5615, b5616, c5617) : f.call(null, a5615, b5616, c5617);
          }
        } else {
          var d5618 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5615, b5616, c5617, d5618);
            } else {
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(a5615, b5616, c5617, d5618) : f.call(null, a5615, b5616, c5617, d5618);
            }
          } else {
            var e5619 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5615, b5616, c5617, d5618, e5619);
              } else {
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(a5615, b5616, c5617, d5618, e5619) : f.call(null, a5615, b5616, c5617, d5618, e5619);
              }
            } else {
              var f5620 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5615, b5616, c5617, d5618, e5619, f5620);
                } else {
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(a5615, b5616, c5617, d5618, e5619, f5620) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620);
                }
              } else {
                var g5621 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5615, b5616, c5617, d5618, e5619, f5620, g5621);
                  } else {
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(a5615, b5616, c5617, d5618, e5619, f5620, g5621) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621);
                  }
                } else {
                  var h5622 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622);
                    } else {
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622);
                    }
                  } else {
                    var i5623 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623);
                      } else {
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623);
                      }
                    } else {
                      var j5624 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624);
                        } else {
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624);
                        }
                      } else {
                        var k5625 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625);
                          } else {
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625);
                          }
                        } else {
                          var l5626 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626);
                            } else {
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626);
                            }
                          } else {
                            var m5627 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627);
                              } else {
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627);
                              }
                            } else {
                              var n5628 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628);
                                } else {
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628);
                                }
                              } else {
                                var o5629 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629);
                                  } else {
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629);
                                  }
                                } else {
                                  var p5630 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630);
                                    } else {
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630);
                                    }
                                  } else {
                                    var q5631 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630, q5631);
                                      } else {
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630, q5631) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630, q5631);
                                      }
                                    } else {
                                      var r5632 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630, q5631, r5632);
                                        } else {
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630, q5631, r5632) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630, q5631, r5632);
                                        }
                                      } else {
                                        var s5633 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630, q5631, r5632, s5633);
                                          } else {
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630, q5631, r5632, s5633) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630, q5631, r5632, s5633);
                                          }
                                        } else {
                                          var t5634 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630, q5631, r5632, s5633, t5634);
                                            } else {
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630, q5631, r5632, s5633, t5634) : f.call(null, a5615, b5616, c5617, d5618, e5619, f5620, g5621, h5622, i5623, j5624, k5625, l5626, m5627, n5628, o5629, p5630, q5631, r5632, s5633, t5634);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply(var_args) {
  var args7772 = [];
  var len__5726__auto___7781 = arguments.length;
  var i__5727__auto___7782 = 0;
  while (true) {
    if (i__5727__auto___7782 < len__5726__auto___7781) {
      args7772.push(arguments[i__5727__auto___7782]);
      var G__7783 = i__5727__auto___7782 + 1;
      i__5727__auto___7782 = G__7783;
      continue;
    } else {
    }
    break;
  }
  var G__7780 = args7772.length;
  switch(G__7780) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7772.slice(5), 0);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5745__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq7773) {
  var G__7774 = cljs.core.first(seq7773);
  var seq7773__$1 = cljs.core.next(seq7773);
  var G__7775 = cljs.core.first(seq7773__$1);
  var seq7773__$2 = cljs.core.next(seq7773__$1);
  var G__7776 = cljs.core.first(seq7773__$2);
  var seq7773__$3 = cljs.core.next(seq7773__$2);
  var G__7777 = cljs.core.first(seq7773__$3);
  var seq7773__$4 = cljs.core.next(seq7773__$3);
  var G__7778 = cljs.core.first(seq7773__$4);
  var seq7773__$5 = cljs.core.next(seq7773__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__7774, G__7775, G__7776, G__7777, G__7778, seq7773__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta(var_args) {
  var args7785 = [];
  var len__5726__auto___7810 = arguments.length;
  var i__5727__auto___7811 = 0;
  while (true) {
    if (i__5727__auto___7811 < len__5726__auto___7810) {
      args7785.push(arguments[i__5727__auto___7811]);
      var G__7812 = i__5727__auto___7811 + 1;
      i__5727__auto___7811 = G__7812;
      continue;
    } else {
    }
    break;
  }
  var G__7794 = args7785.length;
  switch(G__7794) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7785.slice(6), 0);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5745__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__7795 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7795) : f.call(null, G__7795);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__7796 = cljs.core.meta(obj);
    var G__7797 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7796, G__7797) : f.call(null, G__7796, G__7797);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__7798 = cljs.core.meta(obj);
    var G__7799 = a;
    var G__7800 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7798, G__7799, G__7800) : f.call(null, G__7798, G__7799, G__7800);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__7801 = cljs.core.meta(obj);
    var G__7802 = a;
    var G__7803 = b;
    var G__7804 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__7801, G__7802, G__7803, G__7804) : f.call(null, G__7801, G__7802, G__7803, G__7804);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__7805 = cljs.core.meta(obj);
    var G__7806 = a;
    var G__7807 = b;
    var G__7808 = c;
    var G__7809 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__7805, G__7806, G__7807, G__7808, G__7809) : f.call(null, G__7805, G__7806, G__7807, G__7808, G__7809);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq7786) {
  var G__7787 = cljs.core.first(seq7786);
  var seq7786__$1 = cljs.core.next(seq7786);
  var G__7788 = cljs.core.first(seq7786__$1);
  var seq7786__$2 = cljs.core.next(seq7786__$1);
  var G__7789 = cljs.core.first(seq7786__$2);
  var seq7786__$3 = cljs.core.next(seq7786__$2);
  var G__7790 = cljs.core.first(seq7786__$3);
  var seq7786__$4 = cljs.core.next(seq7786__$3);
  var G__7791 = cljs.core.first(seq7786__$4);
  var seq7786__$5 = cljs.core.next(seq7786__$4);
  var G__7792 = cljs.core.first(seq7786__$5);
  var seq7786__$6 = cljs.core.next(seq7786__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__7787, G__7788, G__7789, G__7790, G__7791, G__7792, seq7786__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_(var_args) {
  var args7814 = [];
  var len__5726__auto___7820 = arguments.length;
  var i__5727__auto___7821 = 0;
  while (true) {
    if (i__5727__auto___7821 < len__5726__auto___7820) {
      args7814.push(arguments[i__5727__auto___7821]);
      var G__7822 = i__5727__auto___7821 + 1;
      i__5727__auto___7821 = G__7822;
      continue;
    } else {
    }
    break;
  }
  var G__7819 = args7814.length;
  switch(G__7819) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7814.slice(2), 0);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq7815) {
  var G__7816 = cljs.core.first(seq7815);
  var seq7815__$1 = cljs.core.next(seq7815);
  var G__7817 = cljs.core.first(seq7815__$1);
  var seq7815__$2 = cljs.core.next(seq7815__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__7816, G__7817, seq7815__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t_cljs$core7827 !== "undefined") {
  } else {
    cljs.core.t_cljs$core7827 = function(nil_iter, meta7828) {
      this.nil_iter = nil_iter;
      this.meta7828 = meta7828;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t_cljs$core7827.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_7829, meta7828__$1) {
      var self__ = this;
      var _7829__$1 = this;
      return new cljs.core.t_cljs$core7827(self__.nil_iter, meta7828__$1);
    };
    cljs.core.t_cljs$core7827.prototype.cljs$core$IMeta$_meta$arity$1 = function(_7829) {
      var self__ = this;
      var _7829__$1 = this;
      return self__.meta7828;
    };
    cljs.core.t_cljs$core7827.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t_cljs$core7827.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t_cljs$core7827.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t_cljs$core7827.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "nil-iter", "nil-iter", 1101030523, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)), new cljs.core.Symbol(null, "meta7828", "meta7828", -508963894, null)], 
      null);
    };
    cljs.core.t_cljs$core7827.cljs$lang$type = true;
    cljs.core.t_cljs$core7827.cljs$lang$ctorStr = "cljs.core/t_cljs$core7827";
    cljs.core.t_cljs$core7827.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
      return cljs.core._write(writer__5267__auto__, "cljs.core/t_cljs$core7827");
    };
    cljs.core.__GT_t_cljs$core7827 = function cljs$core$nil_iter_$___GT_t_cljs$core7827(nil_iter__$1, meta7828) {
      return new cljs.core.t_cljs$core7827(nil_iter__$1, meta7828);
    };
  }
  return new cljs.core.t_cljs$core7827(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "_next", "_next", 101877036, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.truth_(cljs.core.iterable_QMARK_(coll))) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.LazyTransformer;
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4656__auto__ = !(lt.stepper == null);
      if (and__4656__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4656__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__7830 = lt;
        var G__7831 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__7830, G__7831) : self__.xform.call(null, G__7830, G__7831);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.Stepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__7832 = cljs.core.next(iters__$1);
        iters__$1 = G__7832;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5571__auto___7833 = self__.iters.length;
  var i_7834 = 0;
  while (true) {
    if (i_7834 < n__5571__auto___7833) {
      self__.nexts[i_7834] = self__.iters[i_7834].next();
      var G__7835 = i_7834 + 1;
      i_7834 = G__7835;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4656__auto__ = !(lt.stepper == null);
      if (and__4656__auto__) {
        return this$.hasNext();
      } else {
        return and__4656__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.MultiStepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iters", "iters", 719353031, null), new cljs.core.Symbol(null, "nexts", "nexts", -1683579407, null)], null);
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper(var_args) {
  var args7836 = [];
  var len__5726__auto___7839 = arguments.length;
  var i__5727__auto___7840 = 0;
  while (true) {
    if (i__5727__auto___7840 < len__5726__auto___7839) {
      args7836.push(arguments[i__5727__auto___7840]);
      var G__7841 = i__5727__auto___7840 + 1;
      i__5727__auto___7840 = G__7841;
      continue;
    } else {
    }
    break;
  }
  var G__7838 = args7836.length;
  switch(G__7838) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7836.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "stepper", "stepper", 1159163296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  cljs.core.with_meta(new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__7843_7847 = cljs.core.seq(colls);
  var chunk__7844_7848 = null;
  var count__7845_7849 = 0;
  var i__7846_7850 = 0;
  while (true) {
    if (i__7846_7850 < count__7845_7849) {
      var coll_7851 = chunk__7844_7848.cljs$core$IIndexed$_nth$arity$2(null, i__7846_7850);
      iters.push(cljs.core.iter(coll_7851));
      var G__7852 = seq__7843_7847;
      var G__7853 = chunk__7844_7848;
      var G__7854 = count__7845_7849;
      var G__7855 = i__7846_7850 + 1;
      seq__7843_7847 = G__7852;
      chunk__7844_7848 = G__7853;
      count__7845_7849 = G__7854;
      i__7846_7850 = G__7855;
      continue;
    } else {
      var temp__4425__auto___7856 = cljs.core.seq(seq__7843_7847);
      if (temp__4425__auto___7856) {
        var seq__7843_7857__$1 = temp__4425__auto___7856;
        if (cljs.core.chunked_seq_QMARK_(seq__7843_7857__$1)) {
          var c__5471__auto___7858 = cljs.core.chunk_first(seq__7843_7857__$1);
          var G__7859 = cljs.core.chunk_rest(seq__7843_7857__$1);
          var G__7860 = c__5471__auto___7858;
          var G__7861 = cljs.core.count(c__5471__auto___7858);
          var G__7862 = 0;
          seq__7843_7847 = G__7859;
          chunk__7844_7848 = G__7860;
          count__7845_7849 = G__7861;
          i__7846_7850 = G__7862;
          continue;
        } else {
          var coll_7863 = cljs.core.first(seq__7843_7857__$1);
          iters.push(cljs.core.iter(coll_7863));
          var G__7864 = cljs.core.next(seq__7843_7857__$1);
          var G__7865 = null;
          var G__7866 = 0;
          var G__7867 = 0;
          seq__7843_7847 = G__7864;
          chunk__7844_7848 = G__7865;
          count__7845_7849 = G__7866;
          i__7846_7850 = G__7867;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence(var_args) {
  var args7868 = [];
  var len__5726__auto___7874 = arguments.length;
  var i__5727__auto___7875 = 0;
  while (true) {
    if (i__5727__auto___7875 < len__5726__auto___7874) {
      args7868.push(arguments[i__5727__auto___7875]);
      var G__7876 = i__5727__auto___7875 + 1;
      i__5727__auto___7875 = G__7876;
      continue;
    } else {
    }
    break;
  }
  var G__7873 = args7868.length;
  switch(G__7873) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7868.slice(2), 0);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__4668__auto__ = cljs.core.seq(coll);
    if (or__4668__auto__) {
      return or__4668__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq7869) {
  var G__7870 = cljs.core.first(seq7869);
  var seq7869__$1 = cljs.core.next(seq7869);
  var G__7871 = cljs.core.first(seq7869__$1);
  var seq7869__$2 = cljs.core.next(seq7869__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__7870, G__7871, seq7869__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__7879 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__7879) : pred.call(null, G__7879);
      }())) {
        var G__7880 = pred;
        var G__7881 = cljs.core.next(coll);
        pred = G__7880;
        coll = G__7881;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4668__auto__ = function() {
        var G__7885 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__7885) : pred.call(null, G__7885);
      }();
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        var G__7886 = pred;
        var G__7887 = cljs.core.next(coll);
        pred = G__7886;
        coll = G__7887;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__7888 = null;
    var G__7888__0 = function() {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    };
    var G__7888__1 = function(x) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
    };
    var G__7888__2 = function(x, y) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y));
    };
    var G__7888__3 = function() {
      var G__7889__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__7889 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__7890__i = 0, G__7890__a = new Array(arguments.length - 2);
          while (G__7890__i < G__7890__a.length) {
            G__7890__a[G__7890__i] = arguments[G__7890__i + 2];
            ++G__7890__i;
          }
          zs = new cljs.core.IndexedSeq(G__7890__a, 0);
        }
        return G__7889__delegate.call(this, x, y, zs);
      };
      G__7889.cljs$lang$maxFixedArity = 2;
      G__7889.cljs$lang$applyTo = function(arglist__7891) {
        var x = cljs.core.first(arglist__7891);
        arglist__7891 = cljs.core.next(arglist__7891);
        var y = cljs.core.first(arglist__7891);
        var zs = cljs.core.rest(arglist__7891);
        return G__7889__delegate(x, y, zs);
      };
      G__7889.cljs$core$IFn$_invoke$arity$variadic = G__7889__delegate;
      return G__7889;
    }();
    G__7888 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__7888__0.call(this);
        case 1:
          return G__7888__1.call(this, x);
        case 2:
          return G__7888__2.call(this, x, y);
        default:
          var G__7892 = null;
          if (arguments.length > 2) {
            var G__7893__i = 0, G__7893__a = new Array(arguments.length - 2);
            while (G__7893__i < G__7893__a.length) {
              G__7893__a[G__7893__i] = arguments[G__7893__i + 2];
              ++G__7893__i;
            }
            G__7892 = new cljs.core.IndexedSeq(G__7893__a, 0);
          }
          return G__7888__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7892);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7888.cljs$lang$maxFixedArity = 2;
    G__7888.cljs$lang$applyTo = G__7888__3.cljs$lang$applyTo;
    G__7888.cljs$core$IFn$_invoke$arity$0 = G__7888__0;
    G__7888.cljs$core$IFn$_invoke$arity$1 = G__7888__1;
    G__7888.cljs$core$IFn$_invoke$arity$2 = G__7888__2;
    G__7888.cljs$core$IFn$_invoke$arity$variadic = G__7888__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__7888;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__7894__delegate = function(args) {
      return x;
    };
    var G__7894 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__7895__i = 0, G__7895__a = new Array(arguments.length - 0);
        while (G__7895__i < G__7895__a.length) {
          G__7895__a[G__7895__i] = arguments[G__7895__i + 0];
          ++G__7895__i;
        }
        args = new cljs.core.IndexedSeq(G__7895__a, 0);
      }
      return G__7894__delegate.call(this, args);
    };
    G__7894.cljs$lang$maxFixedArity = 0;
    G__7894.cljs$lang$applyTo = function(arglist__7896) {
      var args = cljs.core.seq(arglist__7896);
      return G__7894__delegate(args);
    };
    G__7894.cljs$core$IFn$_invoke$arity$variadic = G__7894__delegate;
    return G__7894;
  }();
};
cljs.core.comp = function cljs$core$comp(var_args) {
  var args7897 = [];
  var len__5726__auto___7924 = arguments.length;
  var i__5727__auto___7925 = 0;
  while (true) {
    if (i__5727__auto___7925 < len__5726__auto___7924) {
      args7897.push(arguments[i__5727__auto___7925]);
      var G__7926 = i__5727__auto___7925 + 1;
      i__5727__auto___7925 = G__7926;
      continue;
    } else {
    }
    break;
  }
  var G__7903 = args7897.length;
  switch(G__7903) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7897.slice(3), 0);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5745__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__7928 = null;
    var G__7928__0 = function() {
      var G__7904 = g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7904) : f.call(null, G__7904);
    };
    var G__7928__1 = function(x) {
      var G__7905 = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7905) : f.call(null, G__7905);
    };
    var G__7928__2 = function(x, y) {
      var G__7906 = g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7906) : f.call(null, G__7906);
    };
    var G__7928__3 = function(x, y, z) {
      var G__7907 = g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7907) : f.call(null, G__7907);
    };
    var G__7928__4 = function() {
      var G__7929__delegate = function(x, y, z, args) {
        var G__7908 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7908) : f.call(null, G__7908);
      };
      var G__7929 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7930__i = 0, G__7930__a = new Array(arguments.length - 3);
          while (G__7930__i < G__7930__a.length) {
            G__7930__a[G__7930__i] = arguments[G__7930__i + 3];
            ++G__7930__i;
          }
          args = new cljs.core.IndexedSeq(G__7930__a, 0);
        }
        return G__7929__delegate.call(this, x, y, z, args);
      };
      G__7929.cljs$lang$maxFixedArity = 3;
      G__7929.cljs$lang$applyTo = function(arglist__7931) {
        var x = cljs.core.first(arglist__7931);
        arglist__7931 = cljs.core.next(arglist__7931);
        var y = cljs.core.first(arglist__7931);
        arglist__7931 = cljs.core.next(arglist__7931);
        var z = cljs.core.first(arglist__7931);
        var args = cljs.core.rest(arglist__7931);
        return G__7929__delegate(x, y, z, args);
      };
      G__7929.cljs$core$IFn$_invoke$arity$variadic = G__7929__delegate;
      return G__7929;
    }();
    G__7928 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__7928__0.call(this);
        case 1:
          return G__7928__1.call(this, x);
        case 2:
          return G__7928__2.call(this, x, y);
        case 3:
          return G__7928__3.call(this, x, y, z);
        default:
          var G__7932 = null;
          if (arguments.length > 3) {
            var G__7933__i = 0, G__7933__a = new Array(arguments.length - 3);
            while (G__7933__i < G__7933__a.length) {
              G__7933__a[G__7933__i] = arguments[G__7933__i + 3];
              ++G__7933__i;
            }
            G__7932 = new cljs.core.IndexedSeq(G__7933__a, 0);
          }
          return G__7928__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7932);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7928.cljs$lang$maxFixedArity = 3;
    G__7928.cljs$lang$applyTo = G__7928__4.cljs$lang$applyTo;
    G__7928.cljs$core$IFn$_invoke$arity$0 = G__7928__0;
    G__7928.cljs$core$IFn$_invoke$arity$1 = G__7928__1;
    G__7928.cljs$core$IFn$_invoke$arity$2 = G__7928__2;
    G__7928.cljs$core$IFn$_invoke$arity$3 = G__7928__3;
    G__7928.cljs$core$IFn$_invoke$arity$variadic = G__7928__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7928;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__7934 = null;
    var G__7934__0 = function() {
      var G__7910 = function() {
        var G__7911 = h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7911) : g.call(null, G__7911);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7910) : f.call(null, G__7910);
    };
    var G__7934__1 = function(x) {
      var G__7913 = function() {
        var G__7914 = h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7914) : g.call(null, G__7914);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7913) : f.call(null, G__7913);
    };
    var G__7934__2 = function(x, y) {
      var G__7916 = function() {
        var G__7917 = h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7917) : g.call(null, G__7917);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7916) : f.call(null, G__7916);
    };
    var G__7934__3 = function(x, y, z) {
      var G__7919 = function() {
        var G__7920 = h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7920) : g.call(null, G__7920);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7919) : f.call(null, G__7919);
    };
    var G__7934__4 = function() {
      var G__7935__delegate = function(x, y, z, args) {
        var G__7922 = function() {
          var G__7923 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7923) : g.call(null, G__7923);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7922) : f.call(null, G__7922);
      };
      var G__7935 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7936__i = 0, G__7936__a = new Array(arguments.length - 3);
          while (G__7936__i < G__7936__a.length) {
            G__7936__a[G__7936__i] = arguments[G__7936__i + 3];
            ++G__7936__i;
          }
          args = new cljs.core.IndexedSeq(G__7936__a, 0);
        }
        return G__7935__delegate.call(this, x, y, z, args);
      };
      G__7935.cljs$lang$maxFixedArity = 3;
      G__7935.cljs$lang$applyTo = function(arglist__7937) {
        var x = cljs.core.first(arglist__7937);
        arglist__7937 = cljs.core.next(arglist__7937);
        var y = cljs.core.first(arglist__7937);
        arglist__7937 = cljs.core.next(arglist__7937);
        var z = cljs.core.first(arglist__7937);
        var args = cljs.core.rest(arglist__7937);
        return G__7935__delegate(x, y, z, args);
      };
      G__7935.cljs$core$IFn$_invoke$arity$variadic = G__7935__delegate;
      return G__7935;
    }();
    G__7934 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__7934__0.call(this);
        case 1:
          return G__7934__1.call(this, x);
        case 2:
          return G__7934__2.call(this, x, y);
        case 3:
          return G__7934__3.call(this, x, y, z);
        default:
          var G__7938 = null;
          if (arguments.length > 3) {
            var G__7939__i = 0, G__7939__a = new Array(arguments.length - 3);
            while (G__7939__i < G__7939__a.length) {
              G__7939__a[G__7939__i] = arguments[G__7939__i + 3];
              ++G__7939__i;
            }
            G__7938 = new cljs.core.IndexedSeq(G__7939__a, 0);
          }
          return G__7934__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7938);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7934.cljs$lang$maxFixedArity = 3;
    G__7934.cljs$lang$applyTo = G__7934__4.cljs$lang$applyTo;
    G__7934.cljs$core$IFn$_invoke$arity$0 = G__7934__0;
    G__7934.cljs$core$IFn$_invoke$arity$1 = G__7934__1;
    G__7934.cljs$core$IFn$_invoke$arity$2 = G__7934__2;
    G__7934.cljs$core$IFn$_invoke$arity$3 = G__7934__3;
    G__7934.cljs$core$IFn$_invoke$arity$variadic = G__7934__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7934;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__7940__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__7941 = cljs.core.first(fs__$2).call(null, ret);
            var G__7942 = cljs.core.next(fs__$2);
            ret = G__7941;
            fs__$2 = G__7942;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__7940 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__7943__i = 0, G__7943__a = new Array(arguments.length - 0);
          while (G__7943__i < G__7943__a.length) {
            G__7943__a[G__7943__i] = arguments[G__7943__i + 0];
            ++G__7943__i;
          }
          args = new cljs.core.IndexedSeq(G__7943__a, 0);
        }
        return G__7940__delegate.call(this, args);
      };
      G__7940.cljs$lang$maxFixedArity = 0;
      G__7940.cljs$lang$applyTo = function(arglist__7944) {
        var args = cljs.core.seq(arglist__7944);
        return G__7940__delegate(args);
      };
      G__7940.cljs$core$IFn$_invoke$arity$variadic = G__7940__delegate;
      return G__7940;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq7898) {
  var G__7899 = cljs.core.first(seq7898);
  var seq7898__$1 = cljs.core.next(seq7898);
  var G__7900 = cljs.core.first(seq7898__$1);
  var seq7898__$2 = cljs.core.next(seq7898__$1);
  var G__7901 = cljs.core.first(seq7898__$2);
  var seq7898__$3 = cljs.core.next(seq7898__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__7899, G__7900, G__7901, seq7898__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial(var_args) {
  var args7945 = [];
  var len__5726__auto___7953 = arguments.length;
  var i__5727__auto___7954 = 0;
  while (true) {
    if (i__5727__auto___7954 < len__5726__auto___7953) {
      args7945.push(arguments[i__5727__auto___7954]);
      var G__7955 = i__5727__auto___7954 + 1;
      i__5727__auto___7954 = G__7955;
      continue;
    } else {
    }
    break;
  }
  var G__7952 = args7945.length;
  switch(G__7952) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args7945.slice(4), 0);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5745__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__7957 = null;
    var G__7957__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(arg1) : f.call(null, arg1);
    };
    var G__7957__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, x) : f.call(null, arg1, x);
    };
    var G__7957__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, x, y) : f.call(null, arg1, x, y);
    };
    var G__7957__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, x, y, z) : f.call(null, arg1, x, y, z);
    };
    var G__7957__4 = function() {
      var G__7958__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__7958 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7959__i = 0, G__7959__a = new Array(arguments.length - 3);
          while (G__7959__i < G__7959__a.length) {
            G__7959__a[G__7959__i] = arguments[G__7959__i + 3];
            ++G__7959__i;
          }
          args = new cljs.core.IndexedSeq(G__7959__a, 0);
        }
        return G__7958__delegate.call(this, x, y, z, args);
      };
      G__7958.cljs$lang$maxFixedArity = 3;
      G__7958.cljs$lang$applyTo = function(arglist__7960) {
        var x = cljs.core.first(arglist__7960);
        arglist__7960 = cljs.core.next(arglist__7960);
        var y = cljs.core.first(arglist__7960);
        arglist__7960 = cljs.core.next(arglist__7960);
        var z = cljs.core.first(arglist__7960);
        var args = cljs.core.rest(arglist__7960);
        return G__7958__delegate(x, y, z, args);
      };
      G__7958.cljs$core$IFn$_invoke$arity$variadic = G__7958__delegate;
      return G__7958;
    }();
    G__7957 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__7957__0.call(this);
        case 1:
          return G__7957__1.call(this, x);
        case 2:
          return G__7957__2.call(this, x, y);
        case 3:
          return G__7957__3.call(this, x, y, z);
        default:
          var G__7961 = null;
          if (arguments.length > 3) {
            var G__7962__i = 0, G__7962__a = new Array(arguments.length - 3);
            while (G__7962__i < G__7962__a.length) {
              G__7962__a[G__7962__i] = arguments[G__7962__i + 3];
              ++G__7962__i;
            }
            G__7961 = new cljs.core.IndexedSeq(G__7962__a, 0);
          }
          return G__7957__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7961);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7957.cljs$lang$maxFixedArity = 3;
    G__7957.cljs$lang$applyTo = G__7957__4.cljs$lang$applyTo;
    G__7957.cljs$core$IFn$_invoke$arity$0 = G__7957__0;
    G__7957.cljs$core$IFn$_invoke$arity$1 = G__7957__1;
    G__7957.cljs$core$IFn$_invoke$arity$2 = G__7957__2;
    G__7957.cljs$core$IFn$_invoke$arity$3 = G__7957__3;
    G__7957.cljs$core$IFn$_invoke$arity$variadic = G__7957__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7957;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__7963 = null;
    var G__7963__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, arg2) : f.call(null, arg1, arg2);
    };
    var G__7963__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, x) : f.call(null, arg1, arg2, x);
    };
    var G__7963__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, x, y) : f.call(null, arg1, arg2, x, y);
    };
    var G__7963__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, x, y, z) : f.call(null, arg1, arg2, x, y, z);
    };
    var G__7963__4 = function() {
      var G__7964__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__7964 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7965__i = 0, G__7965__a = new Array(arguments.length - 3);
          while (G__7965__i < G__7965__a.length) {
            G__7965__a[G__7965__i] = arguments[G__7965__i + 3];
            ++G__7965__i;
          }
          args = new cljs.core.IndexedSeq(G__7965__a, 0);
        }
        return G__7964__delegate.call(this, x, y, z, args);
      };
      G__7964.cljs$lang$maxFixedArity = 3;
      G__7964.cljs$lang$applyTo = function(arglist__7966) {
        var x = cljs.core.first(arglist__7966);
        arglist__7966 = cljs.core.next(arglist__7966);
        var y = cljs.core.first(arglist__7966);
        arglist__7966 = cljs.core.next(arglist__7966);
        var z = cljs.core.first(arglist__7966);
        var args = cljs.core.rest(arglist__7966);
        return G__7964__delegate(x, y, z, args);
      };
      G__7964.cljs$core$IFn$_invoke$arity$variadic = G__7964__delegate;
      return G__7964;
    }();
    G__7963 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__7963__0.call(this);
        case 1:
          return G__7963__1.call(this, x);
        case 2:
          return G__7963__2.call(this, x, y);
        case 3:
          return G__7963__3.call(this, x, y, z);
        default:
          var G__7967 = null;
          if (arguments.length > 3) {
            var G__7968__i = 0, G__7968__a = new Array(arguments.length - 3);
            while (G__7968__i < G__7968__a.length) {
              G__7968__a[G__7968__i] = arguments[G__7968__i + 3];
              ++G__7968__i;
            }
            G__7967 = new cljs.core.IndexedSeq(G__7968__a, 0);
          }
          return G__7963__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7967);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7963.cljs$lang$maxFixedArity = 3;
    G__7963.cljs$lang$applyTo = G__7963__4.cljs$lang$applyTo;
    G__7963.cljs$core$IFn$_invoke$arity$0 = G__7963__0;
    G__7963.cljs$core$IFn$_invoke$arity$1 = G__7963__1;
    G__7963.cljs$core$IFn$_invoke$arity$2 = G__7963__2;
    G__7963.cljs$core$IFn$_invoke$arity$3 = G__7963__3;
    G__7963.cljs$core$IFn$_invoke$arity$variadic = G__7963__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7963;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__7969 = null;
    var G__7969__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, arg3) : f.call(null, arg1, arg2, arg3);
    };
    var G__7969__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, arg3, x) : f.call(null, arg1, arg2, arg3, x);
    };
    var G__7969__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, arg3, x, y) : f.call(null, arg1, arg2, arg3, x, y);
    };
    var G__7969__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(arg1, arg2, arg3, x, y, z) : f.call(null, arg1, arg2, arg3, x, y, z);
    };
    var G__7969__4 = function() {
      var G__7970__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__7970 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7971__i = 0, G__7971__a = new Array(arguments.length - 3);
          while (G__7971__i < G__7971__a.length) {
            G__7971__a[G__7971__i] = arguments[G__7971__i + 3];
            ++G__7971__i;
          }
          args = new cljs.core.IndexedSeq(G__7971__a, 0);
        }
        return G__7970__delegate.call(this, x, y, z, args);
      };
      G__7970.cljs$lang$maxFixedArity = 3;
      G__7970.cljs$lang$applyTo = function(arglist__7972) {
        var x = cljs.core.first(arglist__7972);
        arglist__7972 = cljs.core.next(arglist__7972);
        var y = cljs.core.first(arglist__7972);
        arglist__7972 = cljs.core.next(arglist__7972);
        var z = cljs.core.first(arglist__7972);
        var args = cljs.core.rest(arglist__7972);
        return G__7970__delegate(x, y, z, args);
      };
      G__7970.cljs$core$IFn$_invoke$arity$variadic = G__7970__delegate;
      return G__7970;
    }();
    G__7969 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__7969__0.call(this);
        case 1:
          return G__7969__1.call(this, x);
        case 2:
          return G__7969__2.call(this, x, y);
        case 3:
          return G__7969__3.call(this, x, y, z);
        default:
          var G__7973 = null;
          if (arguments.length > 3) {
            var G__7974__i = 0, G__7974__a = new Array(arguments.length - 3);
            while (G__7974__i < G__7974__a.length) {
              G__7974__a[G__7974__i] = arguments[G__7974__i + 3];
              ++G__7974__i;
            }
            G__7973 = new cljs.core.IndexedSeq(G__7974__a, 0);
          }
          return G__7969__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7973);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7969.cljs$lang$maxFixedArity = 3;
    G__7969.cljs$lang$applyTo = G__7969__4.cljs$lang$applyTo;
    G__7969.cljs$core$IFn$_invoke$arity$0 = G__7969__0;
    G__7969.cljs$core$IFn$_invoke$arity$1 = G__7969__1;
    G__7969.cljs$core$IFn$_invoke$arity$2 = G__7969__2;
    G__7969.cljs$core$IFn$_invoke$arity$3 = G__7969__3;
    G__7969.cljs$core$IFn$_invoke$arity$variadic = G__7969__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7969;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__7975__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__7975 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__7976__i = 0, G__7976__a = new Array(arguments.length - 0);
        while (G__7976__i < G__7976__a.length) {
          G__7976__a[G__7976__i] = arguments[G__7976__i + 0];
          ++G__7976__i;
        }
        args = new cljs.core.IndexedSeq(G__7976__a, 0);
      }
      return G__7975__delegate.call(this, args);
    };
    G__7975.cljs$lang$maxFixedArity = 0;
    G__7975.cljs$lang$applyTo = function(arglist__7977) {
      var args = cljs.core.seq(arglist__7977);
      return G__7975__delegate(args);
    };
    G__7975.cljs$core$IFn$_invoke$arity$variadic = G__7975__delegate;
    return G__7975;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq7946) {
  var G__7947 = cljs.core.first(seq7946);
  var seq7946__$1 = cljs.core.next(seq7946);
  var G__7948 = cljs.core.first(seq7946__$1);
  var seq7946__$2 = cljs.core.next(seq7946__$1);
  var G__7949 = cljs.core.first(seq7946__$2);
  var seq7946__$3 = cljs.core.next(seq7946__$2);
  var G__7950 = cljs.core.first(seq7946__$3);
  var seq7946__$4 = cljs.core.next(seq7946__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__7947, G__7948, G__7949, G__7950, seq7946__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil(var_args) {
  var args7978 = [];
  var len__5726__auto___7997 = arguments.length;
  var i__5727__auto___7998 = 0;
  while (true) {
    if (i__5727__auto___7998 < len__5726__auto___7997) {
      args7978.push(arguments[i__5727__auto___7998]);
      var G__7999 = i__5727__auto___7998 + 1;
      i__5727__auto___7998 = G__7999;
      continue;
    } else {
    }
    break;
  }
  var G__7980 = args7978.length;
  switch(G__7980) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7978.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__8001 = null;
    var G__8001__1 = function(a) {
      var G__7981 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7981) : f.call(null, G__7981);
    };
    var G__8001__2 = function(a, b) {
      var G__7982 = a == null ? x : a;
      var G__7983 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7982, G__7983) : f.call(null, G__7982, G__7983);
    };
    var G__8001__3 = function(a, b, c) {
      var G__7984 = a == null ? x : a;
      var G__7985 = b;
      var G__7986 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7984, G__7985, G__7986) : f.call(null, G__7984, G__7985, G__7986);
    };
    var G__8001__4 = function() {
      var G__8002__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__8002 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__8003__i = 0, G__8003__a = new Array(arguments.length - 3);
          while (G__8003__i < G__8003__a.length) {
            G__8003__a[G__8003__i] = arguments[G__8003__i + 3];
            ++G__8003__i;
          }
          ds = new cljs.core.IndexedSeq(G__8003__a, 0);
        }
        return G__8002__delegate.call(this, a, b, c, ds);
      };
      G__8002.cljs$lang$maxFixedArity = 3;
      G__8002.cljs$lang$applyTo = function(arglist__8004) {
        var a = cljs.core.first(arglist__8004);
        arglist__8004 = cljs.core.next(arglist__8004);
        var b = cljs.core.first(arglist__8004);
        arglist__8004 = cljs.core.next(arglist__8004);
        var c = cljs.core.first(arglist__8004);
        var ds = cljs.core.rest(arglist__8004);
        return G__8002__delegate(a, b, c, ds);
      };
      G__8002.cljs$core$IFn$_invoke$arity$variadic = G__8002__delegate;
      return G__8002;
    }();
    G__8001 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__8001__1.call(this, a);
        case 2:
          return G__8001__2.call(this, a, b);
        case 3:
          return G__8001__3.call(this, a, b, c);
        default:
          var G__8005 = null;
          if (arguments.length > 3) {
            var G__8006__i = 0, G__8006__a = new Array(arguments.length - 3);
            while (G__8006__i < G__8006__a.length) {
              G__8006__a[G__8006__i] = arguments[G__8006__i + 3];
              ++G__8006__i;
            }
            G__8005 = new cljs.core.IndexedSeq(G__8006__a, 0);
          }
          return G__8001__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8005);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8001.cljs$lang$maxFixedArity = 3;
    G__8001.cljs$lang$applyTo = G__8001__4.cljs$lang$applyTo;
    G__8001.cljs$core$IFn$_invoke$arity$1 = G__8001__1;
    G__8001.cljs$core$IFn$_invoke$arity$2 = G__8001__2;
    G__8001.cljs$core$IFn$_invoke$arity$3 = G__8001__3;
    G__8001.cljs$core$IFn$_invoke$arity$variadic = G__8001__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8001;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__8007 = null;
    var G__8007__2 = function(a, b) {
      var G__7987 = a == null ? x : a;
      var G__7988 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7987, G__7988) : f.call(null, G__7987, G__7988);
    };
    var G__8007__3 = function(a, b, c) {
      var G__7989 = a == null ? x : a;
      var G__7990 = b == null ? y : b;
      var G__7991 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7989, G__7990, G__7991) : f.call(null, G__7989, G__7990, G__7991);
    };
    var G__8007__4 = function() {
      var G__8008__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__8008 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__8009__i = 0, G__8009__a = new Array(arguments.length - 3);
          while (G__8009__i < G__8009__a.length) {
            G__8009__a[G__8009__i] = arguments[G__8009__i + 3];
            ++G__8009__i;
          }
          ds = new cljs.core.IndexedSeq(G__8009__a, 0);
        }
        return G__8008__delegate.call(this, a, b, c, ds);
      };
      G__8008.cljs$lang$maxFixedArity = 3;
      G__8008.cljs$lang$applyTo = function(arglist__8010) {
        var a = cljs.core.first(arglist__8010);
        arglist__8010 = cljs.core.next(arglist__8010);
        var b = cljs.core.first(arglist__8010);
        arglist__8010 = cljs.core.next(arglist__8010);
        var c = cljs.core.first(arglist__8010);
        var ds = cljs.core.rest(arglist__8010);
        return G__8008__delegate(a, b, c, ds);
      };
      G__8008.cljs$core$IFn$_invoke$arity$variadic = G__8008__delegate;
      return G__8008;
    }();
    G__8007 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__8007__2.call(this, a, b);
        case 3:
          return G__8007__3.call(this, a, b, c);
        default:
          var G__8011 = null;
          if (arguments.length > 3) {
            var G__8012__i = 0, G__8012__a = new Array(arguments.length - 3);
            while (G__8012__i < G__8012__a.length) {
              G__8012__a[G__8012__i] = arguments[G__8012__i + 3];
              ++G__8012__i;
            }
            G__8011 = new cljs.core.IndexedSeq(G__8012__a, 0);
          }
          return G__8007__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8011);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8007.cljs$lang$maxFixedArity = 3;
    G__8007.cljs$lang$applyTo = G__8007__4.cljs$lang$applyTo;
    G__8007.cljs$core$IFn$_invoke$arity$2 = G__8007__2;
    G__8007.cljs$core$IFn$_invoke$arity$3 = G__8007__3;
    G__8007.cljs$core$IFn$_invoke$arity$variadic = G__8007__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8007;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__8013 = null;
    var G__8013__2 = function(a, b) {
      var G__7992 = a == null ? x : a;
      var G__7993 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7992, G__7993) : f.call(null, G__7992, G__7993);
    };
    var G__8013__3 = function(a, b, c) {
      var G__7994 = a == null ? x : a;
      var G__7995 = b == null ? y : b;
      var G__7996 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7994, G__7995, G__7996) : f.call(null, G__7994, G__7995, G__7996);
    };
    var G__8013__4 = function() {
      var G__8014__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__8014 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__8015__i = 0, G__8015__a = new Array(arguments.length - 3);
          while (G__8015__i < G__8015__a.length) {
            G__8015__a[G__8015__i] = arguments[G__8015__i + 3];
            ++G__8015__i;
          }
          ds = new cljs.core.IndexedSeq(G__8015__a, 0);
        }
        return G__8014__delegate.call(this, a, b, c, ds);
      };
      G__8014.cljs$lang$maxFixedArity = 3;
      G__8014.cljs$lang$applyTo = function(arglist__8016) {
        var a = cljs.core.first(arglist__8016);
        arglist__8016 = cljs.core.next(arglist__8016);
        var b = cljs.core.first(arglist__8016);
        arglist__8016 = cljs.core.next(arglist__8016);
        var c = cljs.core.first(arglist__8016);
        var ds = cljs.core.rest(arglist__8016);
        return G__8014__delegate(a, b, c, ds);
      };
      G__8014.cljs$core$IFn$_invoke$arity$variadic = G__8014__delegate;
      return G__8014;
    }();
    G__8013 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__8013__2.call(this, a, b);
        case 3:
          return G__8013__3.call(this, a, b, c);
        default:
          var G__8017 = null;
          if (arguments.length > 3) {
            var G__8018__i = 0, G__8018__a = new Array(arguments.length - 3);
            while (G__8018__i < G__8018__a.length) {
              G__8018__a[G__8018__i] = arguments[G__8018__i + 3];
              ++G__8018__i;
            }
            G__8017 = new cljs.core.IndexedSeq(G__8018__a, 0);
          }
          return G__8013__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8017);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8013.cljs$lang$maxFixedArity = 3;
    G__8013.cljs$lang$applyTo = G__8013__4.cljs$lang$applyTo;
    G__8013.cljs$core$IFn$_invoke$arity$2 = G__8013__2;
    G__8013.cljs$core$IFn$_invoke$arity$3 = G__8013__3;
    G__8013.cljs$core$IFn$_invoke$arity$variadic = G__8013__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8013;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.volatile_BANG_;
cljs.core.map_indexed = function cljs$core$map_indexed(var_args) {
  var args8019 = [];
  var len__5726__auto___8052 = arguments.length;
  var i__5727__auto___8053 = 0;
  while (true) {
    if (i__5727__auto___8053 < len__5726__auto___8052) {
      args8019.push(arguments[i__5727__auto___8053]);
      var G__8054 = i__5727__auto___8053 + 1;
      i__5727__auto___8053 = G__8054;
      continue;
    } else {
    }
    break;
  }
  var G__8021 = args8019.length;
  switch(G__8021) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8019.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(-1) : cljs.core.volatile_BANG_.call(null, -1);
    return function(i) {
      return function() {
        var G__8056 = null;
        var G__8056__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8056__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__8056__2 = function(result, input) {
          var G__8024 = result;
          var G__8025 = function() {
            var G__8026 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__8027 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8026, G__8027) : f.call(null, G__8026, G__8027);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8024, G__8025) : rf.call(null, G__8024, G__8025);
        };
        G__8056 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8056__0.call(this);
            case 1:
              return G__8056__1.call(this, result);
            case 2:
              return G__8056__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8056.cljs$core$IFn$_invoke$arity$0 = G__8056__0;
        G__8056.cljs$core$IFn$_invoke$arity$1 = G__8056__1;
        G__8056.cljs$core$IFn$_invoke$arity$2 = G__8056__2;
        return G__8056;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4425__auto__ = cljs.core.seq(coll__$1);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5571__auto___8057 = size;
          var i_8058 = 0;
          while (true) {
            if (i_8058 < n__5571__auto___8057) {
              cljs.core.chunk_append(b, function() {
                var G__8048 = idx + i_8058;
                var G__8049 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8058);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8048, G__8049) : f.call(null, G__8048, G__8049);
              }());
              var G__8059 = i_8058 + 1;
              i_8058 = G__8059;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__8050 = idx;
            var G__8051 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8050, G__8051) : f.call(null, G__8050, G__8051);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep(var_args) {
  var args8060 = [];
  var len__5726__auto___8065 = arguments.length;
  var i__5727__auto___8066 = 0;
  while (true) {
    if (i__5727__auto___8066 < len__5726__auto___8065) {
      args8060.push(arguments[i__5727__auto___8066]);
      var G__8067 = i__5727__auto___8066 + 1;
      i__5727__auto___8066 = G__8067;
      continue;
    } else {
    }
    break;
  }
  var G__8062 = args8060.length;
  switch(G__8062) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8060.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__8069 = null;
      var G__8069__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__8069__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__8069__2 = function(result, input) {
        var v = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        if (v == null) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
        }
      };
      G__8069 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__8069__0.call(this);
          case 1:
            return G__8069__1.call(this, result);
          case 2:
            return G__8069__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8069.cljs$core$IFn$_invoke$arity$0 = G__8069__0;
      G__8069.cljs$core$IFn$_invoke$arity$1 = G__8069__1;
      G__8069.cljs$core$IFn$_invoke$arity$2 = G__8069__2;
      return G__8069;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5571__auto___8070 = size;
        var i_8071 = 0;
        while (true) {
          if (i_8071 < n__5571__auto___8070) {
            var x_8072 = function() {
              var G__8063 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8071);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8063) : f.call(null, G__8063);
            }();
            if (x_8072 == null) {
            } else {
              cljs.core.chunk_append(b, x_8072);
            }
            var G__8073 = i_8071 + 1;
            i_8071 = G__8073;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__8064 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8064) : f.call(null, G__8064);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__8074 = cljs.core.seq(self__.watches);
  var chunk__8075 = null;
  var count__8076 = 0;
  var i__8077 = 0;
  while (true) {
    if (i__8077 < count__8076) {
      var vec__8078 = chunk__8075.cljs$core$IIndexed$_nth$arity$2(null, i__8077);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8078, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8078, 1, null);
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
      var G__8080 = seq__8074;
      var G__8081 = chunk__8075;
      var G__8082 = count__8076;
      var G__8083 = i__8077 + 1;
      seq__8074 = G__8080;
      chunk__8075 = G__8081;
      count__8076 = G__8082;
      i__8077 = G__8083;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8074);
      if (temp__4425__auto__) {
        var seq__8074__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8074__$1)) {
          var c__5471__auto__ = cljs.core.chunk_first(seq__8074__$1);
          var G__8084 = cljs.core.chunk_rest(seq__8074__$1);
          var G__8085 = c__5471__auto__;
          var G__8086 = cljs.core.count(c__5471__auto__);
          var G__8087 = 0;
          seq__8074 = G__8084;
          chunk__8075 = G__8085;
          count__8076 = G__8086;
          i__8077 = G__8087;
          continue;
        } else {
          var vec__8079 = cljs.core.first(seq__8074__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8079, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8079, 1, null);
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
          var G__8088 = cljs.core.next(seq__8074__$1);
          var G__8089 = null;
          var G__8090 = 0;
          var G__8091 = 0;
          seq__8074 = G__8088;
          chunk__8075 = G__8089;
          count__8076 = G__8090;
          i__8077 = G__8091;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "watches", "watches", 1367433992, null)], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom(var_args) {
  var args8092 = [];
  var len__5726__auto___8100 = arguments.length;
  var i__5727__auto___8101 = 0;
  while (true) {
    if (i__5727__auto___8101 < len__5726__auto___8100) {
      args8092.push(arguments[i__5727__auto___8101]);
      var G__8102 = i__5727__auto___8101 + 1;
      i__5727__auto___8101 = G__8102;
      continue;
    } else {
    }
    break;
  }
  var G__8096 = args8092.length;
  switch(G__8096) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args8092.slice(1), 0);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5745__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__8097) {
  var map__8098 = p__8097;
  var map__8098__$1 = (!(map__8098 == null) ? map__8098.cljs$lang$protocol_mask$partition0$ & 64 || map__8098.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__8098) : map__8098;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8098__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8098__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq8093) {
  var G__8094 = cljs.core.first(seq8093);
  var seq8093__$1 = cljs.core.next(seq8093);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__8094, seq8093__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__8105 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__8105) : cljs.core.pr_str.call(null, G__8105);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_(var_args) {
  var args8106 = [];
  var len__5726__auto___8120 = arguments.length;
  var i__5727__auto___8121 = 0;
  while (true) {
    if (i__5727__auto___8121 < len__5726__auto___8120) {
      args8106.push(arguments[i__5727__auto___8121]);
      var G__8122 = i__5727__auto___8121 + 1;
      i__5727__auto___8121 = G__8122;
      continue;
    } else {
    }
    break;
  }
  var G__8113 = args8106.length;
  switch(G__8113) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args8106.slice(4), 0);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5745__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__8114 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8114) : f.call(null, G__8114);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__8115 = a.state;
      var G__8116 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8115, G__8116) : f.call(null, G__8115, G__8116);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__8117 = a.state;
      var G__8118 = x;
      var G__8119 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8117, G__8118, G__8119) : f.call(null, G__8117, G__8118, G__8119);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq8107) {
  var G__8108 = cljs.core.first(seq8107);
  var seq8107__$1 = cljs.core.next(seq8107);
  var G__8109 = cljs.core.first(seq8107__$1);
  var seq8107__$2 = cljs.core.next(seq8107__$1);
  var G__8110 = cljs.core.first(seq8107__$2);
  var seq8107__$3 = cljs.core.next(seq8107__$2);
  var G__8111 = cljs.core.first(seq8107__$3);
  var seq8107__$4 = cljs.core.next(seq8107__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__8108, G__8109, G__8110, G__8111, seq8107__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed(var_args) {
  var args8124 = [];
  var len__5726__auto___8155 = arguments.length;
  var i__5727__auto___8156 = 0;
  while (true) {
    if (i__5727__auto___8156 < len__5726__auto___8155) {
      args8124.push(arguments[i__5727__auto___8156]);
      var G__8157 = i__5727__auto___8156 + 1;
      i__5727__auto___8156 = G__8157;
      continue;
    } else {
    }
    break;
  }
  var G__8126 = args8124.length;
  switch(G__8126) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8124.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__8159 = null;
        var G__8159__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8159__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__8159__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(i, input) : f.call(null, i, input);
          if (v == null) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          }
        };
        G__8159 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8159__0.call(this);
            case 1:
              return G__8159__1.call(this, result);
            case 2:
              return G__8159__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8159.cljs$core$IFn$_invoke$arity$0 = G__8159__0;
        G__8159.cljs$core$IFn$_invoke$arity$1 = G__8159__1;
        G__8159.cljs$core$IFn$_invoke$arity$2 = G__8159__2;
        return G__8159;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4425__auto__ = cljs.core.seq(coll__$1);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5571__auto___8160 = size;
          var i_8161 = 0;
          while (true) {
            if (i_8161 < n__5571__auto___8160) {
              var x_8162 = function() {
                var G__8151 = idx + i_8161;
                var G__8152 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8161);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8151, G__8152) : f.call(null, G__8151, G__8152);
              }();
              if (x_8162 == null) {
              } else {
                cljs.core.chunk_append(b, x_8162);
              }
              var G__8163 = i_8161 + 1;
              i_8161 = G__8163;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__8153 = idx;
            var G__8154 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8153, G__8154) : f.call(null, G__8153, G__8154);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred(var_args) {
  var args8170 = [];
  var len__5726__auto___8177 = arguments.length;
  var i__5727__auto___8178 = 0;
  while (true) {
    if (i__5727__auto___8178 < len__5726__auto___8177) {
      args8170.push(arguments[i__5727__auto___8178]);
      var G__8179 = i__5727__auto___8178 + 1;
      i__5727__auto___8178 = G__8179;
      continue;
    } else {
    }
    break;
  }
  var G__8176 = args8170.length;
  switch(G__8176) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args8170.slice(3), 0);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5745__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x));
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4656__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__4656__auto__)) {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        } else {
          return and__4656__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4656__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__4656__auto__)) {
          var and__4656__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
          if (cljs.core.truth_(and__4656__auto____$1)) {
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
          } else {
            return and__4656__auto____$1;
          }
        } else {
          return and__4656__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__8181__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4656__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4656__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__4656__auto__;
          }
        }());
      };
      var G__8181 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8182__i = 0, G__8182__a = new Array(arguments.length - 3);
          while (G__8182__i < G__8182__a.length) {
            G__8182__a[G__8182__i] = arguments[G__8182__i + 3];
            ++G__8182__i;
          }
          args = new cljs.core.IndexedSeq(G__8182__a, 0);
        }
        return G__8181__delegate.call(this, x, y, z, args);
      };
      G__8181.cljs$lang$maxFixedArity = 3;
      G__8181.cljs$lang$applyTo = function(arglist__8183) {
        var x = cljs.core.first(arglist__8183);
        arglist__8183 = cljs.core.next(arglist__8183);
        var y = cljs.core.first(arglist__8183);
        arglist__8183 = cljs.core.next(arglist__8183);
        var z = cljs.core.first(arglist__8183);
        var args = cljs.core.rest(arglist__8183);
        return G__8181__delegate(x, y, z, args);
      };
      G__8181.cljs$core$IFn$_invoke$arity$variadic = G__8181__delegate;
      return G__8181;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__8184 = null;
          if (arguments.length > 3) {
            var G__8185__i = 0, G__8185__a = new Array(arguments.length - 3);
            while (G__8185__i < G__8185__a.length) {
              G__8185__a[G__8185__i] = arguments[G__8185__i + 3];
              ++G__8185__i;
            }
            G__8184 = new cljs.core.IndexedSeq(G__8185__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8184);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4656__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4656__auto__)) {
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        } else {
          return and__4656__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4656__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4656__auto__)) {
          var and__4656__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__4656__auto____$1)) {
            var and__4656__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(and__4656__auto____$2)) {
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
            } else {
              return and__4656__auto____$2;
            }
          } else {
            return and__4656__auto____$1;
          }
        } else {
          return and__4656__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4656__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4656__auto__)) {
          var and__4656__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__4656__auto____$1)) {
            var and__4656__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
            if (cljs.core.truth_(and__4656__auto____$2)) {
              var and__4656__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
              if (cljs.core.truth_(and__4656__auto____$3)) {
                var and__4656__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__4656__auto____$4)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                } else {
                  return and__4656__auto____$4;
                }
              } else {
                return and__4656__auto____$3;
              }
            } else {
              return and__4656__auto____$2;
            }
          } else {
            return and__4656__auto____$1;
          }
        } else {
          return and__4656__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__8186__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4656__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4656__auto__)) {
            return cljs.core.every_QMARK_(function(and__4656__auto__) {
              return function(p1__8164_SHARP_) {
                var and__4656__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__8164_SHARP_) : p1.call(null, p1__8164_SHARP_);
                if (cljs.core.truth_(and__4656__auto____$1)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__8164_SHARP_) : p2.call(null, p1__8164_SHARP_);
                } else {
                  return and__4656__auto____$1;
                }
              };
            }(and__4656__auto__), args);
          } else {
            return and__4656__auto__;
          }
        }());
      };
      var G__8186 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8187__i = 0, G__8187__a = new Array(arguments.length - 3);
          while (G__8187__i < G__8187__a.length) {
            G__8187__a[G__8187__i] = arguments[G__8187__i + 3];
            ++G__8187__i;
          }
          args = new cljs.core.IndexedSeq(G__8187__a, 0);
        }
        return G__8186__delegate.call(this, x, y, z, args);
      };
      G__8186.cljs$lang$maxFixedArity = 3;
      G__8186.cljs$lang$applyTo = function(arglist__8188) {
        var x = cljs.core.first(arglist__8188);
        arglist__8188 = cljs.core.next(arglist__8188);
        var y = cljs.core.first(arglist__8188);
        arglist__8188 = cljs.core.next(arglist__8188);
        var z = cljs.core.first(arglist__8188);
        var args = cljs.core.rest(arglist__8188);
        return G__8186__delegate(x, y, z, args);
      };
      G__8186.cljs$core$IFn$_invoke$arity$variadic = G__8186__delegate;
      return G__8186;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__8189 = null;
          if (arguments.length > 3) {
            var G__8190__i = 0, G__8190__a = new Array(arguments.length - 3);
            while (G__8190__i < G__8190__a.length) {
              G__8190__a[G__8190__i] = arguments[G__8190__i + 3];
              ++G__8190__i;
            }
            G__8189 = new cljs.core.IndexedSeq(G__8190__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8189);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4656__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4656__auto__)) {
          var and__4656__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__4656__auto____$1)) {
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          } else {
            return and__4656__auto____$1;
          }
        } else {
          return and__4656__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4656__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4656__auto__)) {
          var and__4656__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__4656__auto____$1)) {
            var and__4656__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__4656__auto____$2)) {
              var and__4656__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__4656__auto____$3)) {
                var and__4656__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__4656__auto____$4)) {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                } else {
                  return and__4656__auto____$4;
                }
              } else {
                return and__4656__auto____$3;
              }
            } else {
              return and__4656__auto____$2;
            }
          } else {
            return and__4656__auto____$1;
          }
        } else {
          return and__4656__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4656__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4656__auto__)) {
          var and__4656__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__4656__auto____$1)) {
            var and__4656__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__4656__auto____$2)) {
              var and__4656__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__4656__auto____$3)) {
                var and__4656__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__4656__auto____$4)) {
                  var and__4656__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                  if (cljs.core.truth_(and__4656__auto____$5)) {
                    var and__4656__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                    if (cljs.core.truth_(and__4656__auto____$6)) {
                      var and__4656__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                      if (cljs.core.truth_(and__4656__auto____$7)) {
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                      } else {
                        return and__4656__auto____$7;
                      }
                    } else {
                      return and__4656__auto____$6;
                    }
                  } else {
                    return and__4656__auto____$5;
                  }
                } else {
                  return and__4656__auto____$4;
                }
              } else {
                return and__4656__auto____$3;
              }
            } else {
              return and__4656__auto____$2;
            }
          } else {
            return and__4656__auto____$1;
          }
        } else {
          return and__4656__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__8191__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4656__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4656__auto__)) {
            return cljs.core.every_QMARK_(function(and__4656__auto__) {
              return function(p1__8165_SHARP_) {
                var and__4656__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__8165_SHARP_) : p1.call(null, p1__8165_SHARP_);
                if (cljs.core.truth_(and__4656__auto____$1)) {
                  var and__4656__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__8165_SHARP_) : p2.call(null, p1__8165_SHARP_);
                  if (cljs.core.truth_(and__4656__auto____$2)) {
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__8165_SHARP_) : p3.call(null, p1__8165_SHARP_);
                  } else {
                    return and__4656__auto____$2;
                  }
                } else {
                  return and__4656__auto____$1;
                }
              };
            }(and__4656__auto__), args);
          } else {
            return and__4656__auto__;
          }
        }());
      };
      var G__8191 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8192__i = 0, G__8192__a = new Array(arguments.length - 3);
          while (G__8192__i < G__8192__a.length) {
            G__8192__a[G__8192__i] = arguments[G__8192__i + 3];
            ++G__8192__i;
          }
          args = new cljs.core.IndexedSeq(G__8192__a, 0);
        }
        return G__8191__delegate.call(this, x, y, z, args);
      };
      G__8191.cljs$lang$maxFixedArity = 3;
      G__8191.cljs$lang$applyTo = function(arglist__8193) {
        var x = cljs.core.first(arglist__8193);
        arglist__8193 = cljs.core.next(arglist__8193);
        var y = cljs.core.first(arglist__8193);
        arglist__8193 = cljs.core.next(arglist__8193);
        var z = cljs.core.first(arglist__8193);
        var args = cljs.core.rest(arglist__8193);
        return G__8191__delegate(x, y, z, args);
      };
      G__8191.cljs$core$IFn$_invoke$arity$variadic = G__8191__delegate;
      return G__8191;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__8194 = null;
          if (arguments.length > 3) {
            var G__8195__i = 0, G__8195__a = new Array(arguments.length - 3);
            while (G__8195__i < G__8195__a.length) {
              G__8195__a[G__8195__i] = arguments[G__8195__i + 3];
              ++G__8195__i;
            }
            G__8194 = new cljs.core.IndexedSeq(G__8195__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8194);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__8166_SHARP_) {
            return p1__8166_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8166_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__8166_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__8167_SHARP_) {
            var and__4656__auto__ = p1__8167_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8167_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__8167_SHARP_.call(null, x);
            if (cljs.core.truth_(and__4656__auto__)) {
              return p1__8167_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8167_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__8167_SHARP_.call(null, y);
            } else {
              return and__4656__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__8168_SHARP_) {
            var and__4656__auto__ = p1__8168_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8168_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__8168_SHARP_.call(null, x);
            if (cljs.core.truth_(and__4656__auto__)) {
              var and__4656__auto____$1 = p1__8168_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8168_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__8168_SHARP_.call(null, y);
              if (cljs.core.truth_(and__4656__auto____$1)) {
                return p1__8168_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8168_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__8168_SHARP_.call(null, z);
              } else {
                return and__4656__auto____$1;
              }
            } else {
              return and__4656__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__8196__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__4656__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__4656__auto__)) {
              return cljs.core.every_QMARK_(function(and__4656__auto__, ps__$1) {
                return function(p1__8169_SHARP_) {
                  return cljs.core.every_QMARK_(p1__8169_SHARP_, args);
                };
              }(and__4656__auto__, ps__$1), ps__$1);
            } else {
              return and__4656__auto__;
            }
          }());
        };
        var G__8196 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8197__i = 0, G__8197__a = new Array(arguments.length - 3);
            while (G__8197__i < G__8197__a.length) {
              G__8197__a[G__8197__i] = arguments[G__8197__i + 3];
              ++G__8197__i;
            }
            args = new cljs.core.IndexedSeq(G__8197__a, 0);
          }
          return G__8196__delegate.call(this, x, y, z, args);
        };
        G__8196.cljs$lang$maxFixedArity = 3;
        G__8196.cljs$lang$applyTo = function(arglist__8198) {
          var x = cljs.core.first(arglist__8198);
          arglist__8198 = cljs.core.next(arglist__8198);
          var y = cljs.core.first(arglist__8198);
          arglist__8198 = cljs.core.next(arglist__8198);
          var z = cljs.core.first(arglist__8198);
          var args = cljs.core.rest(arglist__8198);
          return G__8196__delegate(x, y, z, args);
        };
        G__8196.cljs$core$IFn$_invoke$arity$variadic = G__8196__delegate;
        return G__8196;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__8199 = null;
            if (arguments.length > 3) {
              var G__8200__i = 0, G__8200__a = new Array(arguments.length - 3);
              while (G__8200__i < G__8200__a.length) {
                G__8200__a[G__8200__i] = arguments[G__8200__i + 3];
                ++G__8200__i;
              }
              G__8199 = new cljs.core.IndexedSeq(G__8200__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8199);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq8171) {
  var G__8172 = cljs.core.first(seq8171);
  var seq8171__$1 = cljs.core.next(seq8171);
  var G__8173 = cljs.core.first(seq8171__$1);
  var seq8171__$2 = cljs.core.next(seq8171__$1);
  var G__8174 = cljs.core.first(seq8171__$2);
  var seq8171__$3 = cljs.core.next(seq8171__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__8172, G__8173, G__8174, seq8171__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn(var_args) {
  var args8207 = [];
  var len__5726__auto___8214 = arguments.length;
  var i__5727__auto___8215 = 0;
  while (true) {
    if (i__5727__auto___8215 < len__5726__auto___8214) {
      args8207.push(arguments[i__5727__auto___8215]);
      var G__8216 = i__5727__auto___8215 + 1;
      i__5727__auto___8215 = G__8216;
      continue;
    } else {
    }
    break;
  }
  var G__8213 = args8207.length;
  switch(G__8213) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args8207.slice(3), 0);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5745__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__4668__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__4668__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        var or__4668__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        if (cljs.core.truth_(or__4668__auto____$1)) {
          return or__4668__auto____$1;
        } else {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__8218__delegate = function(x, y, z, args) {
        var or__4668__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4668__auto__)) {
          return or__4668__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__8218 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8219__i = 0, G__8219__a = new Array(arguments.length - 3);
          while (G__8219__i < G__8219__a.length) {
            G__8219__a[G__8219__i] = arguments[G__8219__i + 3];
            ++G__8219__i;
          }
          args = new cljs.core.IndexedSeq(G__8219__a, 0);
        }
        return G__8218__delegate.call(this, x, y, z, args);
      };
      G__8218.cljs$lang$maxFixedArity = 3;
      G__8218.cljs$lang$applyTo = function(arglist__8220) {
        var x = cljs.core.first(arglist__8220);
        arglist__8220 = cljs.core.next(arglist__8220);
        var y = cljs.core.first(arglist__8220);
        arglist__8220 = cljs.core.next(arglist__8220);
        var z = cljs.core.first(arglist__8220);
        var args = cljs.core.rest(arglist__8220);
        return G__8218__delegate(x, y, z, args);
      };
      G__8218.cljs$core$IFn$_invoke$arity$variadic = G__8218__delegate;
      return G__8218;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__8221 = null;
          if (arguments.length > 3) {
            var G__8222__i = 0, G__8222__a = new Array(arguments.length - 3);
            while (G__8222__i < G__8222__a.length) {
              G__8222__a[G__8222__i] = arguments[G__8222__i + 3];
              ++G__8222__i;
            }
            G__8221 = new cljs.core.IndexedSeq(G__8222__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8221);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__4668__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__4668__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        var or__4668__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__4668__auto____$1)) {
          return or__4668__auto____$1;
        } else {
          var or__4668__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(or__4668__auto____$2)) {
            return or__4668__auto____$2;
          } else {
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__4668__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        var or__4668__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__4668__auto____$1)) {
          return or__4668__auto____$1;
        } else {
          var or__4668__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
          if (cljs.core.truth_(or__4668__auto____$2)) {
            return or__4668__auto____$2;
          } else {
            var or__4668__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(or__4668__auto____$3)) {
              return or__4668__auto____$3;
            } else {
              var or__4668__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__4668__auto____$4)) {
                return or__4668__auto____$4;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__8223__delegate = function(x, y, z, args) {
        var or__4668__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4668__auto__)) {
          return or__4668__auto__;
        } else {
          return cljs.core.some(function(or__4668__auto__) {
            return function(p1__8201_SHARP_) {
              var or__4668__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__8201_SHARP_) : p1.call(null, p1__8201_SHARP_);
              if (cljs.core.truth_(or__4668__auto____$1)) {
                return or__4668__auto____$1;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__8201_SHARP_) : p2.call(null, p1__8201_SHARP_);
              }
            };
          }(or__4668__auto__), args);
        }
      };
      var G__8223 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8224__i = 0, G__8224__a = new Array(arguments.length - 3);
          while (G__8224__i < G__8224__a.length) {
            G__8224__a[G__8224__i] = arguments[G__8224__i + 3];
            ++G__8224__i;
          }
          args = new cljs.core.IndexedSeq(G__8224__a, 0);
        }
        return G__8223__delegate.call(this, x, y, z, args);
      };
      G__8223.cljs$lang$maxFixedArity = 3;
      G__8223.cljs$lang$applyTo = function(arglist__8225) {
        var x = cljs.core.first(arglist__8225);
        arglist__8225 = cljs.core.next(arglist__8225);
        var y = cljs.core.first(arglist__8225);
        arglist__8225 = cljs.core.next(arglist__8225);
        var z = cljs.core.first(arglist__8225);
        var args = cljs.core.rest(arglist__8225);
        return G__8223__delegate(x, y, z, args);
      };
      G__8223.cljs$core$IFn$_invoke$arity$variadic = G__8223__delegate;
      return G__8223;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__8226 = null;
          if (arguments.length > 3) {
            var G__8227__i = 0, G__8227__a = new Array(arguments.length - 3);
            while (G__8227__i < G__8227__a.length) {
              G__8227__a[G__8227__i] = arguments[G__8227__i + 3];
              ++G__8227__i;
            }
            G__8226 = new cljs.core.IndexedSeq(G__8227__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8226);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__4668__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        var or__4668__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__4668__auto____$1)) {
          return or__4668__auto____$1;
        } else {
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__4668__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        var or__4668__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__4668__auto____$1)) {
          return or__4668__auto____$1;
        } else {
          var or__4668__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__4668__auto____$2)) {
            return or__4668__auto____$2;
          } else {
            var or__4668__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__4668__auto____$3)) {
              return or__4668__auto____$3;
            } else {
              var or__4668__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__4668__auto____$4)) {
                return or__4668__auto____$4;
              } else {
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__4668__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        var or__4668__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__4668__auto____$1)) {
          return or__4668__auto____$1;
        } else {
          var or__4668__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__4668__auto____$2)) {
            return or__4668__auto____$2;
          } else {
            var or__4668__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__4668__auto____$3)) {
              return or__4668__auto____$3;
            } else {
              var or__4668__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__4668__auto____$4)) {
                return or__4668__auto____$4;
              } else {
                var or__4668__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                if (cljs.core.truth_(or__4668__auto____$5)) {
                  return or__4668__auto____$5;
                } else {
                  var or__4668__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                  if (cljs.core.truth_(or__4668__auto____$6)) {
                    return or__4668__auto____$6;
                  } else {
                    var or__4668__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                    if (cljs.core.truth_(or__4668__auto____$7)) {
                      return or__4668__auto____$7;
                    } else {
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__8228__delegate = function(x, y, z, args) {
        var or__4668__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4668__auto__)) {
          return or__4668__auto__;
        } else {
          return cljs.core.some(function(or__4668__auto__) {
            return function(p1__8202_SHARP_) {
              var or__4668__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__8202_SHARP_) : p1.call(null, p1__8202_SHARP_);
              if (cljs.core.truth_(or__4668__auto____$1)) {
                return or__4668__auto____$1;
              } else {
                var or__4668__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__8202_SHARP_) : p2.call(null, p1__8202_SHARP_);
                if (cljs.core.truth_(or__4668__auto____$2)) {
                  return or__4668__auto____$2;
                } else {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__8202_SHARP_) : p3.call(null, p1__8202_SHARP_);
                }
              }
            };
          }(or__4668__auto__), args);
        }
      };
      var G__8228 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8229__i = 0, G__8229__a = new Array(arguments.length - 3);
          while (G__8229__i < G__8229__a.length) {
            G__8229__a[G__8229__i] = arguments[G__8229__i + 3];
            ++G__8229__i;
          }
          args = new cljs.core.IndexedSeq(G__8229__a, 0);
        }
        return G__8228__delegate.call(this, x, y, z, args);
      };
      G__8228.cljs$lang$maxFixedArity = 3;
      G__8228.cljs$lang$applyTo = function(arglist__8230) {
        var x = cljs.core.first(arglist__8230);
        arglist__8230 = cljs.core.next(arglist__8230);
        var y = cljs.core.first(arglist__8230);
        arglist__8230 = cljs.core.next(arglist__8230);
        var z = cljs.core.first(arglist__8230);
        var args = cljs.core.rest(arglist__8230);
        return G__8228__delegate(x, y, z, args);
      };
      G__8228.cljs$core$IFn$_invoke$arity$variadic = G__8228__delegate;
      return G__8228;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__8231 = null;
          if (arguments.length > 3) {
            var G__8232__i = 0, G__8232__a = new Array(arguments.length - 3);
            while (G__8232__i < G__8232__a.length) {
              G__8232__a[G__8232__i] = arguments[G__8232__i + 3];
              ++G__8232__i;
            }
            G__8231 = new cljs.core.IndexedSeq(G__8232__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8231);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__8203_SHARP_) {
            return p1__8203_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8203_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__8203_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__8204_SHARP_) {
            var or__4668__auto__ = p1__8204_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8204_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__8204_SHARP_.call(null, x);
            if (cljs.core.truth_(or__4668__auto__)) {
              return or__4668__auto__;
            } else {
              return p1__8204_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8204_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__8204_SHARP_.call(null, y);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__8205_SHARP_) {
            var or__4668__auto__ = p1__8205_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8205_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__8205_SHARP_.call(null, x);
            if (cljs.core.truth_(or__4668__auto__)) {
              return or__4668__auto__;
            } else {
              var or__4668__auto____$1 = p1__8205_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8205_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__8205_SHARP_.call(null, y);
              if (cljs.core.truth_(or__4668__auto____$1)) {
                return or__4668__auto____$1;
              } else {
                return p1__8205_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8205_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__8205_SHARP_.call(null, z);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__8233__delegate = function(x, y, z, args) {
          var or__4668__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4668__auto__)) {
            return or__4668__auto__;
          } else {
            return cljs.core.some(function(or__4668__auto__, ps__$1) {
              return function(p1__8206_SHARP_) {
                return cljs.core.some(p1__8206_SHARP_, args);
              };
            }(or__4668__auto__, ps__$1), ps__$1);
          }
        };
        var G__8233 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8234__i = 0, G__8234__a = new Array(arguments.length - 3);
            while (G__8234__i < G__8234__a.length) {
              G__8234__a[G__8234__i] = arguments[G__8234__i + 3];
              ++G__8234__i;
            }
            args = new cljs.core.IndexedSeq(G__8234__a, 0);
          }
          return G__8233__delegate.call(this, x, y, z, args);
        };
        G__8233.cljs$lang$maxFixedArity = 3;
        G__8233.cljs$lang$applyTo = function(arglist__8235) {
          var x = cljs.core.first(arglist__8235);
          arglist__8235 = cljs.core.next(arglist__8235);
          var y = cljs.core.first(arglist__8235);
          arglist__8235 = cljs.core.next(arglist__8235);
          var z = cljs.core.first(arglist__8235);
          var args = cljs.core.rest(arglist__8235);
          return G__8233__delegate(x, y, z, args);
        };
        G__8233.cljs$core$IFn$_invoke$arity$variadic = G__8233__delegate;
        return G__8233;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__8236 = null;
            if (arguments.length > 3) {
              var G__8237__i = 0, G__8237__a = new Array(arguments.length - 3);
              while (G__8237__i < G__8237__a.length) {
                G__8237__a[G__8237__i] = arguments[G__8237__i + 3];
                ++G__8237__i;
              }
              G__8236 = new cljs.core.IndexedSeq(G__8237__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8236);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq8208) {
  var G__8209 = cljs.core.first(seq8208);
  var seq8208__$1 = cljs.core.next(seq8208);
  var G__8210 = cljs.core.first(seq8208__$1);
  var seq8208__$2 = cljs.core.next(seq8208__$1);
  var G__8211 = cljs.core.first(seq8208__$2);
  var seq8208__$3 = cljs.core.next(seq8208__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__8209, G__8210, G__8211, seq8208__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map(var_args) {
  var args8239 = [];
  var len__5726__auto___8259 = arguments.length;
  var i__5727__auto___8260 = 0;
  while (true) {
    if (i__5727__auto___8260 < len__5726__auto___8259) {
      args8239.push(arguments[i__5727__auto___8260]);
      var G__8261 = i__5727__auto___8260 + 1;
      i__5727__auto___8260 = G__8261;
      continue;
    } else {
    }
    break;
  }
  var G__8246 = args8239.length;
  switch(G__8246) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args8239.slice(4), 0);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5745__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__8263 = null;
      var G__8263__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__8263__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__8263__2 = function(result, input) {
        var G__8247 = result;
        var G__8248 = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8247, G__8248) : rf.call(null, G__8247, G__8248);
      };
      var G__8263__3 = function() {
        var G__8264__delegate = function(result, input, inputs) {
          var G__8249 = result;
          var G__8250 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8249, G__8250) : rf.call(null, G__8249, G__8250);
        };
        var G__8264 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__8265__i = 0, G__8265__a = new Array(arguments.length - 2);
            while (G__8265__i < G__8265__a.length) {
              G__8265__a[G__8265__i] = arguments[G__8265__i + 2];
              ++G__8265__i;
            }
            inputs = new cljs.core.IndexedSeq(G__8265__a, 0);
          }
          return G__8264__delegate.call(this, result, input, inputs);
        };
        G__8264.cljs$lang$maxFixedArity = 2;
        G__8264.cljs$lang$applyTo = function(arglist__8266) {
          var result = cljs.core.first(arglist__8266);
          arglist__8266 = cljs.core.next(arglist__8266);
          var input = cljs.core.first(arglist__8266);
          var inputs = cljs.core.rest(arglist__8266);
          return G__8264__delegate(result, input, inputs);
        };
        G__8264.cljs$core$IFn$_invoke$arity$variadic = G__8264__delegate;
        return G__8264;
      }();
      G__8263 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__8263__0.call(this);
          case 1:
            return G__8263__1.call(this, result);
          case 2:
            return G__8263__2.call(this, result, input);
          default:
            var G__8267 = null;
            if (arguments.length > 2) {
              var G__8268__i = 0, G__8268__a = new Array(arguments.length - 2);
              while (G__8268__i < G__8268__a.length) {
                G__8268__a[G__8268__i] = arguments[G__8268__i + 2];
                ++G__8268__i;
              }
              G__8267 = new cljs.core.IndexedSeq(G__8268__a, 0);
            }
            return G__8263__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__8267);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8263.cljs$lang$maxFixedArity = 2;
      G__8263.cljs$lang$applyTo = G__8263__3.cljs$lang$applyTo;
      G__8263.cljs$core$IFn$_invoke$arity$0 = G__8263__0;
      G__8263.cljs$core$IFn$_invoke$arity$1 = G__8263__1;
      G__8263.cljs$core$IFn$_invoke$arity$2 = G__8263__2;
      G__8263.cljs$core$IFn$_invoke$arity$variadic = G__8263__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__8263;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5571__auto___8269 = size;
        var i_8270 = 0;
        while (true) {
          if (i_8270 < n__5571__auto___8269) {
            cljs.core.chunk_append(b, function() {
              var G__8251 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8270);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8251) : f.call(null, G__8251);
            }());
            var G__8271 = i_8270 + 1;
            i_8270 = G__8271;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__8252 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8252) : f.call(null, G__8252);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__8253 = cljs.core.first(s1);
        var G__8254 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8253, G__8254) : f.call(null, G__8253, G__8254);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__8255 = cljs.core.first(s1);
        var G__8256 = cljs.core.first(s2);
        var G__8257 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8255, G__8256, G__8257) : f.call(null, G__8255, G__8256, G__8257);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__8238_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__8238_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq8240) {
  var G__8241 = cljs.core.first(seq8240);
  var seq8240__$1 = cljs.core.next(seq8240);
  var G__8242 = cljs.core.first(seq8240__$1);
  var seq8240__$2 = cljs.core.next(seq8240__$1);
  var G__8243 = cljs.core.first(seq8240__$2);
  var seq8240__$3 = cljs.core.next(seq8240__$2);
  var G__8244 = cljs.core.first(seq8240__$3);
  var seq8240__$4 = cljs.core.next(seq8240__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__8241, G__8242, G__8243, G__8244, seq8240__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take(var_args) {
  var args8272 = [];
  var len__5726__auto___8277 = arguments.length;
  var i__5727__auto___8278 = 0;
  while (true) {
    if (i__5727__auto___8278 < len__5726__auto___8277) {
      args8272.push(arguments[i__5727__auto___8278]);
      var G__8279 = i__5727__auto___8278 + 1;
      i__5727__auto___8278 = G__8279;
      continue;
    } else {
    }
    break;
  }
  var G__8274 = args8272.length;
  switch(G__8274) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8272.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__8275 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__8275) : cljs.core.pr_str.call(null, G__8275);
    }())].join(""));
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__8281 = null;
        var G__8281__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8281__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__8281__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__8281 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8281__0.call(this);
            case 1:
              return G__8281__1.call(this, result);
            case 2:
              return G__8281__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8281.cljs$core$IFn$_invoke$arity$0 = G__8281__0;
        G__8281.cljs$core$IFn$_invoke$arity$1 = G__8281__1;
        G__8281.cljs$core$IFn$_invoke$arity$2 = G__8281__2;
        return G__8281;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__8276 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__8276) : cljs.core.pr_str.call(null, G__8276);
    }())].join(""));
  }
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4425__auto__ = cljs.core.seq(coll);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop(var_args) {
  var args8282 = [];
  var len__5726__auto___8287 = arguments.length;
  var i__5727__auto___8288 = 0;
  while (true) {
    if (i__5727__auto___8288 < len__5726__auto___8287) {
      args8282.push(arguments[i__5727__auto___8288]);
      var G__8289 = i__5727__auto___8288 + 1;
      i__5727__auto___8288 = G__8289;
      continue;
    } else {
    }
    break;
  }
  var G__8284 = args8282.length;
  switch(G__8284) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8282.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__8285 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__8285) : cljs.core.pr_str.call(null, G__8285);
    }())].join(""));
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__8291 = null;
        var G__8291__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8291__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__8291__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__8291 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8291__0.call(this);
            case 1:
              return G__8291__1.call(this, result);
            case 2:
              return G__8291__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8291.cljs$core$IFn$_invoke$arity$0 = G__8291__0;
        G__8291.cljs$core$IFn$_invoke$arity$1 = G__8291__1;
        G__8291.cljs$core$IFn$_invoke$arity$2 = G__8291__2;
        return G__8291;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__8286 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__8286) : cljs.core.pr_str.call(null, G__8286);
    }())].join(""));
  }
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__8292 = n__$1 - 1;
        var G__8293 = cljs.core.rest(s);
        n__$1 = G__8292;
        coll__$1 = G__8293;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last(var_args) {
  var args8294 = [];
  var len__5726__auto___8297 = arguments.length;
  var i__5727__auto___8298 = 0;
  while (true) {
    if (i__5727__auto___8298 < len__5726__auto___8297) {
      args8294.push(arguments[i__5727__auto___8298]);
      var G__8299 = i__5727__auto___8298 + 1;
      i__5727__auto___8298 = G__8299;
      continue;
    } else {
    }
    break;
  }
  var G__8296 = args8294.length;
  switch(G__8296) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8294.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__8301 = cljs.core.next(s);
      var G__8302 = cljs.core.next(lead);
      s = G__8301;
      lead = G__8302;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while(var_args) {
  var args8303 = [];
  var len__5726__auto___8308 = arguments.length;
  var i__5727__auto___8309 = 0;
  while (true) {
    if (i__5727__auto___8309 < len__5726__auto___8308) {
      args8303.push(arguments[i__5727__auto___8309]);
      var G__8310 = i__5727__auto___8309 + 1;
      i__5727__auto___8309 = G__8310;
      continue;
    } else {
    }
    break;
  }
  var G__8305 = args8303.length;
  switch(G__8305) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8303.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__8312 = null;
        var G__8312__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8312__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__8312__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__4656__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__4656__auto__)) {
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input);
            } else {
              return and__4656__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__8312 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8312__0.call(this);
            case 1:
              return G__8312__1.call(this, result);
            case 2:
              return G__8312__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8312.cljs$core$IFn$_invoke$arity$0 = G__8312__0;
        G__8312.cljs$core$IFn$_invoke$arity$1 = G__8312__1;
        G__8312.cljs$core$IFn$_invoke$arity$2 = G__8312__2;
        return G__8312;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__4656__auto__ = s;
        if (and__4656__auto__) {
          var G__8307 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__8307) : pred__$1.call(null, G__8307);
        } else {
          return and__4656__auto__;
        }
      }())) {
        var G__8313 = pred__$1;
        var G__8314 = cljs.core.rest(s);
        pred__$1 = G__8313;
        coll__$1 = G__8314;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat(var_args) {
  var args8315 = [];
  var len__5726__auto___8318 = arguments.length;
  var i__5727__auto___8319 = 0;
  while (true) {
    if (i__5727__auto___8319 < len__5726__auto___8318) {
      args8315.push(arguments[i__5727__auto___8319]);
      var G__8320 = i__5727__auto___8319 + 1;
      i__5727__auto___8319 = G__8320;
      continue;
    } else {
    }
    break;
  }
  var G__8317 = args8315.length;
  switch(G__8317) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8315.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly(var_args) {
  var args8322 = [];
  var len__5726__auto___8325 = arguments.length;
  var i__5727__auto___8326 = 0;
  while (true) {
    if (i__5727__auto___8326 < len__5726__auto___8325) {
      args8322.push(arguments[i__5727__auto___8326]);
      var G__8327 = i__5727__auto___8326 + 1;
      i__5727__auto___8326 = G__8327;
      continue;
    } else {
    }
    break;
  }
  var G__8324 = args8322.length;
  switch(G__8324) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8322.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave(var_args) {
  var args8331 = [];
  var len__5726__auto___8337 = arguments.length;
  var i__5727__auto___8338 = 0;
  while (true) {
    if (i__5727__auto___8338 < len__5726__auto___8337) {
      args8331.push(arguments[i__5727__auto___8338]);
      var G__8339 = i__5727__auto___8338 + 1;
      i__5727__auto___8338 = G__8339;
      continue;
    } else {
    }
    break;
  }
  var G__8336 = args8331.length;
  switch(G__8336) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args8331.slice(2), 0);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5745__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq8332) {
  var G__8333 = cljs.core.first(seq8332);
  var seq8332__$1 = cljs.core.next(seq8332);
  var G__8334 = cljs.core.first(seq8332__$1);
  var seq8332__$2 = cljs.core.next(seq8332__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__8333, G__8334, seq8332__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose(var_args) {
  var args8341 = [];
  var len__5726__auto___8344 = arguments.length;
  var i__5727__auto___8345 = 0;
  while (true) {
    if (i__5727__auto___8345 < len__5726__auto___8344) {
      args8341.push(arguments[i__5727__auto___8345]);
      var G__8346 = i__5727__auto___8345 + 1;
      i__5727__auto___8345 = G__8346;
      continue;
    } else {
    }
    break;
  }
  var G__8343 = args8341.length;
  switch(G__8343) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8341.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__8348 = null;
        var G__8348__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8348__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__8348__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, sep) : rf.call(null, result, sep);
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(sepr, input) : rf.call(null, sepr, input);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__8348 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8348__0.call(this);
            case 1:
              return G__8348__1.call(this, result);
            case 2:
              return G__8348__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8348.cljs$core$IFn$_invoke$arity$0 = G__8348__0;
        G__8348.cljs$core$IFn$_invoke$arity$1 = G__8348__1;
        G__8348.cljs$core$IFn$_invoke$arity$2 = G__8348__2;
        return G__8348;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4423__auto__ = cljs.core.seq(coll);
      if (temp__4423__auto__) {
        var coll__$1 = temp__4423__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.cat;
cljs.core.mapcat = function cljs$core$mapcat(var_args) {
  var args8357 = [];
  var len__5726__auto___8362 = arguments.length;
  var i__5727__auto___8363 = 0;
  while (true) {
    if (i__5727__auto___8363 < len__5726__auto___8362) {
      args8357.push(arguments[i__5727__auto___8363]);
      var G__8364 = i__5727__auto___8363 + 1;
      i__5727__auto___8363 = G__8364;
      continue;
    } else {
    }
    break;
  }
  var G__8361 = args8357.length;
  switch(G__8361) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args8357.slice(1), 0);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5745__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq8358) {
  var G__8359 = cljs.core.first(seq8358);
  var seq8358__$1 = cljs.core.next(seq8358);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__8359, seq8358__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter(var_args) {
  var args8366 = [];
  var len__5726__auto___8370 = arguments.length;
  var i__5727__auto___8371 = 0;
  while (true) {
    if (i__5727__auto___8371 < len__5726__auto___8370) {
      args8366.push(arguments[i__5727__auto___8371]);
      var G__8372 = i__5727__auto___8371 + 1;
      i__5727__auto___8371 = G__8372;
      continue;
    } else {
    }
    break;
  }
  var G__8368 = args8366.length;
  switch(G__8368) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8366.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__8374 = null;
      var G__8374__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__8374__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__8374__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return result;
        }
      };
      G__8374 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__8374__0.call(this);
          case 1:
            return G__8374__1.call(this, result);
          case 2:
            return G__8374__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8374.cljs$core$IFn$_invoke$arity$0 = G__8374__0;
      G__8374.cljs$core$IFn$_invoke$arity$1 = G__8374__1;
      G__8374.cljs$core$IFn$_invoke$arity$2 = G__8374__2;
      return G__8374;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5571__auto___8375 = size;
        var i_8376 = 0;
        while (true) {
          if (i_8376 < n__5571__auto___8375) {
            if (cljs.core.truth_(function() {
              var G__8369 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8376);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__8369) : pred.call(null, G__8369);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8376));
            } else {
            }
            var G__8377 = i_8376 + 1;
            i_8376 = G__8377;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(f) : pred.call(null, f))) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove(var_args) {
  var args8378 = [];
  var len__5726__auto___8381 = arguments.length;
  var i__5727__auto___8382 = 0;
  while (true) {
    if (i__5727__auto___8382 < len__5726__auto___8381) {
      args8378.push(arguments[i__5727__auto___8382]);
      var G__8383 = i__5727__auto___8382 + 1;
      i__5727__auto___8382 = G__8383;
      continue;
    } else {
    }
    break;
  }
  var G__8380 = args8378.length;
  switch(G__8380) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8378.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(node) : branch_QMARK_.call(null, node)) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(node) : children.call(null, node)], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__8385_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__8385_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into(var_args) {
  var args8386 = [];
  var len__5726__auto___8391 = arguments.length;
  var i__5727__auto___8392 = 0;
  while (true) {
    if (i__5727__auto___8392 < len__5726__auto___8391) {
      args8386.push(arguments[i__5727__auto___8392]);
      var G__8393 = i__5727__auto___8392 + 1;
      i__5727__auto___8392 = G__8393;
      continue;
    } else {
    }
    break;
  }
  var G__8388 = args8386.length;
  switch(G__8388) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8386.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv(var_args) {
  var args8395 = [];
  var len__5726__auto___8403 = arguments.length;
  var i__5727__auto___8404 = 0;
  while (true) {
    if (i__5727__auto___8404 < len__5726__auto___8403) {
      args8395.push(arguments[i__5727__auto___8404]);
      var G__8405 = i__5727__auto___8404 + 1;
      i__5727__auto___8404 = G__8405;
      continue;
    } else {
    }
    break;
  }
  var G__8402 = args8395.length;
  switch(G__8402) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args8395.slice(4), 0);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5745__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(o) : f.call(null, o));
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq8396) {
  var G__8397 = cljs.core.first(seq8396);
  var seq8396__$1 = cljs.core.next(seq8396);
  var G__8398 = cljs.core.first(seq8396__$1);
  var seq8396__$2 = cljs.core.next(seq8396__$1);
  var G__8399 = cljs.core.first(seq8396__$2);
  var seq8396__$3 = cljs.core.next(seq8396__$2);
  var G__8400 = cljs.core.first(seq8396__$3);
  var seq8396__$4 = cljs.core.next(seq8396__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__8397, G__8398, G__8399, G__8400, seq8396__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(o) : pred.call(null, o))) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition(var_args) {
  var args8407 = [];
  var len__5726__auto___8410 = arguments.length;
  var i__5727__auto___8411 = 0;
  while (true) {
    if (i__5727__auto___8411 < len__5726__auto___8410) {
      args8407.push(arguments[i__5727__auto___8411]);
      var G__8412 = i__5727__auto___8411 + 1;
      i__5727__auto___8411 = G__8412;
      continue;
    } else {
    }
    break;
  }
  var G__8409 = args8407.length;
  switch(G__8409) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8407.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in(var_args) {
  var args8414 = [];
  var len__5726__auto___8418 = arguments.length;
  var i__5727__auto___8419 = 0;
  while (true) {
    if (i__5727__auto___8419 < len__5726__auto___8418) {
      args8414.push(arguments[i__5727__auto___8419]);
      var G__8420 = i__5727__auto___8419 + 1;
      i__5727__auto___8419 = G__8420;
      continue;
    } else {
    }
    break;
  }
  var G__8416 = args8414.length;
  switch(G__8416) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8414.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!(!(m__$1 == null) ? m__$1.cljs$lang$protocol_mask$partition0$ & 256 || m__$1.cljs$core$ILookup$ ? true : !m__$1.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1))) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__8422 = sentinel;
          var G__8423 = m__$2;
          var G__8424 = cljs.core.next(ks__$1);
          sentinel = G__8422;
          m__$1 = G__8423;
          ks__$1 = G__8424;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__8425, v) {
  var vec__8430 = p__8425;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8430, 0, null);
  var ks = cljs.core.nthnext(vec__8430, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in(var_args) {
  var args8431 = [];
  var len__5726__auto___8461 = arguments.length;
  var i__5727__auto___8462 = 0;
  while (true) {
    if (i__5727__auto___8462 < len__5726__auto___8461) {
      args8431.push(arguments[i__5727__auto___8462]);
      var G__8463 = i__5727__auto___8462 + 1;
      i__5727__auto___8462 = G__8463;
      continue;
    } else {
    }
    break;
  }
  var G__8440 = args8431.length;
  switch(G__8440) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args8431.slice(6), 0);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5745__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__8441, f) {
  var vec__8442 = p__8441;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8442, 0, null);
  var ks = cljs.core.nthnext(vec__8442, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__8443 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8443) : f.call(null, G__8443);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__8444, f, a) {
  var vec__8445 = p__8444;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8445, 0, null);
  var ks = cljs.core.nthnext(vec__8445, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__8446 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__8447 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8446, G__8447) : f.call(null, G__8446, G__8447);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__8448, f, a, b) {
  var vec__8449 = p__8448;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8449, 0, null);
  var ks = cljs.core.nthnext(vec__8449, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__8450 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__8451 = a;
      var G__8452 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8450, G__8451, G__8452) : f.call(null, G__8450, G__8451, G__8452);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__8453, f, a, b, c) {
  var vec__8454 = p__8453;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8454, 0, null);
  var ks = cljs.core.nthnext(vec__8454, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__8455 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__8456 = a;
      var G__8457 = b;
      var G__8458 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8455, G__8456, G__8457, G__8458) : f.call(null, G__8455, G__8456, G__8457, G__8458);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__8459, f, a, b, c, args) {
  var vec__8460 = p__8459;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8460, 0, null);
  var ks = cljs.core.nthnext(vec__8460, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq8432) {
  var G__8433 = cljs.core.first(seq8432);
  var seq8432__$1 = cljs.core.next(seq8432);
  var G__8434 = cljs.core.first(seq8432__$1);
  var seq8432__$2 = cljs.core.next(seq8432__$1);
  var G__8435 = cljs.core.first(seq8432__$2);
  var seq8432__$3 = cljs.core.next(seq8432__$2);
  var G__8436 = cljs.core.first(seq8432__$3);
  var seq8432__$4 = cljs.core.next(seq8432__$3);
  var G__8437 = cljs.core.first(seq8432__$4);
  var seq8432__$5 = cljs.core.next(seq8432__$4);
  var G__8438 = cljs.core.first(seq8432__$5);
  var seq8432__$6 = cljs.core.next(seq8432__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__8433, G__8434, G__8435, G__8436, G__8437, G__8438, seq8432__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update(var_args) {
  var args8465 = [];
  var len__5726__auto___8485 = arguments.length;
  var i__5727__auto___8486 = 0;
  while (true) {
    if (i__5727__auto___8486 < len__5726__auto___8485) {
      args8465.push(arguments[i__5727__auto___8486]);
      var G__8487 = i__5727__auto___8486 + 1;
      i__5727__auto___8486 = G__8487;
      continue;
    } else {
    }
    break;
  }
  var G__8474 = args8465.length;
  switch(G__8474) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args8465.slice(6), 0);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5745__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__8475 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8475) : f.call(null, G__8475);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__8476 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__8477 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8476, G__8477) : f.call(null, G__8476, G__8477);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__8478 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__8479 = x;
    var G__8480 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8478, G__8479, G__8480) : f.call(null, G__8478, G__8479, G__8480);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__8481 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__8482 = x;
    var G__8483 = y;
    var G__8484 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8481, G__8482, G__8483, G__8484) : f.call(null, G__8481, G__8482, G__8483, G__8484);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq8466) {
  var G__8467 = cljs.core.first(seq8466);
  var seq8466__$1 = cljs.core.next(seq8466);
  var G__8468 = cljs.core.first(seq8466__$1);
  var seq8466__$2 = cljs.core.next(seq8466__$1);
  var G__8469 = cljs.core.first(seq8466__$2);
  var seq8466__$3 = cljs.core.next(seq8466__$2);
  var G__8470 = cljs.core.first(seq8466__$3);
  var seq8466__$4 = cljs.core.next(seq8466__$3);
  var G__8471 = cljs.core.first(seq8466__$4);
  var seq8466__$5 = cljs.core.next(seq8466__$4);
  var G__8472 = cljs.core.first(seq8466__$5);
  var seq8466__$6 = cljs.core.next(seq8466__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__8467, G__8468, G__8469, G__8470, G__8471, G__8472, seq8466__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__8489 = ll - 5;
      var G__8490 = r;
      ll = G__8489;
      ret = G__8490;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__8495 = cljs.core.pv_aget(node, 0);
      var G__8496 = level - 5;
      node = G__8495;
      level = G__8496;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__8497 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__8498 = level - 5;
        node = G__8497;
        level = G__8498;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.tv_editable_root;
cljs.core.tv_editable_tail;
cljs.core.TransientVector;
cljs.core.deref;
cljs.core.pr_sequential_writer;
cljs.core.pr_writer;
cljs.core.chunked_seq;
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__8508 = init__$2;
              var G__8509 = j + i;
              var G__8510 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8508, G__8509, G__8510) : f.call(null, G__8508, G__8509, G__8510);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__8517 = j + 1;
              var G__8518 = init__$3;
              j = G__8517;
              init__$2 = G__8518;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__8519 = i + len;
        var G__8520 = init__$2;
        i = G__8519;
        init__$1 = G__8520;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(self__.root) : cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(self__.tail) : cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__8511 = init__$2;
              var G__8512 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8511, G__8512) : f.call(null, G__8511, G__8512);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__8521 = j + 1;
              var G__8522 = init__$3;
              j = G__8521;
              init__$2 = G__8522;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__8523 = i + len;
        var G__8524 = init__$2;
        i = G__8523;
        init__$1 = G__8524;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__8513 = coll__$1;
      var G__8514 = cljs.core.first_array_for_longvec(coll__$1);
      var G__8515 = 0;
      var G__8516 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__8513, G__8514, G__8515, G__8516) : cljs.core.chunked_seq.call(null, G__8513, G__8514, G__8515, G__8516);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5571__auto___8525 = len;
    var i_8526 = 0;
    while (true) {
      if (i_8526 < n__5571__auto___8525) {
        new_tail[i_8526] = self__.tail[i_8526];
        var G__8527 = i_8526 + 1;
        i_8526 = G__8527;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__8528 = null;
  var G__8528__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__8528__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__8528 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8528__2.call(this, self__, k);
      case 3:
        return G__8528__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8528.cljs$core$IFn$_invoke$arity$2 = G__8528__2;
  G__8528.cljs$core$IFn$_invoke$arity$3 = G__8528__3;
  return G__8528;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args8507) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8507)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__8529 = i + 1;
        var G__8530 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__8529;
        out = G__8530;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___8532 = arguments.length;
  var i__5727__auto___8533 = 0;
  while (true) {
    if (i__5727__auto___8533 < len__5726__auto___8532) {
      args__5733__auto__.push(arguments[i__5727__auto___8533]);
      var G__8534 = i__5727__auto___8533 + 1;
      i__5727__auto___8533 = G__8534;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq8531) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8531));
};
cljs.core.subvec;
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__8535 = self__.vec;
      var G__8536 = self__.node;
      var G__8537 = self__.i;
      var G__8538 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__8535, G__8536, G__8537, G__8538) : cljs.core.chunked_seq.call(null, G__8535, G__8536, G__8537, G__8538);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__8539 = self__.vec;
    var G__8540 = self__.i + self__.off;
    var G__8541 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__8539, G__8540, G__8541) : cljs.core.subvec.call(null, G__8539, G__8540, G__8541);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__8542 = self__.vec;
    var G__8543 = self__.i + self__.off;
    var G__8544 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__8542, G__8543, G__8544) : cljs.core.subvec.call(null, G__8542, G__8543, G__8544);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__8545 = self__.vec;
      var G__8546 = self__.node;
      var G__8547 = self__.i;
      var G__8548 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__8545, G__8546, G__8547, G__8548) : cljs.core.chunked_seq.call(null, G__8545, G__8546, G__8547, G__8548);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__8549 = self__.vec;
    var G__8550 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__8551 = end;
    var G__8552 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__8549, G__8550, G__8551, G__8552) : cljs.core.chunked_seq.call(null, G__8549, G__8550, G__8551, G__8552);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(self__.vec, self__.node, self__.i, self__.off, m) : cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__8553 = self__.vec;
    var G__8554 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__8555 = end;
    var G__8556 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__8553, G__8554, G__8555, G__8556) : cljs.core.chunked_seq.call(null, G__8553, G__8554, G__8555, G__8556);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq(var_args) {
  var args8557 = [];
  var len__5726__auto___8560 = arguments.length;
  var i__5727__auto___8561 = 0;
  while (true) {
    if (i__5727__auto___8561 < len__5726__auto___8560) {
      args8557.push(arguments[i__5727__auto___8561]);
      var G__8562 = i__5727__auto___8561 + 1;
      i__5727__auto___8561 = G__8562;
      continue;
    } else {
    }
    break;
  }
  var G__8559 = args8557.length;
  switch(G__8559) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8557.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.build_subvec;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__8565 = init__$1;
        var G__8566 = j;
        var G__8567 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8565, G__8566, G__8567) : f.call(null, G__8565, G__8566, G__8567);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__8584 = i + 1;
        var G__8585 = j + 1;
        var G__8586 = init__$2;
        i = G__8584;
        j = G__8585;
        init__$1 = G__8586;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__8568 = self__.meta;
  var G__8569 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__8570 = self__.start;
  var G__8571 = function() {
    var x__4999__auto__ = self__.end;
    var y__5000__auto__ = v_pos + 1;
    return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
  }();
  var G__8572 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__8568, G__8569, G__8570, G__8571, G__8572) : cljs.core.build_subvec.call(null, G__8568, G__8569, G__8570, G__8571, G__8572);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__8573 = self__.meta;
    var G__8574 = self__.v;
    var G__8575 = self__.start;
    var G__8576 = self__.end - 1;
    var G__8577 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__8573, G__8574, G__8575, G__8576, G__8577) : cljs.core.build_subvec.call(null, G__8573, G__8574, G__8575, G__8576, G__8577);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(meta__$1, self__.v, self__.start, self__.end, self__.__hash) : cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__8579 = self__.meta;
  var G__8580 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__8581 = self__.start;
  var G__8582 = self__.end + 1;
  var G__8583 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__8579, G__8580, G__8581, G__8582, G__8583) : cljs.core.build_subvec.call(null, G__8579, G__8580, G__8581, G__8582, G__8583);
};
cljs.core.Subvec.prototype.call = function() {
  var G__8587 = null;
  var G__8587__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__8587__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__8587 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8587__2.call(this, self__, k);
      case 3:
        return G__8587__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8587.cljs$core$IFn$_invoke$arity$2 = G__8587__2;
  G__8587.cljs$core$IFn$_invoke$arity$3 = G__8587__3;
  return G__8587;
}();
cljs.core.Subvec.prototype.apply = function(self__, args8564) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8564)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__8588 = meta;
      var G__8589 = v.v;
      var G__8590 = v.start + start;
      var G__8591 = v.start + end;
      var G__8592 = __hash;
      meta = G__8588;
      v = G__8589;
      start = G__8590;
      end = G__8591;
      __hash = G__8592;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec(var_args) {
  var args8593 = [];
  var len__5726__auto___8596 = arguments.length;
  var i__5727__auto___8597 = 0;
  while (true) {
    if (i__5727__auto___8597 < len__5726__auto___8596) {
      args8593.push(arguments[i__5727__auto___8597]);
      var G__8598 = i__5727__auto___8597 + 1;
      i__5727__auto___8597 = G__8598;
      continue;
    } else {
    }
    break;
  }
  var G__8595 = args8593.length;
  switch(G__8595) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8593.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode({}, cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__8611 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__8612 = level - 5;
        node = G__8611;
        level = G__8612;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__8616 = null;
  var G__8616__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8616__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8616 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8616__2.call(this, self__, k);
      case 3:
        return G__8616__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8616.cljs$core$IFn$_invoke$arity$2 = G__8616__2;
  G__8616.cljs$core$IFn$_invoke$arity$3 = G__8616__3;
  return G__8616;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args8613) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8613)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueIter = function(fseq, riter) {
  this.fseq = fseq;
  this.riter = riter;
};
cljs.core.PersistentQueueIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__4668__auto__ = cljs.core.some_QMARK_(self__.fseq) && cljs.core.seq(self__.fseq);
  if (or__4668__auto__) {
    return or__4668__auto__;
  } else {
    var and__4656__auto__ = cljs.core.some_QMARK_(self__.riter);
    if (and__4656__auto__) {
      return self__.riter.hasNext();
    } else {
      return and__4656__auto__;
    }
  }
};
cljs.core.PersistentQueueIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (cljs.core.some_QMARK_(self__.fseq)) {
    var ret = cljs.core.first(self__.fseq);
    self__.fseq = cljs.core.next(self__.fseq);
    return ret;
  } else {
    if (cljs.core.some_QMARK_(self__.riter) && self__.riter.hasNext()) {
      return self__.riter.next();
    } else {
      throw new Error("No such element");
    }
  }
};
cljs.core.PersistentQueueIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.PersistentQueueIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "fseq", "fseq", -1466412450, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "riter", "riter", -237834262, null)], null);
};
cljs.core.PersistentQueueIter.cljs$lang$type = true;
cljs.core.PersistentQueueIter.cljs$lang$ctorStr = "cljs.core/PersistentQueueIter";
cljs.core.PersistentQueueIter.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/PersistentQueueIter");
};
cljs.core.__GT_PersistentQueueIter = function cljs$core$__GT_PersistentQueueIter(fseq, riter) {
  return new cljs.core.PersistentQueueIter(fseq, riter);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4423__auto__ = cljs.core.next(self__.front);
  if (temp__4423__auto__) {
    var f1 = temp__4423__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueIter(self__.front, cljs.core._iterator(self__.rear));
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4423__auto__ = cljs.core.next(self__.front);
    if (temp__4423__auto__) {
      var f1 = temp__4423__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4668__auto__ = self__.front;
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4668__auto__ = self__.rear;
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__8617 = i + incr;
        i = G__8617;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__8618 = i + 1;
      var G__8619 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__8618;
      out = G__8619;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i_8624 = 0;
  while (true) {
    if (i_8624 < l) {
      var k_8625 = ks[i_8624];
      new_obj[k_8625] = obj[k_8625];
      var G__8626 = i_8624 + 1;
      i_8624 = G__8626;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__8629 = init__$1;
        var G__8630 = k;
        var G__8631 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8629, G__8630, G__8631) : f.call(null, G__8629, G__8630, G__8631);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__8632 = cljs.core.rest(keys__$1);
        var G__8633 = init__$2;
        keys__$1 = G__8632;
        init__$1 = G__8633;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__8627_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__8627_SHARP_, self__.strobj[p1__8627_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__8634 = null;
  var G__8634__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8634__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8634 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8634__2.call(this, self__, k);
      case 3:
        return G__8634__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8634.cljs$core$IFn$_invoke$arity$2 = G__8634__2;
  G__8634.cljs$core$IFn$_invoke$arity$3 = G__8634__3;
  return G__8634;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args8628) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8628)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.RecordIter = function(i, record, base_count, fields, ext_map_iter) {
  this.i = i;
  this.record = record;
  this.base_count = base_count;
  this.fields = fields;
  this.ext_map_iter = ext_map_iter;
};
cljs.core.RecordIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__4668__auto__ = self__.i < self__.base_count;
  if (or__4668__auto__) {
    return or__4668__auto__;
  } else {
    return self__.ext_map_iter.hasNext();
  }
};
cljs.core.RecordIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.i < self__.base_count) {
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(self__.fields, self__.i);
    self__.i = self__.i + 1;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.record, k)], null);
  } else {
    return self__.ext_map_iter.next();
  }
};
cljs.core.RecordIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.RecordIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "record", "record", 861424668, null), new cljs.core.Symbol(null, "base-count", "base-count", -1180647182, null), new cljs.core.Symbol(null, "fields", "fields", -291534703, null), new cljs.core.Symbol(null, 
  "ext-map-iter", "ext-map-iter", -1215982757, null)], null);
};
cljs.core.RecordIter.cljs$lang$type = true;
cljs.core.RecordIter.cljs$lang$ctorStr = "cljs.core/RecordIter";
cljs.core.RecordIter.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/RecordIter");
};
cljs.core.__GT_RecordIter = function cljs$core$__GT_RecordIter(i, record, base_count, fields, ext_map_iter) {
  return new cljs.core.RecordIter(i, record, base_count, fields, ext_map_iter);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__8637 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8637, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8637, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__8638 = i + 2;
        i = G__8638;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Keyword && kstr === arr[i].fqn) {
        return i;
      } else {
        var G__8639 = i + 2;
        i = G__8639;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Symbol && kstr === arr[i].str) {
        return i;
      } else {
        var G__8640 = i + 2;
        i = G__8640;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__8641 = i + 2;
        i = G__8641;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__8642 = i + 2;
        i = G__8642;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_8643 = 0;
  while (true) {
    if (i_8643 < l) {
      narr[i_8643] = arr[i_8643];
      var G__8644 = i_8643 + 1;
      i_8643 = G__8644;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.TransientArrayMap;
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.keys;
cljs.core.vals;
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null)], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__8646 = cljs.core.seq(coll);
  var chunk__8647 = null;
  var count__8648 = 0;
  var i__8649 = 0;
  while (true) {
    if (i__8649 < count__8648) {
      var vec__8650 = chunk__8647.cljs$core$IIndexed$_nth$arity$2(null, i__8649);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8650, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8650, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__8659 = seq__8646;
      var G__8660 = chunk__8647;
      var G__8661 = count__8648;
      var G__8662 = i__8649 + 1;
      seq__8646 = G__8659;
      chunk__8647 = G__8660;
      count__8648 = G__8661;
      i__8649 = G__8662;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8646);
      if (temp__4425__auto__) {
        var seq__8646__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8646__$1)) {
          var c__5471__auto__ = cljs.core.chunk_first(seq__8646__$1);
          var G__8663 = cljs.core.chunk_rest(seq__8646__$1);
          var G__8664 = c__5471__auto__;
          var G__8665 = cljs.core.count(c__5471__auto__);
          var G__8666 = 0;
          seq__8646 = G__8663;
          chunk__8647 = G__8664;
          count__8648 = G__8665;
          i__8649 = G__8666;
          continue;
        } else {
          var vec__8651 = cljs.core.first(seq__8646__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8651, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8651, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__8667 = cljs.core.next(seq__8646__$1);
          var G__8668 = null;
          var G__8669 = 0;
          var G__8670 = 0;
          seq__8646 = G__8667;
          chunk__8647 = G__8668;
          count__8648 = G__8669;
          i__8649 = G__8670;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__8652 = init__$1;
        var G__8653 = self__.arr[i];
        var G__8654 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8652, G__8653, G__8654) : f.call(null, G__8652, G__8653, G__8654);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__8671 = i + 2;
        var G__8672 = init__$2;
        i = G__8671;
        init__$1 = G__8672;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (!(other == null) ? other.cljs$lang$protocol_mask$partition0$ & 1024 || other.cljs$core$IMap$ ? true : false : false) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__8673 = i + 2;
              i = G__8673;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__8674 = s + 2;
            var G__8675 = d;
            s = G__8674;
            d = G__8675;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__8676 = s + 2;
            var G__8677 = d + 2;
            s = G__8676;
            d = G__8677;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__8658 = cljs.core.aclone(self__.arr);
        G__8658[idx + 1] = v;
        return G__8658;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__8678 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__8679 = cljs.core.next(es);
          ret = G__8678;
          es = G__8679;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__8680 = null;
  var G__8680__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8680__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8680 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8680__2.call(this, self__, k);
      case 3:
        return G__8680__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8680.cljs$core$IFn$_invoke$arity$2 = G__8680__2;
  G__8680.cljs$core$IFn$_invoke$arity$3 = G__8680__3;
  return G__8680;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args8645) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8645)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_8681 = 0;
    while (true) {
      if (i_8681 < arr__$1.length) {
        var k_8682 = arr__$1[i_8681];
        var v_8683 = arr__$1[i_8681 + 1];
        var idx_8684 = cljs.core.array_index_of(ret, k_8682);
        if (idx_8684 === -1) {
          ret.push(k_8682);
          ret.push(v_8683);
        } else {
        }
        var G__8685 = i_8681 + 2;
        i_8681 = G__8685;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var arr__$3 = function() {
    var cnt = arr__$2.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
  }();
  return arr__$3;
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.array__GT_transient_hash_map;
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return cljs.core._assoc_BANG_(tcoll__$1, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4423__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          var G__8688 = cljs.core.next(es);
          var G__8689 = cljs.core._assoc_BANG_(tcoll__$2, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__8688;
          tcoll__$2 = G__8689;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(self__.len, self__.arr) : cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__8687_8690 = self__.arr;
      G__8687_8690.pop();
      G__8687_8690.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "len", "len", -1230778691, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.TransientHashMap;
cljs.core.PersistentHashMap;
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__8691 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__8692 = i + 2;
      out = G__8691;
      i = G__8692;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.create_inode_seq;
cljs.core.create_array_node_seq;
cljs.core.reset_BANG_;
cljs.core.create_node;
cljs.core.atom;
cljs.core.deref;
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set(var_args) {
  var args8693 = [];
  var len__5726__auto___8698 = arguments.length;
  var i__5727__auto___8699 = 0;
  while (true) {
    if (i__5727__auto___8699 < len__5726__auto___8698) {
      args8693.push(arguments[i__5727__auto___8699]);
      var G__8700 = i__5727__auto___8699 + 1;
      i__5727__auto___8699 = G__8700;
      continue;
    } else {
    }
    break;
  }
  var G__8695 = args8693.length;
  switch(G__8695) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8693.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__8696 = cljs.core.aclone(arr);
  G__8696[i] = a;
  return G__8696;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__8697 = cljs.core.aclone(arr);
  G__8697[i] = a;
  G__8697[j] = b;
  return G__8697;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set(var_args) {
  var args8702 = [];
  var len__5726__auto___8705 = arguments.length;
  var i__5727__auto___8706 = 0;
  while (true) {
    if (i__5727__auto___8706 < len__5726__auto___8705) {
      args8702.push(arguments[i__5727__auto___8706]);
      var G__8707 = i__5727__auto___8706 + 1;
      i__5727__auto___8706 = G__8707;
      continue;
    } else {
    }
    break;
  }
  var G__8704 = args8702.length;
  switch(G__8704) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8702.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__8712 = init__$1;
          var G__8713 = k;
          var G__8714 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8712, G__8713, G__8714) : f.call(null, G__8712, G__8713, G__8714);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__8715 = i + 2;
        var G__8716 = init__$2;
        i = G__8715;
        init__$1 = G__8716;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode;
cljs.core.NodeIterator = function(arr, i, next_entry, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_entry = next_entry;
  this.next_iter = next_iter;
};
cljs.core.NodeIterator.prototype.advance = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (self__.i < len) {
      var key = self__.arr[self__.i];
      var node_or_val = self__.arr[self__.i + 1];
      var found = cljs.core.some_QMARK_(key) ? self__.next_entry = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, node_or_val], null) : cljs.core.some_QMARK_(node_or_val) ? function() {
        var new_iter = cljs.core._iterator(node_or_val);
        if (new_iter.hasNext()) {
          return self__.next_iter = new_iter;
        } else {
          return false;
        }
      }() : false;
      self__.i = self__.i + 2;
      if (found) {
        return true;
      } else {
        continue;
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core.NodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var or__4668__auto__ = cljs.core.some_QMARK_(self__.next_entry);
  if (or__4668__auto__) {
    return or__4668__auto__;
  } else {
    var or__4668__auto____$1 = cljs.core.some_QMARK_(self__.next_iter);
    if (or__4668__auto____$1) {
      return or__4668__auto____$1;
    } else {
      return this$.advance();
    }
  }
};
cljs.core.NodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.some_QMARK_(self__.next_entry)) {
    var ret = self__.next_entry;
    self__.next_entry = null;
    return ret;
  } else {
    if (cljs.core.some_QMARK_(self__.next_iter)) {
      var ret = self__.next_iter.next();
      if (self__.next_iter.hasNext()) {
      } else {
        self__.next_iter = null;
      }
      return ret;
    } else {
      if (this$.advance()) {
        return this$.next();
      } else {
        throw new Error("No such element");
      }
    }
  }
};
cljs.core.NodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.NodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-entry", "next-entry", 1091342476, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.NodeIterator.cljs$lang$type = true;
cljs.core.NodeIterator.cljs$lang$ctorStr = "cljs.core/NodeIterator";
cljs.core.NodeIterator.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/NodeIterator");
};
cljs.core.__GT_NodeIterator = function cljs$core$__GT_NodeIterator(arr, i, next_entry, next_iter) {
  return new cljs.core.NodeIterator(arr, i, next_entry, next_iter);
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_8730 = 0;
        var j_8731 = 0;
        while (true) {
          if (i_8730 < 32) {
            if ((self__.bitmap >>> i_8730 & 1) === 0) {
              var G__8732 = i_8730 + 1;
              var G__8733 = j_8731;
              i_8730 = G__8732;
              j_8731 = G__8733;
              continue;
            } else {
              nodes[i_8730] = !(self__.arr[j_8731] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_8731]), self__.arr[j_8731], self__.arr[j_8731 + 1], added_leaf_QMARK_) : self__.arr[j_8731 + 1];
              var G__8734 = i_8730 + 1;
              var G__8735 = j_8731 + 2;
              i_8730 = G__8734;
              j_8731 = G__8735;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__8717 = edit__$1;
          var G__8718 = shift + 5;
          var G__8719 = key_or_nil;
          var G__8720 = val_or_node;
          var G__8721 = hash;
          var G__8722 = key;
          var G__8723 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__8717, G__8718, G__8719, G__8720, G__8721, G__8722, G__8723) : cljs.core.create_node.call(null, G__8717, G__8718, G__8719, G__8720, G__8721, G__8722, G__8723);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_8736 = 0;
      var j_8737 = 0;
      while (true) {
        if (i_8736 < 32) {
          if ((self__.bitmap >>> i_8736 & 1) === 0) {
            var G__8738 = i_8736 + 1;
            var G__8739 = j_8737;
            i_8736 = G__8738;
            j_8737 = G__8739;
            continue;
          } else {
            nodes[i_8736] = !(self__.arr[j_8737] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_8737]), self__.arr[j_8737], self__.arr[j_8737 + 1], added_leaf_QMARK_) : self__.arr[j_8737 + 1];
            var G__8740 = i_8736 + 1;
            var G__8741 = j_8737 + 2;
            i_8736 = G__8740;
            j_8737 = G__8741;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__8724 = shift + 5;
          var G__8725 = key_or_nil;
          var G__8726 = val_or_node;
          var G__8727 = hash;
          var G__8728 = key;
          var G__8729 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__8724, G__8725, G__8726, G__8727, G__8728, G__8729) : cljs.core.create_node.call(null, G__8724, G__8725, G__8726, G__8727, G__8728, G__8729);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$ = true;
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__8742 = i + 1;
        var G__8743 = j + 2;
        var G__8744 = bitmap | 1 << i;
        i = G__8742;
        j = G__8743;
        bitmap = G__8744;
        continue;
      } else {
        var G__8745 = i + 1;
        var G__8746 = j;
        var G__8747 = bitmap;
        i = G__8745;
        j = G__8746;
        bitmap = G__8747;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNodeIterator = function(arr, i, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_iter = next_iter;
};
cljs.core.ArrayNodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (!(cljs.core.some_QMARK_(self__.next_iter) && self__.next_iter.hasNext())) {
      if (self__.i < len) {
        var node = self__.arr[self__.i];
        self__.i = self__.i + 1;
        if (cljs.core.some_QMARK_(node)) {
          self__.next_iter = cljs.core._iterator(node);
        } else {
        }
        continue;
      } else {
        return false;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.ArrayNodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (this$.hasNext()) {
    return self__.next_iter.next();
  } else {
    throw new Error("No such element");
  }
};
cljs.core.ArrayNodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayNodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNodeIterator.cljs$lang$type = true;
cljs.core.ArrayNodeIterator.cljs$lang$ctorStr = "cljs.core/ArrayNodeIterator";
cljs.core.ArrayNodeIterator.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ArrayNodeIterator");
};
cljs.core.__GT_ArrayNodeIterator = function cljs$core$__GT_ArrayNodeIterator(arr, i, next_iter) {
  return new cljs.core.ArrayNodeIterator(arr, i, next_iter);
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
        } else {
          var G__8748 = i + 1;
          var G__8749 = init__$2;
          i = G__8748;
          init__$1 = G__8749;
          continue;
        }
      } else {
        var G__8750 = i + 1;
        var G__8751 = init__$1;
        i = G__8750;
        init__$1 = G__8751;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.cljs$core$IIterable$ = true;
cljs.core.ArrayNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeIterator(self__.arr, 0, null);
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__8752 = i + 2;
        i = G__8752;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$ = true;
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node(var_args) {
  var args8753 = [];
  var len__5726__auto___8756 = arguments.length;
  var i__5727__auto___8757 = 0;
  while (true) {
    if (i__5727__auto___8757 < len__5726__auto___8756) {
      args8753.push(arguments[i__5727__auto___8757]);
      var G__8758 = i__5727__auto___8757 + 1;
      i__5727__auto___8757 = G__8758;
      continue;
    } else {
    }
    break;
  }
  var G__8755 = args8753.length;
  switch(G__8755) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8753.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__8760 = self__.nodes;
    var G__8761 = self__.i + 2;
    var G__8762 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__8760, G__8761, G__8762) : cljs.core.create_inode_seq.call(null, G__8760, G__8761, G__8762);
  } else {
    var G__8763 = self__.nodes;
    var G__8764 = self__.i;
    var G__8765 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__8763, G__8764, G__8765) : cljs.core.create_inode_seq.call(null, G__8763, G__8764, G__8765);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq(var_args) {
  var args8766 = [];
  var len__5726__auto___8769 = arguments.length;
  var i__5727__auto___8770 = 0;
  while (true) {
    if (i__5727__auto___8770 < len__5726__auto___8769) {
      args8766.push(arguments[i__5727__auto___8770]);
      var G__8771 = i__5727__auto___8770 + 1;
      i__5727__auto___8770 = G__8771;
      continue;
    } else {
    }
    break;
  }
  var G__8768 = args8766.length;
  switch(G__8768) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8766.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4423__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4423__auto__)) {
            var node = temp__4423__auto__;
            var temp__4423__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4423__auto____$1)) {
              var node_seq = temp__4423__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__8773 = j + 2;
              j = G__8773;
              continue;
            }
          } else {
            var G__8774 = j + 2;
            j = G__8774;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__8775 = null;
  var G__8776 = self__.nodes;
  var G__8777 = self__.i;
  var G__8778 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__8775, G__8776, G__8777, G__8778) : cljs.core.create_array_node_seq.call(null, G__8775, G__8776, G__8777, G__8778);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq(var_args) {
  var args8779 = [];
  var len__5726__auto___8782 = arguments.length;
  var i__5727__auto___8783 = 0;
  while (true) {
    if (i__5727__auto___8783 < len__5726__auto___8782) {
      args8779.push(arguments[i__5727__auto___8783]);
      var G__8784 = i__5727__auto___8783 + 1;
      i__5727__auto___8783 = G__8784;
      continue;
    } else {
    }
    break;
  }
  var G__8781 = args8779.length;
  switch(G__8781) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8779.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4423__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4423__auto__)) {
          var nj = temp__4423__auto__;
          var temp__4423__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4423__auto____$1)) {
            var ns = temp__4423__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__8786 = j + 1;
            j = G__8786;
            continue;
          }
        } else {
          var G__8787 = j + 1;
          j = G__8787;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.TransientHashMap;
cljs.core.HashMapIter = function(nil_val, root_iter, seen) {
  this.nil_val = nil_val;
  this.root_iter = root_iter;
  this.seen = seen;
};
cljs.core.HashMapIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.seen && self__.root_iter.hasNext();
};
cljs.core.HashMapIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!self__.seen) {
    self__.seen = true;
    return self__.nil_val;
  } else {
    return self__.root_iter.next();
  }
};
cljs.core.HashMapIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashMapIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.Symbol(null, "root-iter", "root-iter", 1974672108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "seen", "seen", 1121531738, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashMapIter.cljs$lang$type = true;
cljs.core.HashMapIter.cljs$lang$ctorStr = "cljs.core/HashMapIter";
cljs.core.HashMapIter.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/HashMapIter");
};
cljs.core.__GT_HashMapIter = function cljs$core$__GT_HashMapIter(nil_val, root_iter, seen) {
  return new cljs.core.HashMapIter(nil_val, root_iter, seen);
};
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__8789 = cljs.core.seq(coll);
  var chunk__8790 = null;
  var count__8791 = 0;
  var i__8792 = 0;
  while (true) {
    if (i__8792 < count__8791) {
      var vec__8793 = chunk__8790.cljs$core$IIndexed$_nth$arity$2(null, i__8792);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8793, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8793, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__8797 = seq__8789;
      var G__8798 = chunk__8790;
      var G__8799 = count__8791;
      var G__8800 = i__8792 + 1;
      seq__8789 = G__8797;
      chunk__8790 = G__8798;
      count__8791 = G__8799;
      i__8792 = G__8800;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8789);
      if (temp__4425__auto__) {
        var seq__8789__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8789__$1)) {
          var c__5471__auto__ = cljs.core.chunk_first(seq__8789__$1);
          var G__8801 = cljs.core.chunk_rest(seq__8789__$1);
          var G__8802 = c__5471__auto__;
          var G__8803 = cljs.core.count(c__5471__auto__);
          var G__8804 = 0;
          seq__8789 = G__8801;
          chunk__8790 = G__8802;
          count__8791 = G__8803;
          i__8792 = G__8804;
          continue;
        } else {
          var vec__8794 = cljs.core.first(seq__8789__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8794, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8794, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__8805 = cljs.core.next(seq__8789__$1);
          var G__8806 = null;
          var G__8807 = 0;
          var G__8808 = 0;
          seq__8789 = G__8805;
          chunk__8790 = G__8806;
          count__8791 = G__8807;
          i__8792 = G__8808;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, null, self__.nil_val) : f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var root_iter = self__.root ? cljs.core._iterator(self__.root) : cljs.core.nil_iter;
  if (self__.has_nil_QMARK_) {
    return new cljs.core.HashMapIter(self__.nil_val, root_iter, false);
  } else {
    return root_iter;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__8809 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__8810 = cljs.core.next(es);
          ret = G__8809;
          es = G__8810;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__8811 = null;
  var G__8811__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8811__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8811 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8811__2.call(this, self__, k);
      case 3:
        return G__8811__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8811.cljs$core$IFn$_invoke$arity$2 = G__8811__2;
  G__8811.cljs$core$IFn$_invoke$arity$3 = G__8811__3;
  return G__8811;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args8788) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8788)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", 
  "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__8812 = i + 2;
      var G__8813 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__8812;
      ret = G__8813;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__8814 = i + 1;
      var G__8815 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__8814;
      out = G__8815;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return tcoll.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4423__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          var G__8817 = cljs.core.next(es);
          var G__8818 = tcoll__$1.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__8817;
          tcoll__$1 = G__8818;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, 
  "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__8819 = ascending_QMARK_ ? t.left : t.right;
      var G__8820 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__8819;
      stack__$1 = G__8820;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "stack", "stack", 847125597, null), cljs.core.with_meta(new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, 
  "cnt", "cnt", 1924510325, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.RedNode;
cljs.core.BlackNode;
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = function() {
      var G__8830 = init__$1;
      var G__8831 = node.key;
      var G__8832 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8830, G__8831, G__8832) : f.call(null, G__8830, G__8831, G__8832);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$3) : cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__8834 = null;
  var G__8834__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8834__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8834 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8834__2.call(this, self__, k);
      case 3:
        return G__8834__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8834.cljs$core$IFn$_invoke$arity$2 = G__8834__2;
  G__8834.cljs$core$IFn$_invoke$arity$3 = G__8834__3;
  return G__8834;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args8833) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8833)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__8836 = null;
  var G__8836__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8836__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8836 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8836__2.call(this, self__, k);
      case 3:
        return G__8836__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8836.cljs$core$IFn$_invoke$arity$2 = G__8836__2;
  G__8836.cljs$core$IFn$_invoke$arity$3 = G__8836__3;
  return G__8836;
}();
cljs.core.RedNode.prototype.apply = function(self__, args8835) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8835)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__8849 = k;
      var G__8850 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__8849, G__8850) : comp.call(null, G__8849, G__8850);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__8869 = k;
      var G__8870 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__8869, G__8870) : comp.call(null, G__8869, G__8870);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, tk) : comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.key;
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__8880 = cljs.core.seq(coll);
  var chunk__8881 = null;
  var count__8882 = 0;
  var i__8883 = 0;
  while (true) {
    if (i__8883 < count__8882) {
      var vec__8884 = chunk__8881.cljs$core$IIndexed$_nth$arity$2(null, i__8883);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8884, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8884, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__8890 = seq__8880;
      var G__8891 = chunk__8881;
      var G__8892 = count__8882;
      var G__8893 = i__8883 + 1;
      seq__8880 = G__8890;
      chunk__8881 = G__8891;
      count__8882 = G__8892;
      i__8883 = G__8893;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8880);
      if (temp__4425__auto__) {
        var seq__8880__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8880__$1)) {
          var c__5471__auto__ = cljs.core.chunk_first(seq__8880__$1);
          var G__8894 = cljs.core.chunk_rest(seq__8880__$1);
          var G__8895 = c__5471__auto__;
          var G__8896 = cljs.core.count(c__5471__auto__);
          var G__8897 = 0;
          seq__8880 = G__8894;
          chunk__8881 = G__8895;
          count__8882 = G__8896;
          i__8883 = G__8897;
          continue;
        } else {
          var vec__8885 = cljs.core.first(seq__8880__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8885, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8885, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__8898 = cljs.core.next(seq__8880__$1);
          var G__8899 = null;
          var G__8900 = 0;
          var G__8901 = 0;
          seq__8880 = G__8898;
          chunk__8881 = G__8899;
          count__8882 = G__8900;
          i__8883 = G__8901;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__8886 = k;
        var G__8887 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__8886, G__8887) : self__.comp.call(null, G__8886, G__8887);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__8902 = t.left;
          t = G__8902;
          continue;
        } else {
          var G__8903 = t.right;
          t = G__8903;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__8904 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__8905 = cljs.core.next(es);
          ret = G__8904;
          es = G__8905;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__8906 = null;
  var G__8906__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8906__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8906 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8906__2.call(this, self__, k);
      case 3:
        return G__8906__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8906.cljs$core$IFn$_invoke$arity$2 = G__8906__2;
  G__8906.cljs$core$IFn$_invoke$arity$3 = G__8906__3;
  return G__8906;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args8879) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8879)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__8888 = k;
          var G__8889 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__8888, G__8889) : self__.comp.call(null, G__8888, G__8889);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__8907 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__8908 = t.left;
              stack = G__8907;
              t = G__8908;
              continue;
            } else {
              var G__8909 = stack;
              var G__8910 = t.right;
              stack = G__8909;
              t = G__8910;
              continue;
            }
          } else {
            if (c > 0) {
              var G__8911 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__8912 = t.right;
              stack = G__8911;
              t = G__8912;
              continue;
            } else {
              var G__8913 = stack;
              var G__8914 = t.left;
              stack = G__8913;
              t = G__8914;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(entry) : cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___8916 = arguments.length;
  var i__5727__auto___8917 = 0;
  while (true) {
    if (i__5727__auto___8917 < len__5726__auto___8916) {
      args__5733__auto__.push(arguments[i__5727__auto___8917]);
      var G__8918 = i__5727__auto___8917 + 1;
      i__5727__auto___8917 = G__8918;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__8919 = cljs.core.nnext(in$);
      var G__8920 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__8919;
      out = G__8920;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq8915) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8915));
};
cljs.core.array_map = function cljs$core$array_map(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___8922 = arguments.length;
  var i__5727__auto___8923 = 0;
  while (true) {
    if (i__5727__auto___8923 < len__5726__auto___8922) {
      args__5733__auto__.push(arguments[i__5727__auto___8923]);
      var G__8924 = i__5727__auto___8923 + 1;
      i__5727__auto___8923 = G__8924;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq8921) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8921));
};
cljs.core.obj_map = function cljs$core$obj_map(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___8928 = arguments.length;
  var i__5727__auto___8929 = 0;
  while (true) {
    if (i__5727__auto___8929 < len__5726__auto___8928) {
      args__5733__auto__.push(arguments[i__5727__auto___8929]);
      var G__8930 = i__5727__auto___8929 + 1;
      i__5727__auto___8929 = G__8930;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = {};
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__8931 = cljs.core.nnext(kvs);
      kvs = G__8931;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq8925) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8925));
};
cljs.core.sorted_map = function cljs$core$sorted_map(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___8933 = arguments.length;
  var i__5727__auto___8934 = 0;
  while (true) {
    if (i__5727__auto___8934 < len__5726__auto___8933) {
      args__5733__auto__.push(arguments[i__5727__auto___8934]);
      var G__8935 = i__5727__auto___8934 + 1;
      i__5727__auto___8934 = G__8935;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__8936 = cljs.core.nnext(in$);
      var G__8937 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__8936;
      out = G__8937;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq8932) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8932));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___8940 = arguments.length;
  var i__5727__auto___8941 = 0;
  while (true) {
    if (i__5727__auto___8941 < len__5726__auto___8940) {
      args__5733__auto__.push(arguments[i__5727__auto___8941]);
      var G__8942 = i__5727__auto___8941 + 1;
      i__5727__auto___8941 = G__8942;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 1 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(1), 0) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5734__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__8943 = cljs.core.nnext(in$);
      var G__8944 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__8943;
      out = G__8944;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq8938) {
  var G__8939 = cljs.core.first(seq8938);
  var seq8938__$1 = cljs.core.next(seq8938);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__8939, seq8938__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4425__auto__ = cljs.core.seq(hash_map);
  if (temp__4425__auto__) {
    var mseq = temp__4425__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4425__auto__ = cljs.core.seq(hash_map);
  if (temp__4425__auto__) {
    var mseq = temp__4425__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___8952 = arguments.length;
  var i__5727__auto___8953 = 0;
  while (true) {
    if (i__5727__auto___8953 < len__5726__auto___8952) {
      args__5733__auto__.push(arguments[i__5727__auto___8953]);
      var G__8954 = i__5727__auto___8953 + 1;
      i__5727__auto___8953 = G__8954;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__8949_SHARP_, p2__8950_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__4668__auto__ = p1__8949_SHARP_;
        if (cljs.core.truth_(or__4668__auto__)) {
          return or__4668__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__8950_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq8951) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8951));
};
cljs.core.merge_with = function cljs$core$merge_with(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___8959 = arguments.length;
  var i__5727__auto___8960 = 0;
  while (true) {
    if (i__5727__auto___8960 < len__5726__auto___8959) {
      args__5733__auto__.push(arguments[i__5727__auto___8960]);
      var G__8961 = i__5727__auto___8960 + 1;
      i__5727__auto___8960 = G__8961;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 1 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(1), 0) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5734__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__8957 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__8958 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8957, G__8958) : f.call(null, G__8957, G__8958);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__4668__auto__ = m1;
          if (cljs.core.truth_(or__4668__auto__)) {
            return or__4668__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq8955) {
  var G__8956 = cljs.core.first(seq8955);
  var seq8955__$1 = cljs.core.next(seq8955);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__8956, seq8955__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__8962 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__8963 = cljs.core.next(keys);
      ret = G__8962;
      keys = G__8963;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.TransientHashSet;
cljs.core.HashSetIter = function(iter) {
  this.iter = iter;
};
cljs.core.HashSetIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.iter.hasNext();
};
cljs.core.HashSetIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.iter.hasNext()) {
    return self__.iter.next().tail[0];
  } else {
    throw new Error("No such element");
  }
};
cljs.core.HashSetIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashSetIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.HashSetIter.cljs$lang$type = true;
cljs.core.HashSetIter.cljs$lang$ctorStr = "cljs.core/HashSetIter";
cljs.core.HashSetIter.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/HashSetIter");
};
cljs.core.__GT_HashSetIter = function cljs$core$__GT_HashSetIter(iter) {
  return new cljs.core.HashSetIter(iter);
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__8966 = cljs.core.seq(coll);
  var chunk__8967 = null;
  var count__8968 = 0;
  var i__8969 = 0;
  while (true) {
    if (i__8969 < count__8968) {
      var vec__8970 = chunk__8967.cljs$core$IIndexed$_nth$arity$2(null, i__8969);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8970, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8970, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__8972 = seq__8966;
      var G__8973 = chunk__8967;
      var G__8974 = count__8968;
      var G__8975 = i__8969 + 1;
      seq__8966 = G__8972;
      chunk__8967 = G__8973;
      count__8968 = G__8974;
      i__8969 = G__8975;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8966);
      if (temp__4425__auto__) {
        var seq__8966__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8966__$1)) {
          var c__5471__auto__ = cljs.core.chunk_first(seq__8966__$1);
          var G__8976 = cljs.core.chunk_rest(seq__8966__$1);
          var G__8977 = c__5471__auto__;
          var G__8978 = cljs.core.count(c__5471__auto__);
          var G__8979 = 0;
          seq__8966 = G__8976;
          chunk__8967 = G__8977;
          count__8968 = G__8978;
          i__8969 = G__8979;
          continue;
        } else {
          var vec__8971 = cljs.core.first(seq__8966__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8971, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8971, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__8980 = cljs.core.next(seq__8966__$1);
          var G__8981 = null;
          var G__8982 = 0;
          var G__8983 = 0;
          seq__8966 = G__8980;
          chunk__8967 = G__8981;
          count__8968 = G__8982;
          i__8969 = G__8983;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.HashSetIter(cljs.core._iterator(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__8964_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__8964_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__8984 = null;
  var G__8984__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8984__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8984 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8984__2.call(this, self__, k);
      case 3:
        return G__8984__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8984.cljs$core$IFn$_invoke$arity$2 = G__8984__2;
  G__8984.cljs$core$IFn$_invoke$arity$3 = G__8984__3;
  return G__8984;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args8965) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8965)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__8985 = i + 1;
        var G__8986 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__8985;
        out = G__8986;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__8987 = i + 1;
        var G__8988 = cljs.core._conj_BANG_(out, items[i]);
        i = G__8987;
        out = G__8988;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__8990 = null;
  var G__8990__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__8990__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__8990 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8990__2.call(this, self__, k);
      case 3:
        return G__8990__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8990.cljs$core$IFn$_invoke$arity$2 = G__8990__2;
  G__8990.cljs$core$IFn$_invoke$arity$3 = G__8990__3;
  return G__8990;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args8989) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8989)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__8993 = cljs.core.seq(coll);
  var chunk__8994 = null;
  var count__8995 = 0;
  var i__8996 = 0;
  while (true) {
    if (i__8996 < count__8995) {
      var vec__8997 = chunk__8994.cljs$core$IIndexed$_nth$arity$2(null, i__8996);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8997, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8997, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__8999 = seq__8993;
      var G__9000 = chunk__8994;
      var G__9001 = count__8995;
      var G__9002 = i__8996 + 1;
      seq__8993 = G__8999;
      chunk__8994 = G__9000;
      count__8995 = G__9001;
      i__8996 = G__9002;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8993);
      if (temp__4425__auto__) {
        var seq__8993__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8993__$1)) {
          var c__5471__auto__ = cljs.core.chunk_first(seq__8993__$1);
          var G__9003 = cljs.core.chunk_rest(seq__8993__$1);
          var G__9004 = c__5471__auto__;
          var G__9005 = cljs.core.count(c__5471__auto__);
          var G__9006 = 0;
          seq__8993 = G__9003;
          chunk__8994 = G__9004;
          count__8995 = G__9005;
          i__8996 = G__9006;
          continue;
        } else {
          var vec__8998 = cljs.core.first(seq__8993__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8998, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8998, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__9007 = cljs.core.next(seq__8993__$1);
          var G__9008 = null;
          var G__9009 = 0;
          var G__9010 = 0;
          seq__8993 = G__9007;
          chunk__8994 = G__9008;
          count__8995 = G__9009;
          i__8996 = G__9010;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__8991_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__8991_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__9011 = null;
  var G__9011__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9011__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9011 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9011__2.call(this, self__, k);
      case 3:
        return G__9011__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9011.cljs$core$IFn$_invoke$arity$2 = G__9011__2;
  G__9011.cljs$core$IFn$_invoke$arity$3 = G__9011__3;
  return G__9011;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args8992) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8992)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5565__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5565__auto__.length) {
        var G__9012 = i + 1;
        var G__9013 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__9012;
        res = G__9013;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__9014 = cljs.core.next(in$__$1);
          var G__9015 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__9014;
          out = G__9015;
          continue;
        } else {
          return cljs.core.persistent_BANG_(out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set(var_args) {
  var args9016 = [];
  var len__5726__auto___9020 = arguments.length;
  var i__5727__auto___9021 = 0;
  while (true) {
    if (i__5727__auto___9021 < len__5726__auto___9020) {
      args9016.push(arguments[i__5727__auto___9021]);
      var G__9022 = i__5727__auto___9021 + 1;
      i__5727__auto___9021 = G__9022;
      continue;
    } else {
    }
    break;
  }
  var G__9019 = args9016.length;
  switch(G__9019) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args9016.slice(0), 0);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5745__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq9017) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9017));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9025 = arguments.length;
  var i__5727__auto___9026 = 0;
  while (true) {
    if (i__5727__auto___9026 < len__5726__auto___9025) {
      args__5733__auto__.push(arguments[i__5727__auto___9026]);
      var G__9027 = i__5727__auto___9026 + 1;
      i__5727__auto___9026 = G__9027;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq9024) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9024));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9030 = arguments.length;
  var i__5727__auto___9031 = 0;
  while (true) {
    if (i__5727__auto___9031 < len__5726__auto___9030) {
      args__5733__auto__.push(arguments[i__5727__auto___9031]);
      var G__9032 = i__5727__auto___9031 + 1;
      i__5727__auto___9031 = G__9032;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 1 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(1), 0) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5734__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq9028) {
  var G__9029 = cljs.core.first(seq9028);
  var seq9028__$1 = cljs.core.next(seq9028);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__9029, seq9028__$1);
};
cljs.core.replace = function cljs$core$replace(var_args) {
  var args9035 = [];
  var len__5726__auto___9038 = arguments.length;
  var i__5727__auto___9039 = 0;
  while (true) {
    if (i__5727__auto___9039 < len__5726__auto___9038) {
      args9035.push(arguments[i__5727__auto___9039]);
      var G__9040 = i__5727__auto___9039 + 1;
      i__5727__auto___9039 = G__9040;
      continue;
    } else {
    }
    break;
  }
  var G__9037 = args9035.length;
  switch(G__9037) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9035.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__9033_SHARP_) {
    var temp__4423__auto__ = cljs.core.find(smap, p1__9033_SHARP_);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var e = temp__4423__auto__;
      return cljs.core.val(e);
    } else {
      return p1__9033_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4423__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__9034_SHARP_) {
      var temp__4423__auto__ = cljs.core.find(smap, p1__9034_SHARP_);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var e = temp__4423__auto__;
        return cljs.core.second(e);
      } else {
        return p1__9034_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct(var_args) {
  var args9042 = [];
  var len__5726__auto___9051 = arguments.length;
  var i__5727__auto___9052 = 0;
  while (true) {
    if (i__5727__auto___9052 < len__5726__auto___9051) {
      args9042.push(arguments[i__5727__auto___9052]);
      var G__9053 = i__5727__auto___9052 + 1;
      i__5727__auto___9052 = G__9053;
      continue;
    } else {
    }
    break;
  }
  var G__9044 = args9042.length;
  switch(G__9044) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9042.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__9055 = null;
        var G__9055__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9055__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9055__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(seen) : cljs.core.deref.call(null, seen), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__9055 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9055__0.call(this);
            case 1:
              return G__9055__1.call(this, result);
            case 2:
              return G__9055__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9055.cljs$core$IFn$_invoke$arity$0 = G__9055__0;
        G__9055.cljs$core$IFn$_invoke$arity$1 = G__9055__1;
        G__9055.cljs$core$IFn$_invoke$arity$2 = G__9055__2;
        return G__9055;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__9049, seen__$1) {
        while (true) {
          var vec__9050 = p__9049;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9050, 0, null);
          var xs__$1 = vec__9050;
          var temp__4425__auto__ = cljs.core.seq(xs__$1);
          if (temp__4425__auto__) {
            var s = temp__4425__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__9056 = cljs.core.rest(s);
              var G__9057 = seen__$1;
              p__9049 = G__9056;
              seen__$1 = G__9057;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__9058 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__9059 = cljs.core.next(s__$1);
      ret = G__9058;
      s__$1 = G__9059;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__9062 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__9063 = cljs.core.next(ks);
      var G__9064 = cljs.core.next(vs);
      map = G__9062;
      ks = G__9063;
      vs = G__9064;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key(var_args) {
  var args9067 = [];
  var len__5726__auto___9074 = arguments.length;
  var i__5727__auto___9075 = 0;
  while (true) {
    if (i__5727__auto___9075 < len__5726__auto___9074) {
      args9067.push(arguments[i__5727__auto___9075]);
      var G__9076 = i__5727__auto___9075 + 1;
      i__5727__auto___9075 = G__9076;
      continue;
    } else {
    }
    break;
  }
  var G__9073 = args9067.length;
  switch(G__9073) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args9067.slice(3), 0);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5745__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) > (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__9065_SHARP_, p2__9066_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__9065_SHARP_, p2__9066_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq9068) {
  var G__9069 = cljs.core.first(seq9068);
  var seq9068__$1 = cljs.core.next(seq9068);
  var G__9070 = cljs.core.first(seq9068__$1);
  var seq9068__$2 = cljs.core.next(seq9068__$1);
  var G__9071 = cljs.core.first(seq9068__$2);
  var seq9068__$3 = cljs.core.next(seq9068__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__9069, G__9070, G__9071, seq9068__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key(var_args) {
  var args9080 = [];
  var len__5726__auto___9087 = arguments.length;
  var i__5727__auto___9088 = 0;
  while (true) {
    if (i__5727__auto___9088 < len__5726__auto___9087) {
      args9080.push(arguments[i__5727__auto___9088]);
      var G__9089 = i__5727__auto___9088 + 1;
      i__5727__auto___9088 = G__9089;
      continue;
    } else {
    }
    break;
  }
  var G__9086 = args9080.length;
  switch(G__9086) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args9080.slice(3), 0);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5745__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) < (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__9078_SHARP_, p2__9079_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__9078_SHARP_, p2__9079_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq9081) {
  var G__9082 = cljs.core.first(seq9081);
  var seq9081__$1 = cljs.core.next(seq9081);
  var G__9083 = cljs.core.first(seq9081__$1);
  var seq9081__$2 = cljs.core.next(seq9081__$1);
  var G__9084 = cljs.core.first(seq9081__$2);
  var seq9081__$3 = cljs.core.next(seq9081__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__9082, G__9083, G__9084, seq9081__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all(var_args) {
  var args9091 = [];
  var len__5726__auto___9094 = arguments.length;
  var i__5727__auto___9095 = 0;
  while (true) {
    if (i__5727__auto___9095 < len__5726__auto___9094) {
      args9091.push(arguments[i__5727__auto___9095]);
      var G__9096 = i__5727__auto___9095 + 1;
      i__5727__auto___9095 = G__9096;
      continue;
    } else {
    }
    break;
  }
  var G__9093 = args9091.length;
  switch(G__9093) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9091.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__9098 = null;
        var G__9098__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9098__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__9098__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          } else {
            return result;
          }
        };
        G__9098 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9098__0.call(this);
            case 1:
              return G__9098__1.call(this, result);
            case 2:
              return G__9098__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9098.cljs$core$IFn$_invoke$arity$0 = G__9098__0;
        G__9098.cljs$core$IFn$_invoke$arity$1 = G__9098__1;
        G__9098.cljs$core$IFn$_invoke$arity$2 = G__9098__2;
        return G__9098;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while(var_args) {
  var args9099 = [];
  var len__5726__auto___9103 = arguments.length;
  var i__5727__auto___9104 = 0;
  while (true) {
    if (i__5727__auto___9104 < len__5726__auto___9103) {
      args9099.push(arguments[i__5727__auto___9104]);
      var G__9105 = i__5727__auto___9104 + 1;
      i__5727__auto___9104 = G__9105;
      continue;
    } else {
    }
    break;
  }
  var G__9101 = args9099.length;
  switch(G__9101) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9099.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__9107 = null;
      var G__9107__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9107__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__9107__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__9107 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__9107__0.call(this);
          case 1:
            return G__9107__1.call(this, result);
          case 2:
            return G__9107__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9107.cljs$core$IFn$_invoke$arity$0 = G__9107__0;
      G__9107.cljs$core$IFn$_invoke$arity$1 = G__9107__1;
      G__9107.cljs$core$IFn$_invoke$arity$2 = G__9107__2;
      return G__9107;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.truth_(function() {
        var G__9102 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9102) : pred.call(null, G__9102);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__9116 = function() {
      var G__9118 = cljs.core._entry_key(sc, e);
      var G__9119 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9118, G__9119) : comp.call(null, G__9118, G__9119);
    }();
    var G__9117 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__9116, G__9117) : test.call(null, G__9116, G__9117);
  };
};
cljs.core.subseq = function cljs$core$subseq(var_args) {
  var args9120 = [];
  var len__5726__auto___9125 = arguments.length;
  var i__5727__auto___9126 = 0;
  while (true) {
    if (i__5727__auto___9126 < len__5726__auto___9125) {
      args9120.push(arguments[i__5727__auto___9126]);
      var G__9127 = i__5727__auto___9126 + 1;
      i__5727__auto___9126 = G__9127;
      continue;
    } else {
    }
    break;
  }
  var G__9122 = args9120.length;
  switch(G__9122) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9120.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var vec__9123 = temp__4425__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9123, 0, null);
      var s = vec__9123;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var vec__9124 = temp__4425__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9124, 0, null);
    var s = vec__9124;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq(var_args) {
  var args9129 = [];
  var len__5726__auto___9134 = arguments.length;
  var i__5727__auto___9135 = 0;
  while (true) {
    if (i__5727__auto___9135 < len__5726__auto___9134) {
      args9129.push(arguments[i__5727__auto___9135]);
      var G__9136 = i__5727__auto___9135 + 1;
      i__5727__auto___9135 = G__9136;
      continue;
    } else {
    }
    break;
  }
  var G__9131 = args9129.length;
  switch(G__9131) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9129.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var vec__9132 = temp__4425__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9132, 0, null);
      var s = vec__9132;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var vec__9133 = temp__4425__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9133, 0, null);
    var s = vec__9133;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null)], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__9138 = (self__.end - self__.start) / self__.step;
    return Math.ceil(G__9138);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, i) : f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(ret__$1) : cljs.core.deref.call(null, ret__$1);
      } else {
        var G__9139 = i + self__.step;
        var G__9140 = ret__$1;
        i = G__9139;
        ret = G__9140;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.step < 0) {
      if (self__.start > self__.end) {
        return rng__$1;
      } else {
        return null;
      }
    } else {
      if (self__.start === self__.end) {
        return null;
      } else {
        return rng__$1;
      }
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.range = function cljs$core$range(var_args) {
  var args9141 = [];
  var len__5726__auto___9144 = arguments.length;
  var i__5727__auto___9145 = 0;
  while (true) {
    if (i__5727__auto___9145 < len__5726__auto___9144) {
      args9141.push(arguments[i__5727__auto___9145]);
      var G__9146 = i__5727__auto___9145 + 1;
      i__5727__auto___9145 = G__9146;
      continue;
    } else {
    }
    break;
  }
  var G__9143 = args9141.length;
  switch(G__9143) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9141.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth(var_args) {
  var args9148 = [];
  var len__5726__auto___9153 = arguments.length;
  var i__5727__auto___9154 = 0;
  while (true) {
    if (i__5727__auto___9154 < len__5726__auto___9153) {
      args9148.push(arguments[i__5727__auto___9154]);
      var G__9155 = i__5727__auto___9154 + 1;
      i__5727__auto___9154 = G__9155;
      continue;
    } else {
    }
    break;
  }
  var G__9150 = args9148.length;
  switch(G__9150) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9148.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__9151 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__9151) : cljs.core.pr_str.call(null, G__9151);
    }())].join(""));
  }
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__9157 = null;
        var G__9157__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9157__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9157__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__9157 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9157__0.call(this);
            case 1:
              return G__9157__1.call(this, result);
            case 2:
              return G__9157__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9157.cljs$core$IFn$_invoke$arity$0 = G__9157__0;
        G__9157.cljs$core$IFn$_invoke$arity$1 = G__9157__1;
        G__9157.cljs$core$IFn$_invoke$arity$2 = G__9157__2;
        return G__9157;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__9152 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__9152) : cljs.core.pr_str.call(null, G__9152);
    }())].join(""));
  }
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by(var_args) {
  var args9159 = [];
  var len__5726__auto___9162 = arguments.length;
  var i__5727__auto___9163 = 0;
  while (true) {
    if (i__5727__auto___9163 < len__5726__auto___9162) {
      args9159.push(arguments[i__5727__auto___9163]);
      var G__9164 = i__5727__auto___9163 + 1;
      i__5727__auto___9163 = G__9164;
      continue;
    } else {
    }
    break;
  }
  var G__9161 = args9159.length;
  switch(G__9161) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9159.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__9166 = null;
        var G__9166__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9166__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__9166__2 = function(result, input) {
          var pval = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          var val = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__9166 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9166__0.call(this);
            case 1:
              return G__9166__1.call(this, result);
            case 2:
              return G__9166__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9166.cljs$core$IFn$_invoke$arity$0 = G__9166__0;
        G__9166.cljs$core$IFn$_invoke$arity$1 = G__9166__1;
        G__9166.cljs$core$IFn$_invoke$arity$2 = G__9166__2;
        return G__9166;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var fst = cljs.core.first(s);
      var fv = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(fst) : f.call(null, fst);
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4425__auto__) {
        return function(p1__9158_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__9158_SHARP_) : f.call(null, p1__9158_SHARP_));
        };
      }(fst, fv, s, temp__4425__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions(var_args) {
  var args9167 = [];
  var len__5726__auto___9172 = arguments.length;
  var i__5727__auto___9173 = 0;
  while (true) {
    if (i__5727__auto___9173 < len__5726__auto___9172) {
      args9167.push(arguments[i__5727__auto___9173]);
      var G__9174 = i__5727__auto___9173 + 1;
      i__5727__auto___9173 = G__9174;
      continue;
    } else {
    }
    break;
  }
  var G__9169 = args9167.length;
  switch(G__9169) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9167.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__9170 = init;
        var G__9171 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9170, G__9171) : f.call(null, G__9170, G__9171);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt(var_args) {
  var args9186 = [];
  var len__5726__auto___9193 = arguments.length;
  var i__5727__auto___9194 = 0;
  while (true) {
    if (i__5727__auto___9194 < len__5726__auto___9193) {
      args9186.push(arguments[i__5727__auto___9194]);
      var G__9195 = i__5727__auto___9194 + 1;
      i__5727__auto___9194 = G__9195;
      continue;
    } else {
    }
    break;
  }
  var G__9192 = args9186.length;
  switch(G__9192) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args9186.slice(3), 0);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5745__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__9197 = null;
    var G__9197__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)], null);
    };
    var G__9197__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x)], null);
    };
    var G__9197__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y)], null);
    };
    var G__9197__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z)], null);
    };
    var G__9197__4 = function() {
      var G__9198__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__9198 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9199__i = 0, G__9199__a = new Array(arguments.length - 3);
          while (G__9199__i < G__9199__a.length) {
            G__9199__a[G__9199__i] = arguments[G__9199__i + 3];
            ++G__9199__i;
          }
          args = new cljs.core.IndexedSeq(G__9199__a, 0);
        }
        return G__9198__delegate.call(this, x, y, z, args);
      };
      G__9198.cljs$lang$maxFixedArity = 3;
      G__9198.cljs$lang$applyTo = function(arglist__9200) {
        var x = cljs.core.first(arglist__9200);
        arglist__9200 = cljs.core.next(arglist__9200);
        var y = cljs.core.first(arglist__9200);
        arglist__9200 = cljs.core.next(arglist__9200);
        var z = cljs.core.first(arglist__9200);
        var args = cljs.core.rest(arglist__9200);
        return G__9198__delegate(x, y, z, args);
      };
      G__9198.cljs$core$IFn$_invoke$arity$variadic = G__9198__delegate;
      return G__9198;
    }();
    G__9197 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9197__0.call(this);
        case 1:
          return G__9197__1.call(this, x);
        case 2:
          return G__9197__2.call(this, x, y);
        case 3:
          return G__9197__3.call(this, x, y, z);
        default:
          var G__9201 = null;
          if (arguments.length > 3) {
            var G__9202__i = 0, G__9202__a = new Array(arguments.length - 3);
            while (G__9202__i < G__9202__a.length) {
              G__9202__a[G__9202__i] = arguments[G__9202__i + 3];
              ++G__9202__i;
            }
            G__9201 = new cljs.core.IndexedSeq(G__9202__a, 0);
          }
          return G__9197__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9201);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9197.cljs$lang$maxFixedArity = 3;
    G__9197.cljs$lang$applyTo = G__9197__4.cljs$lang$applyTo;
    G__9197.cljs$core$IFn$_invoke$arity$0 = G__9197__0;
    G__9197.cljs$core$IFn$_invoke$arity$1 = G__9197__1;
    G__9197.cljs$core$IFn$_invoke$arity$2 = G__9197__2;
    G__9197.cljs$core$IFn$_invoke$arity$3 = G__9197__3;
    G__9197.cljs$core$IFn$_invoke$arity$variadic = G__9197__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9197;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__9203 = null;
    var G__9203__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null)], null);
    };
    var G__9203__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x)], null);
    };
    var G__9203__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y)], null);
    };
    var G__9203__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z)], null);
    };
    var G__9203__4 = function() {
      var G__9204__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__9204 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9205__i = 0, G__9205__a = new Array(arguments.length - 3);
          while (G__9205__i < G__9205__a.length) {
            G__9205__a[G__9205__i] = arguments[G__9205__i + 3];
            ++G__9205__i;
          }
          args = new cljs.core.IndexedSeq(G__9205__a, 0);
        }
        return G__9204__delegate.call(this, x, y, z, args);
      };
      G__9204.cljs$lang$maxFixedArity = 3;
      G__9204.cljs$lang$applyTo = function(arglist__9206) {
        var x = cljs.core.first(arglist__9206);
        arglist__9206 = cljs.core.next(arglist__9206);
        var y = cljs.core.first(arglist__9206);
        arglist__9206 = cljs.core.next(arglist__9206);
        var z = cljs.core.first(arglist__9206);
        var args = cljs.core.rest(arglist__9206);
        return G__9204__delegate(x, y, z, args);
      };
      G__9204.cljs$core$IFn$_invoke$arity$variadic = G__9204__delegate;
      return G__9204;
    }();
    G__9203 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9203__0.call(this);
        case 1:
          return G__9203__1.call(this, x);
        case 2:
          return G__9203__2.call(this, x, y);
        case 3:
          return G__9203__3.call(this, x, y, z);
        default:
          var G__9207 = null;
          if (arguments.length > 3) {
            var G__9208__i = 0, G__9208__a = new Array(arguments.length - 3);
            while (G__9208__i < G__9208__a.length) {
              G__9208__a[G__9208__i] = arguments[G__9208__i + 3];
              ++G__9208__i;
            }
            G__9207 = new cljs.core.IndexedSeq(G__9208__a, 0);
          }
          return G__9203__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9207);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9203.cljs$lang$maxFixedArity = 3;
    G__9203.cljs$lang$applyTo = G__9203__4.cljs$lang$applyTo;
    G__9203.cljs$core$IFn$_invoke$arity$0 = G__9203__0;
    G__9203.cljs$core$IFn$_invoke$arity$1 = G__9203__1;
    G__9203.cljs$core$IFn$_invoke$arity$2 = G__9203__2;
    G__9203.cljs$core$IFn$_invoke$arity$3 = G__9203__3;
    G__9203.cljs$core$IFn$_invoke$arity$variadic = G__9203__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9203;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__9209 = null;
    var G__9209__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null), h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null)], null);
    };
    var G__9209__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x), h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x)], null);
    };
    var G__9209__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y), h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y)], null);
    };
    var G__9209__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z), h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z)], null);
    };
    var G__9209__4 = function() {
      var G__9210__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__9210 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9211__i = 0, G__9211__a = new Array(arguments.length - 3);
          while (G__9211__i < G__9211__a.length) {
            G__9211__a[G__9211__i] = arguments[G__9211__i + 3];
            ++G__9211__i;
          }
          args = new cljs.core.IndexedSeq(G__9211__a, 0);
        }
        return G__9210__delegate.call(this, x, y, z, args);
      };
      G__9210.cljs$lang$maxFixedArity = 3;
      G__9210.cljs$lang$applyTo = function(arglist__9212) {
        var x = cljs.core.first(arglist__9212);
        arglist__9212 = cljs.core.next(arglist__9212);
        var y = cljs.core.first(arglist__9212);
        arglist__9212 = cljs.core.next(arglist__9212);
        var z = cljs.core.first(arglist__9212);
        var args = cljs.core.rest(arglist__9212);
        return G__9210__delegate(x, y, z, args);
      };
      G__9210.cljs$core$IFn$_invoke$arity$variadic = G__9210__delegate;
      return G__9210;
    }();
    G__9209 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9209__0.call(this);
        case 1:
          return G__9209__1.call(this, x);
        case 2:
          return G__9209__2.call(this, x, y);
        case 3:
          return G__9209__3.call(this, x, y, z);
        default:
          var G__9213 = null;
          if (arguments.length > 3) {
            var G__9214__i = 0, G__9214__a = new Array(arguments.length - 3);
            while (G__9214__i < G__9214__a.length) {
              G__9214__a[G__9214__i] = arguments[G__9214__i + 3];
              ++G__9214__i;
            }
            G__9213 = new cljs.core.IndexedSeq(G__9214__a, 0);
          }
          return G__9209__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9213);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9209.cljs$lang$maxFixedArity = 3;
    G__9209.cljs$lang$applyTo = G__9209__4.cljs$lang$applyTo;
    G__9209.cljs$core$IFn$_invoke$arity$0 = G__9209__0;
    G__9209.cljs$core$IFn$_invoke$arity$1 = G__9209__1;
    G__9209.cljs$core$IFn$_invoke$arity$2 = G__9209__2;
    G__9209.cljs$core$IFn$_invoke$arity$3 = G__9209__3;
    G__9209.cljs$core$IFn$_invoke$arity$variadic = G__9209__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9209;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__9215 = null;
      var G__9215__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__9176_SHARP_, p2__9177_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__9176_SHARP_, p2__9177_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__9177_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__9177_SHARP_.call(null));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__9215__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__9178_SHARP_, p2__9179_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__9178_SHARP_, p2__9179_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__9179_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p2__9179_SHARP_.call(null, x));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__9215__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__9180_SHARP_, p2__9181_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__9180_SHARP_, p2__9181_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__9181_SHARP_.cljs$core$IFn$_invoke$arity$2(x, y) : p2__9181_SHARP_.call(null, x, y));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__9215__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__9182_SHARP_, p2__9183_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__9182_SHARP_, p2__9183_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__9183_SHARP_.cljs$core$IFn$_invoke$arity$3(x, y, z) : p2__9183_SHARP_.call(null, x, y, z));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__9215__4 = function() {
        var G__9216__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__9184_SHARP_, p2__9185_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__9184_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__9185_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__9216 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9217__i = 0, G__9217__a = new Array(arguments.length - 3);
            while (G__9217__i < G__9217__a.length) {
              G__9217__a[G__9217__i] = arguments[G__9217__i + 3];
              ++G__9217__i;
            }
            args = new cljs.core.IndexedSeq(G__9217__a, 0);
          }
          return G__9216__delegate.call(this, x, y, z, args);
        };
        G__9216.cljs$lang$maxFixedArity = 3;
        G__9216.cljs$lang$applyTo = function(arglist__9218) {
          var x = cljs.core.first(arglist__9218);
          arglist__9218 = cljs.core.next(arglist__9218);
          var y = cljs.core.first(arglist__9218);
          arglist__9218 = cljs.core.next(arglist__9218);
          var z = cljs.core.first(arglist__9218);
          var args = cljs.core.rest(arglist__9218);
          return G__9216__delegate(x, y, z, args);
        };
        G__9216.cljs$core$IFn$_invoke$arity$variadic = G__9216__delegate;
        return G__9216;
      }();
      G__9215 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9215__0.call(this);
          case 1:
            return G__9215__1.call(this, x);
          case 2:
            return G__9215__2.call(this, x, y);
          case 3:
            return G__9215__3.call(this, x, y, z);
          default:
            var G__9219 = null;
            if (arguments.length > 3) {
              var G__9220__i = 0, G__9220__a = new Array(arguments.length - 3);
              while (G__9220__i < G__9220__a.length) {
                G__9220__a[G__9220__i] = arguments[G__9220__i + 3];
                ++G__9220__i;
              }
              G__9219 = new cljs.core.IndexedSeq(G__9220__a, 0);
            }
            return G__9215__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9219);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9215.cljs$lang$maxFixedArity = 3;
      G__9215.cljs$lang$applyTo = G__9215__4.cljs$lang$applyTo;
      G__9215.cljs$core$IFn$_invoke$arity$0 = G__9215__0;
      G__9215.cljs$core$IFn$_invoke$arity$1 = G__9215__1;
      G__9215.cljs$core$IFn$_invoke$arity$2 = G__9215__2;
      G__9215.cljs$core$IFn$_invoke$arity$3 = G__9215__3;
      G__9215.cljs$core$IFn$_invoke$arity$variadic = G__9215__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__9215;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq9187) {
  var G__9188 = cljs.core.first(seq9187);
  var seq9187__$1 = cljs.core.next(seq9187);
  var G__9189 = cljs.core.first(seq9187__$1);
  var seq9187__$2 = cljs.core.next(seq9187__$1);
  var G__9190 = cljs.core.first(seq9187__$2);
  var seq9187__$3 = cljs.core.next(seq9187__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__9188, G__9189, G__9190, seq9187__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun(var_args) {
  var args9221 = [];
  var len__5726__auto___9224 = arguments.length;
  var i__5727__auto___9225 = 0;
  while (true) {
    if (i__5727__auto___9225 < len__5726__auto___9224) {
      args9221.push(arguments[i__5727__auto___9225]);
      var G__9226 = i__5727__auto___9225 + 1;
      i__5727__auto___9225 = G__9226;
      continue;
    } else {
    }
    break;
  }
  var G__9223 = args9221.length;
  switch(G__9223) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9221.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__9228 = cljs.core.next(coll);
      coll = G__9228;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__9229 = n - 1;
      var G__9230 = cljs.core.next(coll);
      n = G__9229;
      coll = G__9230;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall(var_args) {
  var args9231 = [];
  var len__5726__auto___9234 = arguments.length;
  var i__5727__auto___9235 = 0;
  while (true) {
    if (i__5727__auto___9235 < len__5726__auto___9234) {
      args9231.push(arguments[i__5727__auto___9235]);
      var G__9236 = i__5727__auto___9235 + 1;
      i__5727__auto___9235 = G__9236;
      continue;
    } else {
    }
    break;
  }
  var G__9233 = args9231.length;
  switch(G__9233) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9231.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__9239 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9239, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9239, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4668__auto__ = flags;
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_9247 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4668__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4668__auto__)) {
              return or__4668__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__9248_9254 = cljs.core.first(coll);
          var G__9249_9255 = writer;
          var G__9250_9256 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__9248_9254, G__9249_9255, G__9250_9256) : print_one.call(null, G__9248_9254, G__9249_9255, G__9250_9256);
        } else {
        }
        var coll_9257__$1 = cljs.core.next(coll);
        var n_9258 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_9257__$1 && (n_9258 == null || !(n_9258 === 0))) {
            cljs.core._write(writer, sep);
            var G__9251_9259 = cljs.core.first(coll_9257__$1);
            var G__9252_9260 = writer;
            var G__9253_9261 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__9251_9259, G__9252_9260, G__9253_9261) : print_one.call(null, G__9251_9259, G__9252_9260, G__9253_9261);
            var G__9262 = cljs.core.next(coll_9257__$1);
            var G__9263 = n_9258 - 1;
            coll_9257__$1 = G__9262;
            n_9258 = G__9263;
            continue;
          } else {
            if (cljs.core.seq(coll_9257__$1) && n_9258 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4668__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4668__auto__)) {
                  return or__4668__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_9247;
  }
};
cljs.core.write_all = function cljs$core$write_all(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9270 = arguments.length;
  var i__5727__auto___9271 = 0;
  while (true) {
    if (i__5727__auto___9271 < len__5726__auto___9270) {
      args__5733__auto__.push(arguments[i__5727__auto___9271]);
      var G__9272 = i__5727__auto___9271 + 1;
      i__5727__auto___9271 = G__9272;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 1 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(1), 0) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5734__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__9266 = cljs.core.seq(ss);
  var chunk__9267 = null;
  var count__9268 = 0;
  var i__9269 = 0;
  while (true) {
    if (i__9269 < count__9268) {
      var s = chunk__9267.cljs$core$IIndexed$_nth$arity$2(null, i__9269);
      cljs.core._write(writer, s);
      var G__9273 = seq__9266;
      var G__9274 = chunk__9267;
      var G__9275 = count__9268;
      var G__9276 = i__9269 + 1;
      seq__9266 = G__9273;
      chunk__9267 = G__9274;
      count__9268 = G__9275;
      i__9269 = G__9276;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__9266);
      if (temp__4425__auto__) {
        var seq__9266__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9266__$1)) {
          var c__5471__auto__ = cljs.core.chunk_first(seq__9266__$1);
          var G__9277 = cljs.core.chunk_rest(seq__9266__$1);
          var G__9278 = c__5471__auto__;
          var G__9279 = cljs.core.count(c__5471__auto__);
          var G__9280 = 0;
          seq__9266 = G__9277;
          chunk__9267 = G__9278;
          count__9268 = G__9279;
          i__9269 = G__9280;
          continue;
        } else {
          var s = cljs.core.first(seq__9266__$1);
          cljs.core._write(writer, s);
          var G__9281 = cljs.core.next(seq__9266__$1);
          var G__9282 = null;
          var G__9283 = 0;
          var G__9284 = 0;
          seq__9266 = G__9281;
          chunk__9267 = G__9282;
          count__9268 = G__9283;
          i__9269 = G__9284;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq9264) {
  var G__9265 = cljs.core.first(seq9264);
  var seq9264__$1 = cljs.core.next(seq9264);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__9265, seq9264__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj9286 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj9286;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return [cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.print_map;
cljs.core.print_meta_QMARK_ = function cljs$core$print_meta_QMARK_(opts, obj) {
  var and__4656__auto__ = cljs.core.boolean$(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964)));
  if (and__4656__auto__) {
    var and__4656__auto____$1 = !(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 131072 || obj.cljs$core$IMeta$ ? true : false : false;
    if (and__4656__auto____$1) {
      return !(cljs.core.meta(obj) == null);
    } else {
      return and__4656__auto____$1;
    }
  } else {
    return and__4656__auto__;
  }
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (cljs.core.print_meta_QMARK_(opts, obj)) {
      cljs.core._write(writer, "^");
      var G__9302_9311 = cljs.core.meta(obj);
      var G__9303_9312 = writer;
      var G__9304_9313 = opts;
      cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__9302_9311, G__9303_9312, G__9304_9313) : cljs.core.pr_writer.call(null, G__9302_9311, G__9303_9312, G__9304_9313);
      cljs.core._write(writer, " ");
    } else {
    }
    if (obj.cljs$lang$type) {
      return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
    } else {
      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
        return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
      } else {
        if (obj === true || obj === false || typeof obj === "number") {
          return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
        } else {
          if (cljs.core.object_QMARK_(obj)) {
            cljs.core._write(writer, "#js ");
            var G__9306 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
            }, cljs.core.js_keys(obj));
            var G__9307 = cljs.core.pr_writer;
            var G__9308 = writer;
            var G__9309 = opts;
            return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__9306, G__9307, G__9308, G__9309) : cljs.core.print_map.call(null, G__9306, G__9307, G__9308, G__9309);
          } else {
            if (cljs.core.array_QMARK_(obj)) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
            } else {
              if (goog.isString(obj)) {
                if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                  return cljs.core._write(writer, cljs.core.quote_string(obj));
                } else {
                  return cljs.core._write(writer, obj);
                }
              } else {
                if (goog.isFunction(obj)) {
                  var name = obj.name;
                  var name__$1 = cljs.core.truth_(function() {
                    var or__4668__auto__ = name == null;
                    if (or__4668__auto__) {
                      return or__4668__auto__;
                    } else {
                      return goog.string.isEmpty(name);
                    }
                  }()) ? "Function" : name;
                  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, ' "', [cljs.core.str(obj)].join(""), '"]'], 0));
                } else {
                  if (obj instanceof Date) {
                    var normalize = function(n, len) {
                      var ns = [cljs.core.str(n)].join("");
                      while (true) {
                        if (cljs.core.count(ns) < len) {
                          var G__9314 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                          ns = G__9314;
                          continue;
                        } else {
                          return ns;
                        }
                        break;
                      }
                    };
                    return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                  } else {
                    if (cljs.core.regexp_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                    } else {
                      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
                        return cljs.core._pr_writer(obj, writer, opts);
                      } else {
                        if (cljs.core.truth_(obj.constructor.cljs$lang$ctorStr)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", obj.constructor.cljs$lang$ctorStr.replace(new RegExp("/", "g"), "."), "]"], 0));
                        } else {
                          var name = obj.constructor.name;
                          var name__$1 = cljs.core.truth_(function() {
                            var or__4668__auto__ = name == null;
                            if (or__4668__auto__) {
                              return or__4668__auto__;
                            } else {
                              return goog.string.isEmpty(name);
                            }
                          }()) ? "Object" : name;
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, " ", [cljs.core.str(obj)].join(""), "]"], 0));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var alt_impl = temp__4423__auto__;
    var G__9318 = obj;
    var G__9319 = writer;
    var G__9320 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__9318, G__9319, G__9320) : alt_impl.call(null, G__9318, G__9319, G__9320);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__9325 = cljs.core.seq(cljs.core.next(objs));
  var chunk__9326 = null;
  var count__9327 = 0;
  var i__9328 = 0;
  while (true) {
    if (i__9328 < count__9327) {
      var obj = chunk__9326.cljs$core$IIndexed$_nth$arity$2(null, i__9328);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__9329 = seq__9325;
      var G__9330 = chunk__9326;
      var G__9331 = count__9327;
      var G__9332 = i__9328 + 1;
      seq__9325 = G__9329;
      chunk__9326 = G__9330;
      count__9327 = G__9331;
      i__9328 = G__9332;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__9325);
      if (temp__4425__auto__) {
        var seq__9325__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9325__$1)) {
          var c__5471__auto__ = cljs.core.chunk_first(seq__9325__$1);
          var G__9333 = cljs.core.chunk_rest(seq__9325__$1);
          var G__9334 = c__5471__auto__;
          var G__9335 = cljs.core.count(c__5471__auto__);
          var G__9336 = 0;
          seq__9325 = G__9333;
          chunk__9326 = G__9334;
          count__9327 = G__9335;
          i__9328 = G__9336;
          continue;
        } else {
          var obj = cljs.core.first(seq__9325__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__9337 = cljs.core.next(seq__9325__$1);
          var G__9338 = null;
          var G__9339 = 0;
          var G__9340 = 0;
          seq__9325 = G__9337;
          chunk__9326 = G__9338;
          count__9327 = G__9339;
          i__9328 = G__9340;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return [cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return [cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(var_args) {
  var args9341 = [];
  var len__5726__auto___9344 = arguments.length;
  var i__5727__auto___9345 = 0;
  while (true) {
    if (i__5727__auto___9345 < len__5726__auto___9344) {
      args9341.push(arguments[i__5727__auto___9345]);
      var G__9346 = i__5727__auto___9345 + 1;
      i__5727__auto___9345 = G__9346;
      continue;
    } else {
    }
    break;
  }
  var G__9343 = args9341.length;
  switch(G__9343) {
    case 0:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9341.length)].join(""));;
  }
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.newline.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str = function cljs$core$pr_str(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9349 = arguments.length;
  var i__5727__auto___9350 = 0;
  while (true) {
    if (i__5727__auto___9350 < len__5726__auto___9349) {
      args__5733__auto__.push(arguments[i__5727__auto___9350]);
      var G__9351 = i__5727__auto___9350 + 1;
      i__5727__auto___9350 = G__9351;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq9348) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9348));
};
cljs.core.prn_str = function cljs$core$prn_str(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9353 = arguments.length;
  var i__5727__auto___9354 = 0;
  while (true) {
    if (i__5727__auto___9354 < len__5726__auto___9353) {
      args__5733__auto__.push(arguments[i__5727__auto___9354]);
      var G__9355 = i__5727__auto___9354 + 1;
      i__5727__auto___9354 = G__9355;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq9352) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9352));
};
cljs.core.pr = function cljs$core$pr(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9357 = arguments.length;
  var i__5727__auto___9358 = 0;
  while (true) {
    if (i__5727__auto___9358 < len__5726__auto___9357) {
      args__5733__auto__.push(arguments[i__5727__auto___9358]);
      var G__9359 = i__5727__auto___9358 + 1;
      i__5727__auto___9358 = G__9359;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq9356) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9356));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__9360__i = 0, G__9360__a = new Array(arguments.length - 0);
      while (G__9360__i < G__9360__a.length) {
        G__9360__a[G__9360__i] = arguments[G__9360__i + 0];
        ++G__9360__i;
      }
      objs = new cljs.core.IndexedSeq(G__9360__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__9361) {
    var objs = cljs.core.seq(arglist__9361);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9363 = arguments.length;
  var i__5727__auto___9364 = 0;
  while (true) {
    if (i__5727__auto___9364 < len__5726__auto___9363) {
      args__5733__auto__.push(arguments[i__5727__auto___9364]);
      var G__9365 = i__5727__auto___9364 + 1;
      i__5727__auto___9364 = G__9365;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq9362) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9362));
};
cljs.core.println = function cljs$core$println(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9367 = arguments.length;
  var i__5727__auto___9368 = 0;
  while (true) {
    if (i__5727__auto___9368 < len__5726__auto___9367) {
      args__5733__auto__.push(arguments[i__5727__auto___9368]);
      var G__9369 = i__5727__auto___9368 + 1;
      i__5727__auto___9368 = G__9369;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq9366) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9366));
};
cljs.core.println_str = function cljs$core$println_str(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9371 = arguments.length;
  var i__5727__auto___9372 = 0;
  while (true) {
    if (i__5727__auto___9372 < len__5726__auto___9371) {
      args__5733__auto__.push(arguments[i__5727__auto___9372]);
      var G__9373 = i__5727__auto___9372 + 1;
      i__5727__auto___9372 = G__9373;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq9370) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9370));
};
cljs.core.prn = function cljs$core$prn(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9375 = arguments.length;
  var i__5727__auto___9376 = 0;
  while (true) {
    if (i__5727__auto___9376 < len__5726__auto___9375) {
      args__5733__auto__.push(arguments[i__5727__auto___9376]);
      var G__9377 = i__5727__auto___9376 + 1;
      i__5727__auto___9376 = G__9377;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq9374) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9374));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__9384_9390 = cljs.core.key(e);
    var G__9385_9391 = w;
    var G__9386_9392 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__9384_9390, G__9385_9391, G__9386_9392) : print_one.call(null, G__9384_9390, G__9385_9391, G__9386_9392);
    cljs.core._write(w, " ");
    var G__9387 = cljs.core.val(e);
    var G__9388 = w;
    var G__9389 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__9387, G__9388, G__9389) : print_one.call(null, G__9387, G__9388, G__9389);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Volatile ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Atom ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Symbol) {
    return cljs.core.compare_symbols(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Keyword) {
    return cljs.core.compare_keywords(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9396 = arguments.length;
  var i__5727__auto___9397 = 0;
  while (true) {
    if (i__5727__auto___9397 < len__5726__auto___9396) {
      args__5733__auto__.push(arguments[i__5727__auto___9397]);
      var G__9398 = i__5727__auto___9397 + 1;
      i__5727__auto___9397 = G__9398;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 2 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(2), 0) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5734__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq9393) {
  var G__9394 = cljs.core.first(seq9393);
  var seq9393__$1 = cljs.core.next(seq9393);
  var G__9395 = cljs.core.first(seq9393__$1);
  var seq9393__$2 = cljs.core.next(seq9393__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9394, G__9395, seq9393__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym(var_args) {
  var args9399 = [];
  var len__5726__auto___9402 = arguments.length;
  var i__5727__auto___9403 = 0;
  while (true) {
    if (i__5727__auto___9403 < len__5726__auto___9402) {
      args9399.push(arguments[i__5727__auto___9403]);
      var G__9404 = i__5727__auto___9403 + 1;
      i__5727__auto___9403 = G__9404;
      continue;
    } else {
    }
    break;
  }
  var G__9401 = args9399.length;
  switch(G__9401) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9399.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(0) : cljs.core.atom.call(null, 0);
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__9406_SHARP_, p2__9407_SHARP_) {
    var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(p1__9406_SHARP_, p2__9407_SHARP_) : rf.call(null, p1__9406_SHARP_, p2__9407_SHARP_);
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__9408 = null;
      var G__9408__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9408__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__9408__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__9408 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__9408__0.call(this);
          case 1:
            return G__9408__1.call(this, result);
          case 2:
            return G__9408__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9408.cljs$core$IFn$_invoke$arity$0 = G__9408__0;
      G__9408.cljs$core$IFn$_invoke$arity$1 = G__9408__1;
      G__9408.cljs$core$IFn$_invoke$arity$2 = G__9408__2;
      return G__9408;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe(var_args) {
  var args9409 = [];
  var len__5726__auto___9412 = arguments.length;
  var i__5727__auto___9413 = 0;
  while (true) {
    if (i__5727__auto___9413 < len__5726__auto___9412) {
      args9409.push(arguments[i__5727__auto___9413]);
      var G__9414 = i__5727__auto___9413 + 1;
      i__5727__auto___9413 = G__9414;
      continue;
    } else {
    }
    break;
  }
  var G__9411 = args9409.length;
  switch(G__9411) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9409.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__9416 = null;
        var G__9416__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9416__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9416__2 = function(result, input) {
          var prior = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__9416 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9416__0.call(this);
            case 1:
              return G__9416__1.call(this, result);
            case 2:
              return G__9416__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9416.cljs$core$IFn$_invoke$arity$0 = G__9416__0;
        G__9416.cljs$core$IFn$_invoke$arity$1 = G__9416__1;
        G__9416.cljs$core$IFn$_invoke$arity$2 = G__9416__2;
        return G__9416;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.rand;
cljs.core.random_sample = function cljs$core$random_sample(var_args) {
  var args9417 = [];
  var len__5726__auto___9420 = arguments.length;
  var i__5727__auto___9421 = 0;
  while (true) {
    if (i__5727__auto___9421 < len__5726__auto___9420) {
      args9417.push(arguments[i__5727__auto___9421]);
      var G__9422 = i__5727__auto___9421 + 1;
      i__5727__auto___9421 = G__9422;
      continue;
    } else {
    }
    break;
  }
  var G__9419 = args9417.length;
  switch(G__9419) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9417.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null)], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5662__auto__ = this;
  return cljs.core.es6_iterator(this__5662__auto__);
};
cljs.core.eduction = function cljs$core$eduction(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9425 = arguments.length;
  var i__5727__auto___9426 = 0;
  while (true) {
    if (i__5727__auto___9426 < len__5726__auto___9425) {
      args__5733__auto__.push(arguments[i__5727__auto___9426]);
      var G__9427 = i__5727__auto___9426 + 1;
      i__5727__auto___9426 = G__9427;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq9424) {
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9424));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__9429_SHARP_, p2__9428_SHARP_) {
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(p2__9428_SHARP_) : proc.call(null, p2__9428_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
};
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_clj__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__5323__auto__ = x == null ? null : x;
    var m__5324__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5324__auto__.call(null, x);
    } else {
      var m__5324__auto____$1 = cljs.core._clj__GT_js["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5324__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
      }
    }
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_key__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__5323__auto__ = x == null ? null : x;
    var m__5324__auto__ = cljs.core._key__GT_js[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5324__auto__.call(null, x);
    } else {
      var m__5324__auto____$1 = cljs.core._key__GT_js["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5324__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
      }
    }
  }
};
cljs.core.clj__GT_js;
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (!(k == null) ? false || k.cljs$core$IEncodeJS$ ? true : !k.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k)) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(k) : cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (!(x == null) ? false || x.cljs$core$IEncodeJS$ ? true : !x.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x)) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return [cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = {};
            var seq__9448_9458 = cljs.core.seq(x);
            var chunk__9449_9459 = null;
            var count__9450_9460 = 0;
            var i__9451_9461 = 0;
            while (true) {
              if (i__9451_9461 < count__9450_9460) {
                var vec__9452_9462 = chunk__9449_9459.cljs$core$IIndexed$_nth$arity$2(null, i__9451_9461);
                var k_9463 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9452_9462, 0, null);
                var v_9464 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9452_9462, 1, null);
                m[cljs.core.key__GT_js(k_9463)] = cljs$core$clj__GT_js(v_9464);
                var G__9465 = seq__9448_9458;
                var G__9466 = chunk__9449_9459;
                var G__9467 = count__9450_9460;
                var G__9468 = i__9451_9461 + 1;
                seq__9448_9458 = G__9465;
                chunk__9449_9459 = G__9466;
                count__9450_9460 = G__9467;
                i__9451_9461 = G__9468;
                continue;
              } else {
                var temp__4425__auto___9469 = cljs.core.seq(seq__9448_9458);
                if (temp__4425__auto___9469) {
                  var seq__9448_9470__$1 = temp__4425__auto___9469;
                  if (cljs.core.chunked_seq_QMARK_(seq__9448_9470__$1)) {
                    var c__5471__auto___9471 = cljs.core.chunk_first(seq__9448_9470__$1);
                    var G__9472 = cljs.core.chunk_rest(seq__9448_9470__$1);
                    var G__9473 = c__5471__auto___9471;
                    var G__9474 = cljs.core.count(c__5471__auto___9471);
                    var G__9475 = 0;
                    seq__9448_9458 = G__9472;
                    chunk__9449_9459 = G__9473;
                    count__9450_9460 = G__9474;
                    i__9451_9461 = G__9475;
                    continue;
                  } else {
                    var vec__9453_9476 = cljs.core.first(seq__9448_9470__$1);
                    var k_9477 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9453_9476, 0, null);
                    var v_9478 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9453_9476, 1, null);
                    m[cljs.core.key__GT_js(k_9477)] = cljs$core$clj__GT_js(v_9478);
                    var G__9479 = cljs.core.next(seq__9448_9470__$1);
                    var G__9480 = null;
                    var G__9481 = 0;
                    var G__9482 = 0;
                    seq__9448_9458 = G__9479;
                    chunk__9449_9459 = G__9480;
                    count__9450_9460 = G__9481;
                    i__9451_9461 = G__9482;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__9454_9483 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__9455_9484 = null;
              var count__9456_9485 = 0;
              var i__9457_9486 = 0;
              while (true) {
                if (i__9457_9486 < count__9456_9485) {
                  var x_9487__$1 = chunk__9455_9484.cljs$core$IIndexed$_nth$arity$2(null, i__9457_9486);
                  arr.push(x_9487__$1);
                  var G__9488 = seq__9454_9483;
                  var G__9489 = chunk__9455_9484;
                  var G__9490 = count__9456_9485;
                  var G__9491 = i__9457_9486 + 1;
                  seq__9454_9483 = G__9488;
                  chunk__9455_9484 = G__9489;
                  count__9456_9485 = G__9490;
                  i__9457_9486 = G__9491;
                  continue;
                } else {
                  var temp__4425__auto___9492 = cljs.core.seq(seq__9454_9483);
                  if (temp__4425__auto___9492) {
                    var seq__9454_9493__$1 = temp__4425__auto___9492;
                    if (cljs.core.chunked_seq_QMARK_(seq__9454_9493__$1)) {
                      var c__5471__auto___9494 = cljs.core.chunk_first(seq__9454_9493__$1);
                      var G__9495 = cljs.core.chunk_rest(seq__9454_9493__$1);
                      var G__9496 = c__5471__auto___9494;
                      var G__9497 = cljs.core.count(c__5471__auto___9494);
                      var G__9498 = 0;
                      seq__9454_9483 = G__9495;
                      chunk__9455_9484 = G__9496;
                      count__9456_9485 = G__9497;
                      i__9457_9486 = G__9498;
                      continue;
                    } else {
                      var x_9499__$1 = cljs.core.first(seq__9454_9493__$1);
                      arr.push(x_9499__$1);
                      var G__9500 = cljs.core.next(seq__9454_9493__$1);
                      var G__9501 = null;
                      var G__9502 = 0;
                      var G__9503 = 0;
                      seq__9454_9483 = G__9500;
                      chunk__9455_9484 = G__9501;
                      count__9456_9485 = G__9502;
                      i__9457_9486 = G__9503;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
};
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (!(x == null) && !(x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2 == null)) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__5323__auto__ = x == null ? null : x;
    var m__5324__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__5324__auto__.call(null, x, options);
    } else {
      var m__5324__auto____$1 = cljs.core._js__GT_clj["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(x, options) : m__5324__auto____$1.call(null, x, options);
      } else {
        throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
      }
    }
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj(var_args) {
  var args9504 = [];
  var len__5726__auto___9529 = arguments.length;
  var i__5727__auto___9530 = 0;
  while (true) {
    if (i__5727__auto___9530 < len__5726__auto___9529) {
      args9504.push(arguments[i__5727__auto___9530]);
      var G__9531 = i__5727__auto___9530 + 1;
      i__5727__auto___9530 = G__9531;
      continue;
    } else {
    }
    break;
  }
  var G__9508 = args9504.length;
  switch(G__9508) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args9504.slice(1), 0);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5745__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__9509 = opts;
  var map__9509__$1 = (!(map__9509 == null) ? map__9509.cljs$lang$protocol_mask$partition0$ & 64 || map__9509.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__9509) : map__9509;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9509__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__9509, map__9509__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (!(x__$1 == null) ? false || x__$1.cljs$core$IEncodeClojure$ ? true : !x__$1.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1)) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__5440__auto__ = function(map__9509, map__9509__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__9523(s__9524) {
                      return new cljs.core.LazySeq(null, function(map__9509, map__9509__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__9524__$1 = s__9524;
                          while (true) {
                            var temp__4425__auto__ = cljs.core.seq(s__9524__$1);
                            if (temp__4425__auto__) {
                              var s__9524__$2 = temp__4425__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__9524__$2)) {
                                var c__5438__auto__ = cljs.core.chunk_first(s__9524__$2);
                                var size__5439__auto__ = cljs.core.count(c__5438__auto__);
                                var b__9526 = cljs.core.chunk_buffer(size__5439__auto__);
                                if (function() {
                                  var i__9525 = 0;
                                  while (true) {
                                    if (i__9525 < size__5439__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__5438__auto__, i__9525);
                                      cljs.core.chunk_append(b__9526, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null));
                                      var G__9533 = i__9525 + 1;
                                      i__9525 = G__9533;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__9526), cljs$core$thisfn_$_iter__9523(cljs.core.chunk_rest(s__9524__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__9526), null);
                                }
                              } else {
                                var k = cljs.core.first(s__9524__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__9523(cljs.core.rest(s__9524__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__9509, map__9509__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__9509, map__9509__$1, keywordize_keys, keyfn);
                  return iter__5440__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__9509, map__9509__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq9505) {
  var G__9506 = cljs.core.first(seq9505);
  var seq9505__$1 = cljs.core.next(seq9505);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__9506, seq9505__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__9535 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__9535) : cljs.core.atom.call(null, G__9535);
  }();
  return function(mem) {
    return function() {
      var G__9536__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(mem) : cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__9536 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__9537__i = 0, G__9537__a = new Array(arguments.length - 0);
          while (G__9537__i < G__9537__a.length) {
            G__9537__a[G__9537__i] = arguments[G__9537__i + 0];
            ++G__9537__i;
          }
          args = new cljs.core.IndexedSeq(G__9537__a, 0);
        }
        return G__9536__delegate.call(this, args);
      };
      G__9536.cljs$lang$maxFixedArity = 0;
      G__9536.cljs$lang$applyTo = function(arglist__9538) {
        var args = cljs.core.seq(arglist__9538);
        return G__9536__delegate(args);
      };
      G__9536.cljs$core$IFn$_invoke$arity$variadic = G__9536__delegate;
      return G__9536;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline(var_args) {
  var args9539 = [];
  var len__5726__auto___9544 = arguments.length;
  var i__5727__auto___9545 = 0;
  while (true) {
    if (i__5727__auto___9545 < len__5726__auto___9544) {
      args9539.push(arguments[i__5727__auto___9545]);
      var G__9546 = i__5727__auto___9545 + 1;
      i__5727__auto___9545 = G__9546;
      continue;
    } else {
    }
    break;
  }
  var G__9543 = args9539.length;
  switch(G__9543) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5745__auto__ = new cljs.core.IndexedSeq(args9539.slice(1), 0);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5745__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    if (cljs.core.fn_QMARK_(ret)) {
      var G__9548 = ret;
      f = G__9548;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq9540) {
  var G__9541 = cljs.core.first(seq9540);
  var seq9540__$1 = cljs.core.next(seq9540);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__9541, seq9540__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand(var_args) {
  var args9549 = [];
  var len__5726__auto___9552 = arguments.length;
  var i__5727__auto___9553 = 0;
  while (true) {
    if (i__5727__auto___9553 < len__5726__auto___9552) {
      args9549.push(arguments[i__5727__auto___9553]);
      var G__9554 = i__5727__auto___9553 + 1;
      i__5727__auto___9553 = G__9554;
      continue;
    } else {
    }
    break;
  }
  var G__9551 = args9549.length;
  switch(G__9551) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9549.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return Math.random() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__9557 = Math.random() * n;
  return Math.floor(G__9557);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__9559 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__9559) : cljs.core.atom.call(null, G__9559);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9562 = arguments.length;
  var i__5727__auto___9563 = 0;
  while (true) {
    if (i__5727__auto___9563 < len__5726__auto___9562) {
      args__5733__auto__.push(arguments[i__5727__auto___9563]);
      var G__9564 = i__5727__auto___9563 + 1;
      i__5727__auto___9563 = G__9564;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 1 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(1), 0) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5734__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq9560) {
  var G__9561 = cljs.core.first(seq9560);
  var seq9560__$1 = cljs.core.next(seq9560);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9561, seq9560__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_(var_args) {
  var args9565 = [];
  var len__5726__auto___9569 = arguments.length;
  var i__5727__auto___9570 = 0;
  while (true) {
    if (i__5727__auto___9570 < len__5726__auto___9569) {
      args9565.push(arguments[i__5727__auto___9570]);
      var G__9571 = i__5727__auto___9570 + 1;
      i__5727__auto___9570 = G__9571;
      continue;
    } else {
    }
    break;
  }
  var G__9567 = args9565.length;
  switch(G__9567) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9565.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__9568 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9568) : cljs.core.deref.call(null, G__9568);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__4668__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__4668__auto__) {
    return or__4668__auto__;
  } else {
    var or__4668__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__4668__auto____$1) {
      return or__4668__auto____$1;
    } else {
      var and__4656__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__4656__auto__) {
        var and__4656__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__4656__auto____$1) {
          var and__4656__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__4656__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__9573 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(i) : child.call(null, i), parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(i) : parent.call(null, i));
                var G__9574 = i + 1;
                ret = G__9573;
                i = G__9574;
                continue;
              }
              break;
            }
          } else {
            return and__4656__auto____$2;
          }
        } else {
          return and__4656__auto____$1;
        }
      } else {
        return and__4656__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents(var_args) {
  var args9575 = [];
  var len__5726__auto___9579 = arguments.length;
  var i__5727__auto___9580 = 0;
  while (true) {
    if (i__5727__auto___9580 < len__5726__auto___9579) {
      args9575.push(arguments[i__5727__auto___9580]);
      var G__9581 = i__5727__auto___9580 + 1;
      i__5727__auto___9580 = G__9581;
      continue;
    } else {
    }
    break;
  }
  var G__9577 = args9575.length;
  switch(G__9577) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9575.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__9578 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9578) : cljs.core.deref.call(null, G__9578);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors(var_args) {
  var args9583 = [];
  var len__5726__auto___9587 = arguments.length;
  var i__5727__auto___9588 = 0;
  while (true) {
    if (i__5727__auto___9588 < len__5726__auto___9587) {
      args9583.push(arguments[i__5727__auto___9588]);
      var G__9589 = i__5727__auto___9588 + 1;
      i__5727__auto___9588 = G__9589;
      continue;
    } else {
    }
    break;
  }
  var G__9585 = args9583.length;
  switch(G__9585) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9583.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__9586 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9586) : cljs.core.deref.call(null, G__9586);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants(var_args) {
  var args9591 = [];
  var len__5726__auto___9595 = arguments.length;
  var i__5727__auto___9596 = 0;
  while (true) {
    if (i__5727__auto___9596 < len__5726__auto___9595) {
      args9591.push(arguments[i__5727__auto___9596]);
      var G__9597 = i__5727__auto___9596 + 1;
      i__5727__auto___9596 = G__9597;
      continue;
    } else {
    }
    break;
  }
  var G__9593 = args9591.length;
  switch(G__9593) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9591.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__9594 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9594) : cljs.core.deref.call(null, G__9594);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive(var_args) {
  var args9599 = [];
  var len__5726__auto___9602 = arguments.length;
  var i__5727__auto___9603 = 0;
  while (true) {
    if (i__5727__auto___9603 < len__5726__auto___9602) {
      args9599.push(arguments[i__5727__auto___9603]);
      var G__9604 = i__5727__auto___9603 + 1;
      i__5727__auto___9603 = G__9604;
      continue;
    } else {
    }
    break;
  }
  var G__9601 = args9599.length;
  switch(G__9601) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9599.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(target) : targets.call(null, target))));
        };
      }(tp, td, ta), m, cljs.core.cons(source, sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(source) : sources.call(null, source)));
    };
  }(tp, td, ta);
  var or__4668__auto__ = cljs.core.contains_QMARK_(tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(tag) : tp.call(null, tag), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(tag) : ta.call(null, tag), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(parent) : ta.call(null, parent), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__4668__auto__)) {
    return or__4668__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive(var_args) {
  var args9609 = [];
  var len__5726__auto___9612 = arguments.length;
  var i__5727__auto___9613 = 0;
  while (true) {
    if (i__5727__auto___9613 < len__5726__auto___9612) {
      args9609.push(arguments[i__5727__auto___9613]);
      var G__9614 = i__5727__auto___9613 + 1;
      i__5727__auto___9613 = G__9614;
      continue;
    } else {
    }
    break;
  }
  var G__9611 = args9609.length;
  switch(G__9611) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9609.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag)) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__9606_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__9606_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__9606_SHARP_), cljs.core.second(p1__9606_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__9607_SHARP_, p2__9608_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__9607_SHARP_, p2__9608_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(prefer_table) : cljs.core.deref.call(null, prefer_table)).call(null, x);
  var or__4668__auto__ = cljs.core.truth_(function() {
    var and__4656__auto__ = xprefs;
    if (cljs.core.truth_(and__4656__auto__)) {
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(y) : xprefs.call(null, y);
    } else {
      return and__4656__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4668__auto__)) {
    return or__4668__auto__;
  } else {
    var or__4668__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__9628 = cljs.core.rest(ps);
          ps = G__9628;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4668__auto____$1)) {
      return or__4668__auto____$1;
    } else {
      var or__4668__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__9629 = cljs.core.rest(ps);
            ps = G__9629;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4668__auto____$2)) {
        return or__4668__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4668__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4668__auto__)) {
    return or__4668__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__9632) {
    var vec__9633 = p__9632;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9633, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9633, 1, null);
    var e = vec__9633;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4668__auto__ = be == null;
        if (or__4668__auto__) {
          return or__4668__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cached_hierarchy) : cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
};
cljs.core._reset = function cljs$core$_reset(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_reset$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__5323__auto__ = mf == null ? null : mf;
    var m__5324__auto__ = cljs.core._reset[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5324__auto__.call(null, mf);
    } else {
      var m__5324__auto____$1 = cljs.core._reset["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5324__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
      }
    }
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_add_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__5323__auto__ = mf == null ? null : mf;
    var m__5324__auto__ = cljs.core._add_method[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__5324__auto__.call(null, mf, dispatch_val, method);
    } else {
      var m__5324__auto____$1 = cljs.core._add_method["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__5324__auto____$1.call(null, mf, dispatch_val, method);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
      }
    }
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_remove_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__5323__auto__ = mf == null ? null : mf;
    var m__5324__auto__ = cljs.core._remove_method[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__5324__auto__.call(null, mf, dispatch_val);
    } else {
      var m__5324__auto____$1 = cljs.core._remove_method["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__5324__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
      }
    }
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefer_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__5323__auto__ = mf == null ? null : mf;
    var m__5324__auto__ = cljs.core._prefer_method[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__5324__auto__.call(null, mf, dispatch_val, dispatch_val_y);
    } else {
      var m__5324__auto____$1 = cljs.core._prefer_method["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__5324__auto____$1.call(null, mf, dispatch_val, dispatch_val_y);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
      }
    }
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_get_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__5323__auto__ = mf == null ? null : mf;
    var m__5324__auto__ = cljs.core._get_method[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__5324__auto__.call(null, mf, dispatch_val);
    } else {
      var m__5324__auto____$1 = cljs.core._get_method["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__5324__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
      }
    }
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_methods$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__5323__auto__ = mf == null ? null : mf;
    var m__5324__auto__ = cljs.core._methods[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5324__auto__.call(null, mf);
    } else {
      var m__5324__auto____$1 = cljs.core._methods["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5324__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
      }
    }
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefers$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__5323__auto__ = mf == null ? null : mf;
    var m__5324__auto__ = cljs.core._prefers[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5324__auto__.call(null, mf);
    } else {
      var m__5324__auto____$1 = cljs.core._prefers["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5324__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
      }
    }
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__5323__auto__ = mf == null ? null : mf;
    var m__5324__auto__ = cljs.core._default_dispatch_val[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5324__auto__.call(null, mf);
    } else {
      var m__5324__auto____$1 = cljs.core._default_dispatch_val["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5324__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
      }
    }
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_dispatch_fn$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__5323__auto__ = mf == null ? null : mf;
    var m__5324__auto__ = cljs.core._dispatch_fn[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5324__auto__.call(null, mf);
    } else {
      var m__5324__auto____$1 = cljs.core._dispatch_fn["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5324__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5324__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
      }
    }
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__9635 = null;
  var G__9635__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__9635__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
  };
  var G__9635__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
  };
  var G__9635__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
  };
  var G__9635__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
  };
  var G__9635__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
  };
  var G__9635__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
  };
  var G__9635__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__9635__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__9635__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__9635__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__9635__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__9635__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__9635__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__9635__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__9635__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__9635__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__9635__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__9635__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__9635__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__9635__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__9635__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__9635 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__9635__1.call(this, self__);
      case 2:
        return G__9635__2.call(this, self__, a);
      case 3:
        return G__9635__3.call(this, self__, a, b);
      case 4:
        return G__9635__4.call(this, self__, a, b, c);
      case 5:
        return G__9635__5.call(this, self__, a, b, c, d);
      case 6:
        return G__9635__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__9635__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__9635__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__9635__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__9635__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__9635__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__9635__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__9635__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__9635__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__9635__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__9635__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__9635__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__9635__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__9635__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__9635__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__9635__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__9635__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9635.cljs$core$IFn$_invoke$arity$1 = G__9635__1;
  G__9635.cljs$core$IFn$_invoke$arity$2 = G__9635__2;
  G__9635.cljs$core$IFn$_invoke$arity$3 = G__9635__3;
  G__9635.cljs$core$IFn$_invoke$arity$4 = G__9635__4;
  G__9635.cljs$core$IFn$_invoke$arity$5 = G__9635__5;
  G__9635.cljs$core$IFn$_invoke$arity$6 = G__9635__6;
  G__9635.cljs$core$IFn$_invoke$arity$7 = G__9635__7;
  G__9635.cljs$core$IFn$_invoke$arity$8 = G__9635__8;
  G__9635.cljs$core$IFn$_invoke$arity$9 = G__9635__9;
  G__9635.cljs$core$IFn$_invoke$arity$10 = G__9635__10;
  G__9635.cljs$core$IFn$_invoke$arity$11 = G__9635__11;
  G__9635.cljs$core$IFn$_invoke$arity$12 = G__9635__12;
  G__9635.cljs$core$IFn$_invoke$arity$13 = G__9635__13;
  G__9635.cljs$core$IFn$_invoke$arity$14 = G__9635__14;
  G__9635.cljs$core$IFn$_invoke$arity$15 = G__9635__15;
  G__9635.cljs$core$IFn$_invoke$arity$16 = G__9635__16;
  G__9635.cljs$core$IFn$_invoke$arity$17 = G__9635__17;
  G__9635.cljs$core$IFn$_invoke$arity$18 = G__9635__18;
  G__9635.cljs$core$IFn$_invoke$arity$19 = G__9635__19;
  G__9635.cljs$core$IFn$_invoke$arity$20 = G__9635__20;
  G__9635.cljs$core$IFn$_invoke$arity$21 = G__9635__21;
  G__9635.cljs$core$IFn$_invoke$arity$22 = G__9635__22;
  return G__9635;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args9634) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9634)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.prefer_table) : cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.cached_hierarchy) : cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.hierarchy) : cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4423__auto__ = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_cache) : cljs.core.deref.call(null, self__.method_cache)).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var target_fn = temp__4423__auto__;
    return target_fn;
  } else {
    var temp__4423__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var target_fn = temp__4423__auto____$1;
      return target_fn;
    } else {
      return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table)).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null), new cljs.core.Symbol(null, 
  "prefer-table", "prefer-table", 462168584, null), new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null)], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid, __hash) {
  this.uuid = uuid;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = cljs.core.hash(self__.uuid);
  } else {
  }
  return self__.__hash;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__9636 = self__.uuid;
  var G__9637 = other.uuid;
  return goog.array.defaultCompare(G__9636, G__9637);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid, __hash) {
  return new cljs.core.UUID(uuid, __hash);
};
cljs.core.uuid = function cljs$core$uuid(s) {
  return new cljs.core.UUID(s, null);
};
cljs.core.random_uuid = function cljs$core$random_uuid() {
  var hex = function cljs$core$random_uuid_$_hex() {
    return cljs.core.rand_int(16).toString(16);
  };
  var rhex = (8 | 3 & cljs.core.rand_int(16)).toString(16);
  return cljs.core.uuid([cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str("4"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(rhex), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), 
  cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex())].join(""));
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#error {:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error(message);
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info(var_args) {
  var args9638 = [];
  var len__5726__auto___9641 = arguments.length;
  var i__5727__auto___9642 = 0;
  while (true) {
    if (i__5727__auto___9642 < len__5726__auto___9641) {
      args9638.push(arguments[i__5727__auto___9642]);
      var G__9643 = i__5727__auto___9642 + 1;
      i__5727__auto___9642 = G__9643;
      continue;
    } else {
    }
    break;
  }
  var G__9640 = args9638.length;
  switch(G__9640) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9638.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(x, y) : pred.call(null, x, y))) {
      return -1;
    } else {
      if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(y, x) : pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 2153775360;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this$__$1, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__9645 = v instanceof cljs.core.Keyword ? v.fqn : null;
  switch(G__9645) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
  var self__ = this;
  var o__$1 = this;
  cljs.core._write(writer, [cljs.core.str("#"), cljs.core.str(self__.tag), cljs.core.str(" ")].join(""));
  return cljs.core.pr_writer(self__.form, writer, opts);
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "symbol?", "symbol?", 1820680511, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))], 0)))].join(""));
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.js_reserved_arr = ["abstract", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", 
"transient", "try", "typeof", "var", "void", "volatile", "while", "with", "yield", "methods", "null"];
cljs.core.js_reserved = null;
cljs.core.js_reserved_QMARK_ = function cljs$core$js_reserved_QMARK_(x) {
  if (cljs.core.js_reserved == null) {
    cljs.core.js_reserved = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__9647_SHARP_, p2__9648_SHARP_) {
      goog.object.set(p1__9647_SHARP_, p2__9648_SHARP_, true);
      return p1__9647_SHARP_;
    }, {}, cljs.core.js_reserved_arr);
  } else {
  }
  return cljs.core.js_reserved.hasOwnProperty(x);
};
cljs.core.demunge_pattern = function cljs$core$demunge_pattern() {
  if (cljs.core.truth_(cljs.core.DEMUNGE_PATTERN)) {
  } else {
    cljs.core.DEMUNGE_PATTERN = function() {
      var ks = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(a, b) {
        return b.length - a.length;
      }, cljs.core.js_keys(cljs.core.DEMUNGE_MAP));
      var ks__$1 = ks;
      var ret = "";
      while (true) {
        if (cljs.core.seq(ks__$1)) {
          var G__9651 = cljs.core.next(ks__$1);
          var G__9652 = [cljs.core.str(function() {
            var G__9650 = ret;
            var G__9650__$1 = !(ret === "") ? [cljs.core.str(G__9650), cljs.core.str("|")].join("") : G__9650;
            return G__9650__$1;
          }()), cljs.core.str(cljs.core.first(ks__$1))].join("");
          ks__$1 = G__9651;
          ret = G__9652;
          continue;
        } else {
          return [cljs.core.str(ret), cljs.core.str("|\\$")].join("");
        }
        break;
      }
    }();
  }
  return cljs.core.DEMUNGE_PATTERN;
};
cljs.core.munge_str = function cljs$core$munge_str(name) {
  var sb = new goog.string.StringBuffer;
  var i_9653 = 0;
  while (true) {
    if (i_9653 < name.length) {
      var c_9654 = name.charAt(i_9653);
      var sub_9655 = goog.object.get(cljs.core.CHAR_MAP, c_9654);
      if (!(sub_9655 == null)) {
        sb.append(sub_9655);
      } else {
        sb.append(c_9654);
      }
      var G__9656 = i_9653 + 1;
      i_9653 = G__9656;
      continue;
    } else {
    }
    break;
  }
  return sb.toString();
};
cljs.core.munge = function cljs$core$munge(name) {
  var name_SINGLEQUOTE_ = cljs.core.munge_str([cljs.core.str(name)].join(""));
  var name_SINGLEQUOTE___$1 = name_SINGLEQUOTE_ === ".." ? "_DOT__DOT_" : cljs.core.truth_(cljs.core.js_reserved_QMARK_(name_SINGLEQUOTE_)) ? [cljs.core.str(name_SINGLEQUOTE_), cljs.core.str("$")].join("") : name_SINGLEQUOTE_;
  if (name instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1);
  } else {
    return [cljs.core.str(name_SINGLEQUOTE___$1)].join("");
  }
};
cljs.core.demunge_str = function cljs$core$demunge_str(munged_name) {
  var r = new RegExp(cljs.core.demunge_pattern(), "g");
  var munged_name__$1 = cljs.core.truth_(goog.string.endsWith(munged_name, "$")) ? munged_name.substring(0, munged_name.length - 1) : munged_name;
  var ret = "";
  var last_match_end = 0;
  while (true) {
    var temp__4423__auto__ = r.exec(munged_name__$1);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var match = temp__4423__auto__;
      var vec__9658 = match;
      var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9658, 0, null);
      var G__9659 = [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, r.lastIndex - x.length)), cljs.core.str(x === "$" ? "/" : goog.object.get(cljs.core.DEMUNGE_MAP, x))].join("");
      var G__9660 = r.lastIndex;
      ret = G__9659;
      last_match_end = G__9660;
      continue;
    } else {
      return [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, munged_name__$1.length))].join("");
    }
    break;
  }
};
cljs.core.demunge = function cljs$core$demunge(name) {
  return (name instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.str).call(null, function() {
    var name_SINGLEQUOTE_ = [cljs.core.str(name)].join("");
    if (name_SINGLEQUOTE_ === "_DOT__DOT_") {
      return "..";
    } else {
      return cljs.core.demunge_str([cljs.core.str(name)].join(""));
    }
  }());
};
cljs.core.ns_lookup = function cljs$core$ns_lookup(ns_obj, k) {
  return function() {
    return goog.object.get(ns_obj, k);
  };
};
cljs.core.Namespace = function(obj, name) {
  this.obj = obj;
  this.name = name;
  this.cljs$lang$protocol_mask$partition0$ = 6291456;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Namespace.prototype.findInternedVar = function(sym) {
  var self__ = this;
  var this$ = this;
  var k = cljs.core.munge([cljs.core.str(sym)].join(""));
  if (goog.object.containsKey(self__.obj, k)) {
    var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(self__.name)].join(""), [cljs.core.str(sym)].join(""));
    var var_meta = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), this$], null);
    return new cljs.core.Var(cljs.core.ns_lookup(self__.obj, k), var_sym, var_meta);
  } else {
    return null;
  }
};
cljs.core.Namespace.prototype.getName = function() {
  var self__ = this;
  var _ = this;
  return self__.name;
};
cljs.core.Namespace.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(self__.name)].join("");
};
cljs.core.Namespace.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Namespace) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.name, other.name);
  } else {
    return false;
  }
};
cljs.core.Namespace.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash(self__.name);
};
cljs.core.Namespace.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "obj", "obj", -1672671807, null), new cljs.core.Symbol(null, "name", "name", -810760592, null)], null);
};
cljs.core.Namespace.cljs$lang$type = true;
cljs.core.Namespace.cljs$lang$ctorStr = "cljs.core/Namespace";
cljs.core.Namespace.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write(writer__5267__auto__, "cljs.core/Namespace");
};
cljs.core.__GT_Namespace = function cljs$core$__GT_Namespace(obj, name) {
  return new cljs.core.Namespace(obj, name);
};
cljs.core.NS_CACHE = null;
cljs.core.find_ns_obj_STAR_ = function cljs$core$find_ns_obj_STAR_(ctxt, xs) {
  while (true) {
    if (ctxt == null) {
      return null;
    } else {
      if (xs == null) {
        return ctxt;
      } else {
        var G__9665 = function() {
          var G__9663 = ctxt;
          var G__9664 = cljs.core.first(xs);
          return goog.object.get(G__9663, G__9664);
        }();
        var G__9666 = cljs.core.next(xs);
        ctxt = G__9665;
        xs = G__9666;
        continue;
      }
    }
    break;
  }
};
cljs.core.find_ns_obj = function cljs$core$find_ns_obj(ns) {
  var munged_ns = cljs.core.munge([cljs.core.str(ns)].join(""));
  var segs = munged_ns.split(".");
  var G__9670 = cljs.core._STAR_target_STAR_;
  switch(G__9670) {
    case "nodejs":
      if (COMPILED) {
        return cljs.core.find_ns_obj_STAR_(function() {
          try {
            var G__9672 = cljs.core.first(segs);
            return eval(G__9672);
          } catch (e9671) {
            if (e9671 instanceof ReferenceError) {
              var e = e9671;
              return null;
            } else {
              throw e9671;
            }
          }
        }(), cljs.core.next(segs));
      } else {
        return cljs.core.find_ns_obj_STAR_(global, segs);
      }
      break;
    case "default":
      return cljs.core.find_ns_obj_STAR_(goog.global, segs);
      break;
    default:
      throw new Error([cljs.core.str("find-ns-obj not supported for target "), cljs.core.str(cljs.core._STAR_target_STAR_)].join(""));;
  }
};
cljs.core.ns_interns_STAR_ = function cljs$core$ns_interns_STAR_(sym) {
  var ns_obj = cljs.core.find_ns_obj(sym);
  var ns = new cljs.core.Namespace(ns_obj, sym);
  var step = function(ns_obj, ns) {
    return function cljs$core$ns_interns_STAR__$_step(ret, k) {
      var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(k));
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, var_sym, new cljs.core.Var(function(var_sym, ns_obj, ns) {
        return function() {
          return goog.object.get(ns_obj, k);
        };
      }(var_sym, ns_obj, ns), cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(sym)].join(""), [cljs.core.str(var_sym)].join("")), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns], null)));
    };
  }(ns_obj, ns);
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(step, cljs.core.PersistentArrayMap.EMPTY, cljs.core.js_keys(ns_obj));
};
cljs.core.create_ns = function cljs$core$create_ns(var_args) {
  var args9674 = [];
  var len__5726__auto___9677 = arguments.length;
  var i__5727__auto___9678 = 0;
  while (true) {
    if (i__5727__auto___9678 < len__5726__auto___9677) {
      args9674.push(arguments[i__5727__auto___9678]);
      var G__9679 = i__5727__auto___9678 + 1;
      i__5727__auto___9678 = G__9679;
      continue;
    } else {
    }
    break;
  }
  var G__9676 = args9674.length;
  switch(G__9676) {
    case 1:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9674.length)].join(""));;
  }
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1 = function(sym) {
  return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym, cljs.core.find_ns_obj(sym));
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2 = function(sym, ns_obj) {
  return new cljs.core.Namespace(ns_obj, sym);
};
cljs.core.create_ns.cljs$lang$maxFixedArity = 2;
cljs.core.find_ns = function cljs$core$find_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__9682 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__9682) : cljs.core.atom.call(null, G__9682);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_obj = cljs.core.find_ns_obj(ns);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns, new_ns);
      return new_ns;
    }
  }
};
cljs.core.find_macros_ns = function cljs$core$find_macros_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__9684 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__9684) : cljs.core.atom.call(null, G__9684);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_str = [cljs.core.str(ns)].join("");
    var ns__$1 = !goog.string.contains(ns_str, "$macros") ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(ns_str), cljs.core.str("$macros")].join("")) : ns;
    var ns_obj = cljs.core.find_ns_obj(ns__$1);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns__$1, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns__$1, new_ns);
      return new_ns;
    }
  }
};
cljs.core.ns_name = function cljs$core$ns_name(ns_obj) {
  return ns_obj.name;
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
};
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (!(port == null) && !(port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 == null)) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__5323__auto__ = port == null ? null : port;
    var m__5324__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, port, fn1_handler);
    } else {
      var m__5324__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, port, fn1_handler);
      } else {
        throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
      }
    }
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
};
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (!(port == null) && !(port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 == null)) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__5323__auto__ = port == null ? null : port;
    var m__5324__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, port, val, fn1_handler);
    } else {
      var m__5324__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, port, val, fn1_handler);
      } else {
        throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
      }
    }
  }
};
cljs.core.async.impl.protocols.Channel = function() {
};
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (!(chan == null) && !(chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 == null)) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__5323__auto__ = chan == null ? null : chan;
    var m__5324__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, chan);
    } else {
      var m__5324__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, chan);
      } else {
        throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
      }
    }
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (!(chan == null) && !(chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 == null)) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__5323__auto__ = chan == null ? null : chan;
    var m__5324__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, chan);
    } else {
      var m__5324__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, chan);
      } else {
        throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
      }
    }
  }
};
cljs.core.async.impl.protocols.Handler = function() {
};
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__5323__auto__ = h == null ? null : h;
    var m__5324__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, h);
    } else {
      var m__5324__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, h);
      } else {
        throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
      }
    }
  }
};
cljs.core.async.impl.protocols.blockable_QMARK_ = function cljs$core$async$impl$protocols$blockable_QMARK_(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1(h);
  } else {
    var x__5323__auto__ = h == null ? null : h;
    var m__5324__auto__ = cljs.core.async.impl.protocols.blockable_QMARK_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, h);
    } else {
      var m__5324__auto____$1 = cljs.core.async.impl.protocols.blockable_QMARK_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, h);
      } else {
        throw cljs.core.missing_protocol.call(null, "Handler.blockable?", h);
      }
    }
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$commit$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__5323__auto__ = h == null ? null : h;
    var m__5324__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, h);
    } else {
      var m__5324__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, h);
      } else {
        throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
      }
    }
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
};
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__5323__auto__ = b == null ? null : b;
    var m__5324__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, b);
    } else {
      var m__5324__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, b);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__5323__auto__ = b == null ? null : b;
    var m__5324__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, b);
    } else {
      var m__5324__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, b);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__5323__auto__ = b == null ? null : b;
    var m__5324__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, b, itm);
    } else {
      var m__5324__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, b, itm);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.close_buf_BANG_ = function cljs$core$async$impl$protocols$close_buf_BANG_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1(b);
  } else {
    var x__5323__auto__ = b == null ? null : b;
    var m__5324__auto__ = cljs.core.async.impl.protocols.close_buf_BANG_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, b);
    } else {
      var m__5324__auto____$1 = cljs.core.async.impl.protocols.close_buf_BANG_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, b);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.close-buf!", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function cljs$core$async$impl$protocols$add_BANG_(var_args) {
  var args10094 = [];
  var len__5726__auto___10097 = arguments.length;
  var i__5727__auto___10098 = 0;
  while (true) {
    if (i__5727__auto___10098 < len__5726__auto___10097) {
      args10094.push(arguments[i__5727__auto___10098]);
      var G__10099 = i__5727__auto___10098 + 1;
      i__5727__auto___10098 = G__10099;
      continue;
    } else {
    }
    break;
  }
  var G__10096 = args10094.length;
  switch(G__10096) {
    case 1:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10094.length)].join(""));;
  }
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = function(b) {
  return b;
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = function(b, itm) {
  if (!(itm == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
  }
  return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
};
cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__10103 = cnt + 1;
      cnt = G__10103;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__5571__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__5571__auto__) {
      var v_10104 = this$.pop();
      if (keep_QMARK_.call(null, v_10104)) {
        this$.unshift(v_10104);
      } else {
      }
      var G__10105 = x + 1;
      x = G__10105;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "head", "head", 869147608, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "length", "length", -2065447907, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
if (typeof cljs.core.async.impl.buffers.NO_VAL !== "undefined") {
} else {
  cljs.core.async.impl.buffers.NO_VAL = new Object;
}
cljs.core.async.impl.buffers.undelivered_QMARK_ = function cljs$core$async$impl$buffers$undelivered_QMARK_(val) {
  return cljs.core.async.impl.buffers.NO_VAL === val;
};
cljs.core.async.impl.buffers.PromiseBuffer = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return false;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    self__.val = itm;
  } else {
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    return self__.val = null;
  } else {
    return null;
  }
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    return 0;
  } else {
    return 1;
  }
};
cljs.core.async.impl.buffers.PromiseBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/PromiseBuffer";
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async.impl.buffers/PromiseBuffer");
};
cljs.core.async.impl.buffers.__GT_PromiseBuffer = function cljs$core$async$impl$buffers$__GT_PromiseBuffer(val) {
  return new cljs.core.async.impl.buffers.PromiseBuffer(val);
};
cljs.core.async.impl.buffers.promise_buffer = function cljs$core$async$impl$buffers$promise_buffer() {
  return new cljs.core.async.impl.buffers.PromiseBuffer(cljs.core.async.impl.buffers.NO_VAL);
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEMPLATE:"TEMPLATE", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.equalTo = function(value, opt_useLooseComparison) {
  return function(other) {
    return opt_useLooseComparison ? value == other : value === other;
  };
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.functions.once = function(f) {
  var inner = f;
  return function() {
    if (inner) {
      var tmp = inner;
      inner = null;
      tmp();
    }
  };
};
goog.functions.debounce = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  return (function(var_args) {
    goog.global.clearTimeout(timeout);
    var args = arguments;
    timeout = goog.global.setTimeout(function() {
      f.apply(null, args);
    }, interval);
  });
};
goog.functions.throttle = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  var shouldFire = false;
  var args = [];
  var handleTimeout = function() {
    timeout = null;
    if (shouldFire) {
      shouldFire = false;
      fire();
    }
  };
  var fire = function() {
    timeout = goog.global.setTimeout(handleTimeout, interval);
    f.apply(null, args);
  };
  return (function(var_args) {
    args = arguments;
    if (!timeout) {
      fire();
    } else {
      shouldFire = true;
    }
  });
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.object");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchEdge_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdge_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchOpera_() && !goog.labs.userAgent.browser.matchEdge_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });
  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || "";
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return lookUpValueWithKeys(["Version", "Opera", "OPR"]);
  }
  if (goog.labs.userAgent.browser.isEdge()) {
    return lookUpValueWithKeys(["Edge"]);
  }
  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(["Chrome", "CriOS"]);
  }
  var tuple = versionTuples[2];
  return tuple && tuple[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0;i < tuples.length;i++) {
    var tuple = tuples[i];
    if (tuple[0] == "Edge") {
      return tuple;
    }
  }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context, opt_useSetImmediate) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate) && (opt_useSetImmediate || !goog.global.Window || !goog.global.Window.prototype || goog.global.Window.prototype.setImmediate != goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener && !goog.labs.userAgent.engine.isPresto()) {
    Channel = function() {
      var iframe = document.createElement(goog.dom.TagName.IFRAME);
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (origin != "*" && e.origin != origin || e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined" && !goog.labs.userAgent.browser.isIE()) {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      if (goog.isDef(head.next)) {
        head = head.next;
        var cb = head.cb;
        head.cb = null;
        cb();
      }
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement(goog.dom.TagName.SCRIPT)) {
    return function(cb) {
      var script = document.createElement(goog.dom.TagName.SCRIPT);
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("goog.async.nextTick");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.queue_dispatcher;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_10108 = 0;
  while (true) {
    var m_10109 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_10109 == null) {
    } else {
      m_10109.call(null);
      if (count_10108 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__10110 = count_10108 + 1;
        count_10108 = G__10110;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__4656__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__4656__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10116 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10116 = function(box, val, meta10117) {
      this.box = box;
      this.val = val;
      this.meta10117 = meta10117;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10116.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10118, meta10117__$1) {
      var self__ = this;
      var _10118__$1 = this;
      return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10116(self__.box, self__.val, meta10117__$1);
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10116.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10118) {
      var self__ = this;
      var _10118__$1 = this;
      return self__.meta10117;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10116.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10116.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "box", "box", -1123515375, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 
      1769233139, null)], null)))], null)), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "meta10117", "meta10117", -1339927417, null)], null);
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10116.cljs$lang$type = true;
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10116.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t_cljs$core$async$impl$channels10116";
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10116.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
      return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async.impl.channels/t_cljs$core$async$impl$channels10116");
    };
    cljs.core.async.impl.channels.__GT_t_cljs$core$async$impl$channels10116 = function cljs$core$async$impl$channels$box_$___GT_t_cljs$core$async$impl$channels10116(box__$1, val__$1, meta10117) {
      return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10116(box__$1, val__$1, meta10117);
    };
  }
  return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10116(cljs$core$async$impl$channels$box, val, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "handler", "handler", 1444934915, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
};
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (!(this$ == null) && !(this$.cljs$core$async$impl$channels$MMC$abort$arity$1 == null)) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__5323__auto__ = this$ == null ? null : this$;
    var m__5324__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, this$);
    } else {
      var m__5324__auto____$1 = cljs.core.async.impl.channels.abort["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_10119 = self__.puts.pop();
    if (putter_10119 == null) {
    } else {
      var put_handler_10120 = putter_10119.handler;
      var val_10121 = putter_10119.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_10120)) {
        var put_cb_10122 = cljs.core.async.impl.protocols.commit.call(null, put_handler_10120);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_10122, put_handler_10120, val_10121, putter_10119, this$__$1) {
          return function() {
            return put_cb_10122.call(null, true);
          };
        }(put_cb_10122, put_handler_10120, val_10121, putter_10119, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4656__auto__ = self__.buf;
      if (cljs.core.truth_(and__4656__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4656__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_10123 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_10123)) {
            var take_cb_10124 = cljs.core.async.impl.protocols.commit.call(null, taker_10123);
            var val_10125__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_10124, val_10125__$1, taker_10123, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_10124.call(null, val_10125__$1);
              };
            }(take_cb_10124, val_10125__$1, taker_10123, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (cljs.core.truth_(cljs.core.async.impl.protocols.blockable_QMARK_.call(null, handler))) {
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        } else {
        }
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_10126 = self__.puts.pop();
          if (putter_10126 == null) {
          } else {
            var put_handler_10127 = putter_10126.handler;
            var val_10128 = putter_10126.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_10127)) {
              var put_cb_10129 = cljs.core.async.impl.protocols.commit.call(null, put_handler_10127);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_10129, put_handler_10127, val_10128, putter_10126, _, retval, this$__$1) {
                return function() {
                  return put_cb_10129.call(null, true);
                };
              }(put_cb_10129, put_handler_10127, val_10128, putter_10126, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_10128))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4656__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4656__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4656__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4656__auto__ = self__.buf;
              if (cljs.core.truth_(and__4656__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4656__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (cljs.core.truth_(cljs.core.async.impl.protocols.blockable_QMARK_.call(null, handler))) {
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
          } else {
          }
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4656__auto__ = self__.buf;
      if (cljs.core.truth_(and__4656__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4656__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_10130 = self__.takes.pop();
      if (taker_10130 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_10130)) {
          var take_cb_10131 = cljs.core.async.impl.protocols.commit.call(null, taker_10130);
          var val_10132 = cljs.core.truth_(function() {
            var and__4656__auto__ = self__.buf;
            if (cljs.core.truth_(and__4656__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4656__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_10131, val_10132, taker_10130, this$__$1) {
            return function() {
              return take_cb_10131.call(null, val_10132);
            };
          }(take_cb_10131, val_10132, taker_10130, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    if (cljs.core.truth_(self__.buf)) {
      cljs.core.async.impl.protocols.close_buf_BANG_.call(null, self__.buf);
    } else {
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.getBasis = function() {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "takes", "takes", 298247964, null), cljs.core.with_meta(new cljs.core.Symbol(null, "dirty-takes", "dirty-takes", 575642138, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null), cljs.core.with_meta(new cljs.core.Symbol(null, "dirty-puts", "dirty-puts", 
  57041148, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "closed", "closed", 720856168, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "add!", "add!", 2046056845, null)], null);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__4668__auto__ = exh;
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function cljs$core$async$impl$channels$chan(var_args) {
  var args10133 = [];
  var len__5726__auto___10138 = arguments.length;
  var i__5727__auto___10139 = 0;
  while (true) {
    if (i__5727__auto___10139 < len__5726__auto___10138) {
      args10133.push(arguments[i__5727__auto___10139]);
      var G__10140 = i__5727__auto___10139 + 1;
      i__5727__auto___10139 = G__10140;
      continue;
    } else {
    }
    break;
  }
  var G__10135 = args10133.length;
  switch(G__10135) {
    case 1:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10133.length)].join(""));;
  }
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1 = function(buf) {
  return cljs.core.async.impl.channels.chan.call(null, buf, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2 = function(buf, xform) {
  return cljs.core.async.impl.channels.chan.call(null, buf, xform, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3 = function(buf, xform, exh) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
    var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
    return function(add_BANG_) {
      return function() {
        var G__10142 = null;
        var G__10142__1 = function(buf__$1) {
          try {
            return add_BANG_.call(null, buf__$1);
          } catch (e10136) {
            var t = e10136;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        var G__10142__2 = function(buf__$1, val) {
          try {
            return add_BANG_.call(null, buf__$1, val);
          } catch (e10137) {
            var t = e10137;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        G__10142 = function(buf__$1, val) {
          switch(arguments.length) {
            case 1:
              return G__10142__1.call(this, buf__$1);
            case 2:
              return G__10142__2.call(this, buf__$1, val);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10142.cljs$core$IFn$_invoke$arity$1 = G__10142__1;
        G__10142.cljs$core$IFn$_invoke$arity$2 = G__10142__2;
        return G__10142;
      }();
    }(add_BANG_);
  }());
};
cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity = 3;
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610 = function(fn_handler, f, meta13611) {
      this.fn_handler = fn_handler;
      this.f = f;
      this.meta13611 = meta13611;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13612, meta13611__$1) {
      var self__ = this;
      var _13612__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610(self__.fn_handler, self__.f, meta13611__$1);
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13612) {
      var self__ = this;
      var _13612__$1 = this;
      return self__.meta13611;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "fn-handler", "fn-handler", 648785851, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, 
      cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null)], null)))], null)), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "meta13611", "meta13611", -423269671, null)], null);
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers13610";
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
      return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers13610");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t_cljs$core$async$impl$ioc_helpers13610 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t_cljs$core$async$impl$ioc_helpers13610(fn_handler__$1, f__$1, meta13611) {
      return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610(fn_handler__$1, f__$1, meta13611);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13610(cljs$core$async$impl$ioc_helpers$fn_handler, f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e13614) {
    if (e13614 instanceof Object) {
      var ex = e13614;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e13614;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4423__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_13617_13619 = state;
    statearr_13617_13619[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_13617_13619[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var cb = temp__4423__auto__;
    var statearr_13618_13620 = state;
    statearr_13618_13620[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_13618_13620[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4423__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_13623_13625 = state;
    statearr_13623_13625[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_13623_13625[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var cb = temp__4423__auto__;
    var statearr_13624_13626 = state;
    statearr_13624_13626[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_13624_13626[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__5282__auto__, k__5283__auto__) {
  var self__ = this;
  var this__5282__auto____$1 = this;
  return cljs.core._lookup.call(null, this__5282__auto____$1, k__5283__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__5284__auto__, k13628, else__5285__auto__) {
  var self__ = this;
  var this__5284__auto____$1 = this;
  var G__13630 = k13628 instanceof cljs.core.Keyword ? k13628.fqn : null;
  switch(G__13630) {
    case "catch-block":
      return self__.catch_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "prev":
      return self__.prev;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k13628, else__5285__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__5296__auto__, writer__5297__auto__, opts__5298__auto__) {
  var self__ = this;
  var this__5296__auto____$1 = this;
  var pr_pair__5299__auto__ = function(this__5296__auto____$1) {
    return function(keyval__5300__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, cljs.core.pr_writer, "", " ", "", opts__5298__auto__, keyval__5300__auto__);
    };
  }(this__5296__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, pr_pair__5299__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__5298__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IIterable$ = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__13627) {
  var self__ = this;
  var G__13627__$1 = this;
  return new cljs.core.RecordIter(0, G__13627__$1, 5, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)], null), 
  cljs.core._iterator.call(null, self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__5280__auto__) {
  var self__ = this;
  var this__5280__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__5276__auto__) {
  var self__ = this;
  var this__5276__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__5286__auto__) {
  var self__ = this;
  var this__5286__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__5277__auto__) {
  var self__ = this;
  var this__5277__auto____$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_imap.call(null, this__5277__auto____$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__5278__auto__, other__5279__auto__) {
  var self__ = this;
  var this__5278__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = other__5279__auto__;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = this__5278__auto____$1.constructor === other__5279__auto__.constructor;
      if (and__4656__auto____$1) {
        return cljs.core.equiv_map.call(null, this__5278__auto____$1, other__5279__auto__);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__5291__auto__, k__5292__auto__) {
  var self__ = this;
  var this__5291__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__5292__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__5291__auto____$1), self__.__meta), k__5292__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__5292__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__5289__auto__, k__5290__auto__, G__13627) {
  var self__ = this;
  var this__5289__auto____$1 = this;
  var pred__13631 = cljs.core.keyword_identical_QMARK_;
  var expr__13632 = k__5290__auto__;
  if (cljs.core.truth_(pred__13631.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__13632))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__13627, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13631.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__13632))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__13627, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__13631.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__13632))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__13627, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__13631.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__13632))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__13627, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__13631.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__13632))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__13627, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__5290__auto__, G__13627), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__5294__auto__) {
  var self__ = this;
  var this__5294__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__5281__auto__, G__13627) {
  var self__ = this;
  var this__5281__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__13627, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__5287__auto__, entry__5288__auto__) {
  var self__ = this;
  var this__5287__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__5288__auto__)) {
    return cljs.core._assoc.call(null, this__5287__auto____$1, cljs.core._nth.call(null, entry__5288__auto__, 0), cljs.core._nth.call(null, entry__5288__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__5287__auto____$1, entry__5288__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "catch-block", "catch-block", -1479223021, null), cljs.core.with_meta(new cljs.core.Symbol(null, "catch-exception", "catch-exception", -356775268, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "Class", "Class", 2064526977, null)], null)), new cljs.core.Symbol(null, "finally-block", "finally-block", 
  -1821453297, null), new cljs.core.Symbol(null, "continue-block", "continue-block", -211516323, null), new cljs.core.Symbol(null, "prev", "prev", 43462301, null)], null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__5316__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__5316__auto__, writer__5317__auto__) {
  return cljs.core._write.call(null, writer__5317__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__13629) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__13629), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__13629), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__13629), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__13629), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__13629), null, cljs.core.dissoc.call(null, G__13629, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_13636 = state;
  statearr_13636[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_13636;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__4656__auto__ = exception;
      if (cljs.core.truth_(and__4656__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__4656__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__4656__auto__ = exception;
        if (cljs.core.truth_(and__4656__auto__)) {
          var and__4656__auto____$1 = catch_block;
          if (cljs.core.truth_(and__4656__auto____$1)) {
            return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "default", "default", -1987822328), catch_exception) || exception instanceof catch_exception;
          } else {
            return and__4656__auto____$1;
          }
        } else {
          return and__4656__auto__;
        }
      }())) {
        var statearr_13642 = state;
        statearr_13642[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_13642[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_13642[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_13642[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_13642;
      } else {
        if (cljs.core.truth_(function() {
          var and__4656__auto__ = exception;
          if (cljs.core.truth_(and__4656__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__4656__auto__;
          }
        }())) {
          var statearr_13643_13647 = state;
          statearr_13643_13647[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__13648 = state;
          state = G__13648;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__4656__auto__ = exception;
            if (cljs.core.truth_(and__4656__auto__)) {
              var and__4656__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__4656__auto____$1) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4656__auto____$1;
              }
            } else {
              return and__4656__auto__;
            }
          }())) {
            var statearr_13644 = state;
            statearr_13644[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_13644[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_13644;
          } else {
            if (cljs.core.truth_(function() {
              var and__4656__auto__ = cljs.core.not.call(null, exception);
              if (and__4656__auto__) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4656__auto__;
              }
            }())) {
              var statearr_13645 = state;
              statearr_13645[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_13645[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_13645;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_13646 = state;
                statearr_13646[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_13646[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_13646;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function cljs$core$async$impl$timers$random_level(var_args) {
  var args13651 = [];
  var len__5726__auto___13654 = arguments.length;
  var i__5727__auto___13655 = 0;
  while (true) {
    if (i__5727__auto___13655 < len__5726__auto___13654) {
      args13651.push(arguments[i__5727__auto___13655]);
      var G__13656 = i__5727__auto___13655 + 1;
      i__5727__auto___13655 = G__13656;
      continue;
    } else {
    }
    break;
  }
  var G__13653 = args13651.length;
  switch(G__13653) {
    case 0:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13651.length)].join(""));;
  }
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.impl.timers.random_level.call(null, 0);
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1 = function(level) {
  while (true) {
    if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
      var G__13658 = level + 1;
      level = G__13658;
      continue;
    } else {
      return level;
    }
    break;
  }
};
cljs.core.async.impl.timers.random_level.cljs$lang$maxFixedArity = 1;
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "forward", "forward", 1083186224, null)], null);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function cljs$core$async$impl$timers$skip_list_node(var_args) {
  var args13659 = [];
  var len__5726__auto___13662 = arguments.length;
  var i__5727__auto___13663 = 0;
  while (true) {
    if (i__5727__auto___13663 < len__5726__auto___13662) {
      args13659.push(arguments[i__5727__auto___13663]);
      var G__13664 = i__5727__auto___13663 + 1;
      i__5727__auto___13663 = G__13664;
      continue;
    } else {
    }
    break;
  }
  var G__13661 = args13659.length;
  switch(G__13661) {
    case 1:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13659.length)].join(""));;
  }
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1 = function(level) {
  return cljs.core.async.impl.timers.skip_list_node.call(null, null, null, level);
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3 = function(k, v, level) {
  var arr = new Array(level + 1);
  var i_13666 = 0;
  while (true) {
    if (i_13666 < arr.length) {
      arr[i_13666] = null;
      var G__13667 = i_13666 + 1;
      i_13666 = G__13667;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
};
cljs.core.async.impl.timers.skip_list_node.cljs$lang$maxFixedArity = 3;
cljs.core.async.impl.timers.least_greater_node = function cljs$core$async$impl$timers$least_greater_node(var_args) {
  var args13668 = [];
  var len__5726__auto___13671 = arguments.length;
  var i__5727__auto___13672 = 0;
  while (true) {
    if (i__5727__auto___13672 < len__5726__auto___13671) {
      args13668.push(arguments[i__5727__auto___13672]);
      var G__13673 = i__5727__auto___13672 + 1;
      i__5727__auto___13672 = G__13673;
      continue;
    } else {
    }
    break;
  }
  var G__13670 = args13668.length;
  switch(G__13670) {
    case 3:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13668.length)].join(""));;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3 = function(x, k, level) {
  return cljs.core.async.impl.timers.least_greater_node.call(null, x, k, level, null);
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4 = function(x, k, level, update) {
  while (true) {
    if (!(level < 0)) {
      var x__$1 = function() {
        var x__$1 = x;
        while (true) {
          var temp__4423__auto__ = x__$1.forward[level];
          if (cljs.core.truth_(temp__4423__auto__)) {
            var x_SINGLEQUOTE_ = temp__4423__auto__;
            if (x_SINGLEQUOTE_.key < k) {
              var G__13675 = x_SINGLEQUOTE_;
              x__$1 = G__13675;
              continue;
            } else {
              return x__$1;
            }
          } else {
            return x__$1;
          }
          break;
        }
      }();
      if (update == null) {
      } else {
        update[level] = x__$1;
      }
      var G__13676 = x__$1;
      var G__13677 = k;
      var G__13678 = level - 1;
      var G__13679 = update;
      x = G__13676;
      k = G__13677;
      level = G__13678;
      update = G__13679;
      continue;
    } else {
      return x;
    }
    break;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$lang$maxFixedArity = 4;
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_13680 = self__.level + 1;
      while (true) {
        if (i_13680 <= new_level + 1) {
          update[i_13680] = self__.header;
          var G__13681 = i_13680 + 1;
          i_13680 = G__13681;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_13682 = 0;
    while (true) {
      if (i_13682 <= self__.level) {
        var links_13683 = update[i_13682].forward;
        if (links_13683[i_13682] === x__$1) {
          links_13683[i_13682] = x__$1.forward[i_13682];
          var G__13684 = i_13682 + 1;
          i_13682 = G__13684;
          continue;
        } else {
          var G__13685 = i_13682 + 1;
          i_13682 = G__13685;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__13686 = x_SINGLEQUOTE_;
              x__$1 = G__13686;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__13687 = nx;
        var G__13688 = level__$1 - 1;
        x = G__13687;
        level__$1 = G__13688;
        continue;
      } else {
        var G__13689 = x;
        var G__13690 = level__$1 - 1;
        x = G__13689;
        level__$1 = G__13690;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__13691 = x_SINGLEQUOTE_;
              x__$1 = G__13691;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__13692 = nx;
        var G__13693 = level__$1 - 1;
        x = G__13692;
        level__$1 = G__13693;
        continue;
      } else {
        var G__13694 = x;
        var G__13695 = level__$1 - 1;
        x = G__13694;
        level__$1 = G__13695;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "header", "header", 1759972661, null), cljs.core.with_meta(new cljs.core.Symbol(null, "level", "level", -1363938217, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__4668__auto__ = cljs.core.truth_(function() {
    var and__4656__auto__ = me;
    if (cljs.core.truth_(and__4656__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4656__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4668__auto__)) {
    return or__4668__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__4668__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__4668__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(var_args) {
  var args13751 = [];
  var len__5726__auto___13757 = arguments.length;
  var i__5727__auto___13758 = 0;
  while (true) {
    if (i__5727__auto___13758 < len__5726__auto___13757) {
      args13751.push(arguments[i__5727__auto___13758]);
      var G__13759 = i__5727__auto___13758 + 1;
      i__5727__auto___13758 = G__13759;
      continue;
    } else {
    }
    break;
  }
  var G__13753 = args13751.length;
  switch(G__13753) {
    case 1:
      return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13751.length)].join(""));;
  }
};
cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.async.fn_handler.call(null, f, true);
};
cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2 = function(f, blockable) {
  if (typeof cljs.core.async.t_cljs$core$async13754 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async13754 = function(f, blockable, meta13755) {
      this.f = f;
      this.blockable = blockable;
      this.meta13755 = meta13755;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async13754.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13756, meta13755__$1) {
      var self__ = this;
      var _13756__$1 = this;
      return new cljs.core.async.t_cljs$core$async13754(self__.f, self__.blockable, meta13755__$1);
    };
    cljs.core.async.t_cljs$core$async13754.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13756) {
      var self__ = this;
      var _13756__$1 = this;
      return self__.meta13755;
    };
    cljs.core.async.t_cljs$core$async13754.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t_cljs$core$async13754.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t_cljs$core$async13754.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.blockable;
    };
    cljs.core.async.t_cljs$core$async13754.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t_cljs$core$async13754.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "blockable", "blockable", -28395259, null), new cljs.core.Symbol(null, "meta13755", "meta13755", -925637405, null)], null);
    };
    cljs.core.async.t_cljs$core$async13754.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async13754.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13754";
    cljs.core.async.t_cljs$core$async13754.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
      return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async/t_cljs$core$async13754");
    };
    cljs.core.async.__GT_t_cljs$core$async13754 = function cljs$core$async$__GT_t_cljs$core$async13754(f__$1, blockable__$1, meta13755) {
      return new cljs.core.async.t_cljs$core$async13754(f__$1, blockable__$1, meta13755);
    };
  }
  return new cljs.core.async.t_cljs$core$async13754(f, blockable, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.fn_handler.cljs$lang$maxFixedArity = 2;
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  if (!(buff == null)) {
    if (false || buff.cljs$core$async$impl$protocols$UnblockingBuffer$) {
      return true;
    } else {
      if (!buff.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, buff);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, buff);
  }
};
cljs.core.async.chan = function cljs$core$async$chan(var_args) {
  var args13763 = [];
  var len__5726__auto___13766 = arguments.length;
  var i__5727__auto___13767 = 0;
  while (true) {
    if (i__5727__auto___13767 < len__5726__auto___13766) {
      args13763.push(arguments[i__5727__auto___13767]);
      var G__13768 = i__5727__auto___13767 + 1;
      i__5727__auto___13767 = G__13768;
      continue;
    } else {
    }
    break;
  }
  var G__13765 = args13763.length;
  switch(G__13765) {
    case 0:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13763.length)].join(""));;
  }
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.chan.call(null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = function(buf_or_n) {
  return cljs.core.async.chan.call(null, buf_or_n, null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = function(buf_or_n, xform) {
  return cljs.core.async.chan.call(null, buf_or_n, xform, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = function(buf_or_n, xform, ex_handler) {
  var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
  if (cljs.core.truth_(xform)) {
    if (cljs.core.truth_(buf_or_n__$1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
    }
  } else {
  }
  return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
};
cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.promise_chan = function cljs$core$async$promise_chan(var_args) {
  var args13770 = [];
  var len__5726__auto___13773 = arguments.length;
  var i__5727__auto___13774 = 0;
  while (true) {
    if (i__5727__auto___13774 < len__5726__auto___13773) {
      args13770.push(arguments[i__5727__auto___13774]);
      var G__13775 = i__5727__auto___13774 + 1;
      i__5727__auto___13774 = G__13775;
      continue;
    } else {
    }
    break;
  }
  var G__13772 = args13770.length;
  switch(G__13772) {
    case 0:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13770.length)].join(""));;
  }
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.promise_chan.call(null, null);
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1 = function(xform) {
  return cljs.core.async.promise_chan.call(null, xform, null);
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2 = function(xform, ex_handler) {
  return cljs.core.async.chan.call(null, cljs.core.async.impl.buffers.promise_buffer.call(null), xform, ex_handler);
};
cljs.core.async.promise_chan.cljs$lang$maxFixedArity = 2;
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function cljs$core$async$take_BANG_(var_args) {
  var args13777 = [];
  var len__5726__auto___13780 = arguments.length;
  var i__5727__auto___13781 = 0;
  while (true) {
    if (i__5727__auto___13781 < len__5726__auto___13780) {
      args13777.push(arguments[i__5727__auto___13781]);
      var G__13782 = i__5727__auto___13781 + 1;
      i__5727__auto___13781 = G__13782;
      continue;
    } else {
    }
    break;
  }
  var G__13779 = args13777.length;
  switch(G__13779) {
    case 2:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13777.length)].join(""));;
  }
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, fn1) {
  return cljs.core.async.take_BANG_.call(null, port, fn1, true);
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, fn1, on_caller_QMARK_) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(ret)) {
    var val_13784 = cljs.core.deref.call(null, ret);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, val_13784);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(val_13784, ret) {
        return function() {
          return fn1.call(null, val_13784);
        };
      }(val_13784, ret));
    }
  } else {
  }
  return null;
};
cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function cljs$core$async$put_BANG_(var_args) {
  var args13785 = [];
  var len__5726__auto___13788 = arguments.length;
  var i__5727__auto___13789 = 0;
  while (true) {
    if (i__5727__auto___13789 < len__5726__auto___13788) {
      args13785.push(arguments[i__5727__auto___13789]);
      var G__13790 = i__5727__auto___13789 + 1;
      i__5727__auto___13789 = G__13790;
      continue;
    } else {
    }
    break;
  }
  var G__13787 = args13785.length;
  switch(G__13787) {
    case 2:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13785.length)].join(""));;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, val) {
  var temp__4423__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var ret = temp__4423__auto__;
    return cljs.core.deref.call(null, ret);
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, val, fn1) {
  return cljs.core.async.put_BANG_.call(null, port, val, fn1, true);
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = function(port, val, fn1, on_caller_QMARK_) {
  var temp__4423__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var retb = temp__4423__auto__;
    var ret = cljs.core.deref.call(null, retb);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, ret);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4423__auto__) {
        return function() {
          return fn1.call(null, ret);
        };
      }(ret, retb, temp__4423__auto__));
    }
    return ret;
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__5571__auto___13792 = n;
  var x_13793 = 0;
  while (true) {
    if (x_13793 < n__5571__auto___13792) {
      a[x_13793] = 0;
      var G__13794 = x_13793 + 1;
      x_13793 = G__13794;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__13795 = i + 1;
      i = G__13795;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t_cljs$core$async13799 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async13799 = function(alt_flag, flag, meta13800) {
      this.alt_flag = alt_flag;
      this.flag = flag;
      this.meta13800 = meta13800;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async13799.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_13801, meta13800__$1) {
        var self__ = this;
        var _13801__$1 = this;
        return new cljs.core.async.t_cljs$core$async13799(self__.alt_flag, self__.flag, meta13800__$1);
      };
    }(flag);
    cljs.core.async.t_cljs$core$async13799.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_13801) {
        var self__ = this;
        var _13801__$1 = this;
        return self__.meta13800;
      };
    }(flag);
    cljs.core.async.t_cljs$core$async13799.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t_cljs$core$async13799.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t_cljs$core$async13799.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return true;
      };
    }(flag);
    cljs.core.async.t_cljs$core$async13799.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t_cljs$core$async13799.getBasis = function(flag) {
      return function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "alt-flag", "alt-flag", -1794972754, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)), 
        new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "meta13800", "meta13800", 1864343540, null)], null);
      };
    }(flag);
    cljs.core.async.t_cljs$core$async13799.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async13799.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13799";
    cljs.core.async.t_cljs$core$async13799.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
        return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async/t_cljs$core$async13799");
      };
    }(flag);
    cljs.core.async.__GT_t_cljs$core$async13799 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t_cljs$core$async13799(alt_flag__$1, flag__$1, meta13800) {
        return new cljs.core.async.t_cljs$core$async13799(alt_flag__$1, flag__$1, meta13800);
      };
    }(flag);
  }
  return new cljs.core.async.t_cljs$core$async13799(cljs$core$async$alt_flag, flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t_cljs$core$async13805 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async13805 = function(alt_handler, flag, cb, meta13806) {
      this.alt_handler = alt_handler;
      this.flag = flag;
      this.cb = cb;
      this.meta13806 = meta13806;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async13805.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13807, meta13806__$1) {
      var self__ = this;
      var _13807__$1 = this;
      return new cljs.core.async.t_cljs$core$async13805(self__.alt_handler, self__.flag, self__.cb, meta13806__$1);
    };
    cljs.core.async.t_cljs$core$async13805.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13807) {
      var self__ = this;
      var _13807__$1 = this;
      return self__.meta13806;
    };
    cljs.core.async.t_cljs$core$async13805.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t_cljs$core$async13805.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t_cljs$core$async13805.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t_cljs$core$async13805.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t_cljs$core$async13805.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "alt-handler", "alt-handler", 963786170, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 
      5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null)], null)))], null)), new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null), new cljs.core.Symbol(null, "meta13806", "meta13806", 1180112744, null)], null);
    };
    cljs.core.async.t_cljs$core$async13805.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async13805.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13805";
    cljs.core.async.t_cljs$core$async13805.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
      return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async/t_cljs$core$async13805");
    };
    cljs.core.async.__GT_t_cljs$core$async13805 = function cljs$core$async$alt_handler_$___GT_t_cljs$core$async13805(alt_handler__$1, flag__$1, cb__$1, meta13806) {
      return new cljs.core.async.t_cljs$core$async13805(alt_handler__$1, flag__$1, cb__$1, meta13806);
    };
  }
  return new cljs.core.async.t_cljs$core$async13805(cljs$core$async$alt_handler, flag, cb, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__13808_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__13808_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__13809_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__13809_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4668__auto__ = wport;
            if (cljs.core.truth_(or__4668__auto__)) {
              return or__4668__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__13810 = i + 1;
          i = G__13810;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4668__auto__ = ret;
  if (cljs.core.truth_(or__4668__auto__)) {
    return or__4668__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4425__auto__ = function() {
        var and__4656__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4656__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4656__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4425__auto__)) {
        var got = temp__4425__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function cljs$core$async$alts_BANG_(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___13816 = arguments.length;
  var i__5727__auto___13817 = 0;
  while (true) {
    if (i__5727__auto___13817 < len__5726__auto___13816) {
      args__5733__auto__.push(arguments[i__5727__auto___13817]);
      var G__13818 = i__5727__auto___13817 + 1;
      i__5727__auto___13817 = G__13818;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 1 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(1), 0) : null;
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5734__auto__);
};
cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ports, p__13813) {
  var map__13814 = p__13813;
  var map__13814__$1 = (!(map__13814 == null) ? map__13814.cljs$lang$protocol_mask$partition0$ & 64 || map__13814.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13814) : map__13814;
  var opts = map__13814__$1;
  throw new Error("alts! used not in (go ...) block");
};
cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.async.alts_BANG_.cljs$lang$applyTo = function(seq13811) {
  var G__13812 = cljs.core.first.call(null, seq13811);
  var seq13811__$1 = cljs.core.next.call(null, seq13811);
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__13812, seq13811__$1);
};
cljs.core.async.offer_BANG_ = function cljs$core$async$offer_BANG_(port, val) {
  var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, cljs.core.async.nop, false));
  if (cljs.core.truth_(ret)) {
    return cljs.core.deref.call(null, ret);
  } else {
    return null;
  }
};
cljs.core.async.poll_BANG_ = function cljs$core$async$poll_BANG_(port) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, cljs.core.async.nop, false));
  if (cljs.core.truth_(ret)) {
    return cljs.core.deref.call(null, ret);
  } else {
    return null;
  }
};
cljs.core.async.pipe = function cljs$core$async$pipe(var_args) {
  var args13819 = [];
  var len__5726__auto___13869 = arguments.length;
  var i__5727__auto___13870 = 0;
  while (true) {
    if (i__5727__auto___13870 < len__5726__auto___13869) {
      args13819.push(arguments[i__5727__auto___13870]);
      var G__13871 = i__5727__auto___13870 + 1;
      i__5727__auto___13870 = G__13871;
      continue;
    } else {
    }
    break;
  }
  var G__13821 = args13819.length;
  switch(G__13821) {
    case 2:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13819.length)].join(""));;
  }
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = function(from, to) {
  return cljs.core.async.pipe.call(null, from, to, true);
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = function(from, to, close_QMARK_) {
  var c__13706__auto___13873 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___13873) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___13873) {
          return function(state_13845) {
            var state_val_13846 = state_13845[1];
            if (state_val_13846 === 7) {
              var inst_13841 = state_13845[2];
              var state_13845__$1 = state_13845;
              var statearr_13847_13874 = state_13845__$1;
              statearr_13847_13874[2] = inst_13841;
              statearr_13847_13874[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13846 === 1) {
                var state_13845__$1 = state_13845;
                var statearr_13848_13875 = state_13845__$1;
                statearr_13848_13875[2] = null;
                statearr_13848_13875[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13846 === 4) {
                  var inst_13824 = state_13845[7];
                  var inst_13824__$1 = state_13845[2];
                  var inst_13825 = inst_13824__$1 == null;
                  var state_13845__$1 = function() {
                    var statearr_13849 = state_13845;
                    statearr_13849[7] = inst_13824__$1;
                    return statearr_13849;
                  }();
                  if (cljs.core.truth_(inst_13825)) {
                    var statearr_13850_13876 = state_13845__$1;
                    statearr_13850_13876[1] = 5;
                  } else {
                    var statearr_13851_13877 = state_13845__$1;
                    statearr_13851_13877[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13846 === 13) {
                    var state_13845__$1 = state_13845;
                    var statearr_13852_13878 = state_13845__$1;
                    statearr_13852_13878[2] = null;
                    statearr_13852_13878[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13846 === 6) {
                      var inst_13824 = state_13845[7];
                      var state_13845__$1 = state_13845;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13845__$1, 11, to, inst_13824);
                    } else {
                      if (state_val_13846 === 3) {
                        var inst_13843 = state_13845[2];
                        var state_13845__$1 = state_13845;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13845__$1, inst_13843);
                      } else {
                        if (state_val_13846 === 12) {
                          var state_13845__$1 = state_13845;
                          var statearr_13853_13879 = state_13845__$1;
                          statearr_13853_13879[2] = null;
                          statearr_13853_13879[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13846 === 2) {
                            var state_13845__$1 = state_13845;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13845__$1, 4, from);
                          } else {
                            if (state_val_13846 === 11) {
                              var inst_13834 = state_13845[2];
                              var state_13845__$1 = state_13845;
                              if (cljs.core.truth_(inst_13834)) {
                                var statearr_13854_13880 = state_13845__$1;
                                statearr_13854_13880[1] = 12;
                              } else {
                                var statearr_13855_13881 = state_13845__$1;
                                statearr_13855_13881[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13846 === 9) {
                                var state_13845__$1 = state_13845;
                                var statearr_13856_13882 = state_13845__$1;
                                statearr_13856_13882[2] = null;
                                statearr_13856_13882[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13846 === 5) {
                                  var state_13845__$1 = state_13845;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_13857_13883 = state_13845__$1;
                                    statearr_13857_13883[1] = 8;
                                  } else {
                                    var statearr_13858_13884 = state_13845__$1;
                                    statearr_13858_13884[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13846 === 14) {
                                    var inst_13839 = state_13845[2];
                                    var state_13845__$1 = state_13845;
                                    var statearr_13859_13885 = state_13845__$1;
                                    statearr_13859_13885[2] = inst_13839;
                                    statearr_13859_13885[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13846 === 10) {
                                      var inst_13831 = state_13845[2];
                                      var state_13845__$1 = state_13845;
                                      var statearr_13860_13886 = state_13845__$1;
                                      statearr_13860_13886[2] = inst_13831;
                                      statearr_13860_13886[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13846 === 8) {
                                        var inst_13828 = cljs.core.async.close_BANG_.call(null, to);
                                        var state_13845__$1 = state_13845;
                                        var statearr_13861_13887 = state_13845__$1;
                                        statearr_13861_13887[2] = inst_13828;
                                        statearr_13861_13887[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___13873);
        return function(switch__13594__auto__, c__13706__auto___13873) {
          return function() {
            var cljs$core$async$state_machine__13595__auto__ = null;
            var cljs$core$async$state_machine__13595__auto____0 = function() {
              var statearr_13865 = [null, null, null, null, null, null, null, null];
              statearr_13865[0] = cljs$core$async$state_machine__13595__auto__;
              statearr_13865[1] = 1;
              return statearr_13865;
            };
            var cljs$core$async$state_machine__13595__auto____1 = function(state_13845) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_13845);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e13866) {
                    if (e13866 instanceof Object) {
                      var ex__13598__auto__ = e13866;
                      var statearr_13867_13888 = state_13845;
                      statearr_13867_13888[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13845);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13866;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13889 = state_13845;
                  state_13845 = G__13889;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__13595__auto__ = function(state_13845) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__13595__auto____1.call(this, state_13845);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__13595__auto____0;
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__13595__auto____1;
            return cljs$core$async$state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___13873);
      }();
      var state__13708__auto__ = function() {
        var statearr_13868 = f__13707__auto__.call(null);
        statearr_13868[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___13873;
        return statearr_13868;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___13873));
  return to;
};
cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__14073) {
      var vec__14074 = p__14073;
      var v = cljs.core.nth.call(null, vec__14074, 0, null);
      var p = cljs.core.nth.call(null, vec__14074, 1, null);
      var job = vec__14074;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__13706__auto___14256 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___14256, res, vec__14074, v, p, job, jobs, results) {
          return function() {
            var f__13707__auto__ = function() {
              var switch__13594__auto__ = function(c__13706__auto___14256, res, vec__14074, v, p, job, jobs, results) {
                return function(state_14079) {
                  var state_val_14080 = state_14079[1];
                  if (state_val_14080 === 1) {
                    var state_14079__$1 = state_14079;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14079__$1, 2, res, v);
                  } else {
                    if (state_val_14080 === 2) {
                      var inst_14076 = state_14079[2];
                      var inst_14077 = cljs.core.async.close_BANG_.call(null, res);
                      var state_14079__$1 = function() {
                        var statearr_14081 = state_14079;
                        statearr_14081[7] = inst_14076;
                        return statearr_14081;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14079__$1, inst_14077);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__13706__auto___14256, res, vec__14074, v, p, job, jobs, results);
              return function(switch__13594__auto__, c__13706__auto___14256, res, vec__14074, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0 = function() {
                    var statearr_14085 = [null, null, null, null, null, null, null, null];
                    statearr_14085[0] = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__;
                    statearr_14085[1] = 1;
                    return statearr_14085;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1 = function(state_14079) {
                    while (true) {
                      var ret_value__13596__auto__ = function() {
                        try {
                          while (true) {
                            var result__13597__auto__ = switch__13594__auto__.call(null, state_14079);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__13597__auto__;
                            }
                            break;
                          }
                        } catch (e14086) {
                          if (e14086 instanceof Object) {
                            var ex__13598__auto__ = e14086;
                            var statearr_14087_14257 = state_14079;
                            statearr_14087_14257[5] = ex__13598__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14079);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e14086;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__14258 = state_14079;
                        state_14079 = G__14258;
                        continue;
                      } else {
                        return ret_value__13596__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__ = function(state_14079) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1.call(this, state_14079);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__;
                }();
              }(switch__13594__auto__, c__13706__auto___14256, res, vec__14074, v, p, job, jobs, results);
            }();
            var state__13708__auto__ = function() {
              var statearr_14088 = f__13707__auto__.call(null);
              statearr_14088[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___14256;
              return statearr_14088;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
          };
        }(c__13706__auto___14256, res, vec__14074, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__14089) {
      var vec__14090 = p__14089;
      var v = cljs.core.nth.call(null, vec__14090, 0, null);
      var p = cljs.core.nth.call(null, vec__14090, 1, null);
      var job = vec__14090;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__5571__auto___14259 = n;
  var __14260 = 0;
  while (true) {
    if (__14260 < n__5571__auto___14259) {
      var G__14091_14261 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__14091_14261) {
        case "compute":
          var c__13706__auto___14263 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__14260, c__13706__auto___14263, G__14091_14261, n__5571__auto___14259, jobs, results, process, async) {
            return function() {
              var f__13707__auto__ = function() {
                var switch__13594__auto__ = function(__14260, c__13706__auto___14263, G__14091_14261, n__5571__auto___14259, jobs, results, process, async) {
                  return function(state_14104) {
                    var state_val_14105 = state_14104[1];
                    if (state_val_14105 === 1) {
                      var state_14104__$1 = state_14104;
                      var statearr_14106_14264 = state_14104__$1;
                      statearr_14106_14264[2] = null;
                      statearr_14106_14264[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14105 === 2) {
                        var state_14104__$1 = state_14104;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14104__$1, 4, jobs);
                      } else {
                        if (state_val_14105 === 3) {
                          var inst_14102 = state_14104[2];
                          var state_14104__$1 = state_14104;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14104__$1, inst_14102);
                        } else {
                          if (state_val_14105 === 4) {
                            var inst_14094 = state_14104[2];
                            var inst_14095 = process.call(null, inst_14094);
                            var state_14104__$1 = state_14104;
                            if (cljs.core.truth_(inst_14095)) {
                              var statearr_14107_14265 = state_14104__$1;
                              statearr_14107_14265[1] = 5;
                            } else {
                              var statearr_14108_14266 = state_14104__$1;
                              statearr_14108_14266[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14105 === 5) {
                              var state_14104__$1 = state_14104;
                              var statearr_14109_14267 = state_14104__$1;
                              statearr_14109_14267[2] = null;
                              statearr_14109_14267[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14105 === 6) {
                                var state_14104__$1 = state_14104;
                                var statearr_14110_14268 = state_14104__$1;
                                statearr_14110_14268[2] = null;
                                statearr_14110_14268[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14105 === 7) {
                                  var inst_14100 = state_14104[2];
                                  var state_14104__$1 = state_14104;
                                  var statearr_14111_14269 = state_14104__$1;
                                  statearr_14111_14269[2] = inst_14100;
                                  statearr_14111_14269[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__14260, c__13706__auto___14263, G__14091_14261, n__5571__auto___14259, jobs, results, process, async);
                return function(__14260, switch__13594__auto__, c__13706__auto___14263, G__14091_14261, n__5571__auto___14259, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0 = function() {
                      var statearr_14115 = [null, null, null, null, null, null, null];
                      statearr_14115[0] = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__;
                      statearr_14115[1] = 1;
                      return statearr_14115;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1 = function(state_14104) {
                      while (true) {
                        var ret_value__13596__auto__ = function() {
                          try {
                            while (true) {
                              var result__13597__auto__ = switch__13594__auto__.call(null, state_14104);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__13597__auto__;
                              }
                              break;
                            }
                          } catch (e14116) {
                            if (e14116 instanceof Object) {
                              var ex__13598__auto__ = e14116;
                              var statearr_14117_14270 = state_14104;
                              statearr_14117_14270[5] = ex__13598__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14104);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e14116;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__14271 = state_14104;
                          state_14104 = G__14271;
                          continue;
                        } else {
                          return ret_value__13596__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__ = function(state_14104) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1.call(this, state_14104);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__;
                  }();
                }(__14260, switch__13594__auto__, c__13706__auto___14263, G__14091_14261, n__5571__auto___14259, jobs, results, process, async);
              }();
              var state__13708__auto__ = function() {
                var statearr_14118 = f__13707__auto__.call(null);
                statearr_14118[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___14263;
                return statearr_14118;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
            };
          }(__14260, c__13706__auto___14263, G__14091_14261, n__5571__auto___14259, jobs, results, process, async));
          break;
        case "async":
          var c__13706__auto___14272 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__14260, c__13706__auto___14272, G__14091_14261, n__5571__auto___14259, jobs, results, process, async) {
            return function() {
              var f__13707__auto__ = function() {
                var switch__13594__auto__ = function(__14260, c__13706__auto___14272, G__14091_14261, n__5571__auto___14259, jobs, results, process, async) {
                  return function(state_14131) {
                    var state_val_14132 = state_14131[1];
                    if (state_val_14132 === 1) {
                      var state_14131__$1 = state_14131;
                      var statearr_14133_14273 = state_14131__$1;
                      statearr_14133_14273[2] = null;
                      statearr_14133_14273[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14132 === 2) {
                        var state_14131__$1 = state_14131;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14131__$1, 4, jobs);
                      } else {
                        if (state_val_14132 === 3) {
                          var inst_14129 = state_14131[2];
                          var state_14131__$1 = state_14131;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14131__$1, inst_14129);
                        } else {
                          if (state_val_14132 === 4) {
                            var inst_14121 = state_14131[2];
                            var inst_14122 = async.call(null, inst_14121);
                            var state_14131__$1 = state_14131;
                            if (cljs.core.truth_(inst_14122)) {
                              var statearr_14134_14274 = state_14131__$1;
                              statearr_14134_14274[1] = 5;
                            } else {
                              var statearr_14135_14275 = state_14131__$1;
                              statearr_14135_14275[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14132 === 5) {
                              var state_14131__$1 = state_14131;
                              var statearr_14136_14276 = state_14131__$1;
                              statearr_14136_14276[2] = null;
                              statearr_14136_14276[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14132 === 6) {
                                var state_14131__$1 = state_14131;
                                var statearr_14137_14277 = state_14131__$1;
                                statearr_14137_14277[2] = null;
                                statearr_14137_14277[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14132 === 7) {
                                  var inst_14127 = state_14131[2];
                                  var state_14131__$1 = state_14131;
                                  var statearr_14138_14278 = state_14131__$1;
                                  statearr_14138_14278[2] = inst_14127;
                                  statearr_14138_14278[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__14260, c__13706__auto___14272, G__14091_14261, n__5571__auto___14259, jobs, results, process, async);
                return function(__14260, switch__13594__auto__, c__13706__auto___14272, G__14091_14261, n__5571__auto___14259, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0 = function() {
                      var statearr_14142 = [null, null, null, null, null, null, null];
                      statearr_14142[0] = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__;
                      statearr_14142[1] = 1;
                      return statearr_14142;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1 = function(state_14131) {
                      while (true) {
                        var ret_value__13596__auto__ = function() {
                          try {
                            while (true) {
                              var result__13597__auto__ = switch__13594__auto__.call(null, state_14131);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__13597__auto__;
                              }
                              break;
                            }
                          } catch (e14143) {
                            if (e14143 instanceof Object) {
                              var ex__13598__auto__ = e14143;
                              var statearr_14144_14279 = state_14131;
                              statearr_14144_14279[5] = ex__13598__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14131);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e14143;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__14280 = state_14131;
                          state_14131 = G__14280;
                          continue;
                        } else {
                          return ret_value__13596__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__ = function(state_14131) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1.call(this, state_14131);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__;
                  }();
                }(__14260, switch__13594__auto__, c__13706__auto___14272, G__14091_14261, n__5571__auto___14259, jobs, results, process, async);
              }();
              var state__13708__auto__ = function() {
                var statearr_14145 = f__13707__auto__.call(null);
                statearr_14145[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___14272;
                return statearr_14145;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
            };
          }(__14260, c__13706__auto___14272, G__14091_14261, n__5571__auto___14259, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__14281 = __14260 + 1;
      __14260 = G__14281;
      continue;
    } else {
    }
    break;
  }
  var c__13706__auto___14282 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___14282, jobs, results, process, async) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___14282, jobs, results, process, async) {
          return function(state_14167) {
            var state_val_14168 = state_14167[1];
            if (state_val_14168 === 1) {
              var state_14167__$1 = state_14167;
              var statearr_14169_14283 = state_14167__$1;
              statearr_14169_14283[2] = null;
              statearr_14169_14283[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14168 === 2) {
                var state_14167__$1 = state_14167;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14167__$1, 4, from);
              } else {
                if (state_val_14168 === 3) {
                  var inst_14165 = state_14167[2];
                  var state_14167__$1 = state_14167;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14167__$1, inst_14165);
                } else {
                  if (state_val_14168 === 4) {
                    var inst_14148 = state_14167[7];
                    var inst_14148__$1 = state_14167[2];
                    var inst_14149 = inst_14148__$1 == null;
                    var state_14167__$1 = function() {
                      var statearr_14170 = state_14167;
                      statearr_14170[7] = inst_14148__$1;
                      return statearr_14170;
                    }();
                    if (cljs.core.truth_(inst_14149)) {
                      var statearr_14171_14284 = state_14167__$1;
                      statearr_14171_14284[1] = 5;
                    } else {
                      var statearr_14172_14285 = state_14167__$1;
                      statearr_14172_14285[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14168 === 5) {
                      var inst_14151 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_14167__$1 = state_14167;
                      var statearr_14173_14286 = state_14167__$1;
                      statearr_14173_14286[2] = inst_14151;
                      statearr_14173_14286[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14168 === 6) {
                        var inst_14148 = state_14167[7];
                        var inst_14153 = state_14167[8];
                        var inst_14153__$1 = cljs.core.async.chan.call(null, 1);
                        var inst_14154 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_14155 = [inst_14148, inst_14153__$1];
                        var inst_14156 = new cljs.core.PersistentVector(null, 2, 5, inst_14154, inst_14155, null);
                        var state_14167__$1 = function() {
                          var statearr_14174 = state_14167;
                          statearr_14174[8] = inst_14153__$1;
                          return statearr_14174;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14167__$1, 8, jobs, inst_14156);
                      } else {
                        if (state_val_14168 === 7) {
                          var inst_14163 = state_14167[2];
                          var state_14167__$1 = state_14167;
                          var statearr_14175_14287 = state_14167__$1;
                          statearr_14175_14287[2] = inst_14163;
                          statearr_14175_14287[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14168 === 8) {
                            var inst_14153 = state_14167[8];
                            var inst_14158 = state_14167[2];
                            var state_14167__$1 = function() {
                              var statearr_14176 = state_14167;
                              statearr_14176[9] = inst_14158;
                              return statearr_14176;
                            }();
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14167__$1, 9, results, inst_14153);
                          } else {
                            if (state_val_14168 === 9) {
                              var inst_14160 = state_14167[2];
                              var state_14167__$1 = function() {
                                var statearr_14177 = state_14167;
                                statearr_14177[10] = inst_14160;
                                return statearr_14177;
                              }();
                              var statearr_14178_14288 = state_14167__$1;
                              statearr_14178_14288[2] = null;
                              statearr_14178_14288[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___14282, jobs, results, process, async);
        return function(switch__13594__auto__, c__13706__auto___14282, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0 = function() {
              var statearr_14182 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_14182[0] = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__;
              statearr_14182[1] = 1;
              return statearr_14182;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1 = function(state_14167) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_14167);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e14183) {
                    if (e14183 instanceof Object) {
                      var ex__13598__auto__ = e14183;
                      var statearr_14184_14289 = state_14167;
                      statearr_14184_14289[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14167);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14183;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14290 = state_14167;
                  state_14167 = G__14290;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__ = function(state_14167) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1.call(this, state_14167);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___14282, jobs, results, process, async);
      }();
      var state__13708__auto__ = function() {
        var statearr_14185 = f__13707__auto__.call(null);
        statearr_14185[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___14282;
        return statearr_14185;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___14282, jobs, results, process, async));
  var c__13706__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto__, jobs, results, process, async) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto__, jobs, results, process, async) {
          return function(state_14223) {
            var state_val_14224 = state_14223[1];
            if (state_val_14224 === 7) {
              var inst_14219 = state_14223[2];
              var state_14223__$1 = state_14223;
              var statearr_14225_14291 = state_14223__$1;
              statearr_14225_14291[2] = inst_14219;
              statearr_14225_14291[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14224 === 20) {
                var state_14223__$1 = state_14223;
                var statearr_14226_14292 = state_14223__$1;
                statearr_14226_14292[2] = null;
                statearr_14226_14292[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14224 === 1) {
                  var state_14223__$1 = state_14223;
                  var statearr_14227_14293 = state_14223__$1;
                  statearr_14227_14293[2] = null;
                  statearr_14227_14293[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14224 === 4) {
                    var inst_14188 = state_14223[7];
                    var inst_14188__$1 = state_14223[2];
                    var inst_14189 = inst_14188__$1 == null;
                    var state_14223__$1 = function() {
                      var statearr_14228 = state_14223;
                      statearr_14228[7] = inst_14188__$1;
                      return statearr_14228;
                    }();
                    if (cljs.core.truth_(inst_14189)) {
                      var statearr_14229_14294 = state_14223__$1;
                      statearr_14229_14294[1] = 5;
                    } else {
                      var statearr_14230_14295 = state_14223__$1;
                      statearr_14230_14295[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14224 === 15) {
                      var inst_14201 = state_14223[8];
                      var state_14223__$1 = state_14223;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14223__$1, 18, to, inst_14201);
                    } else {
                      if (state_val_14224 === 21) {
                        var inst_14214 = state_14223[2];
                        var state_14223__$1 = state_14223;
                        var statearr_14231_14296 = state_14223__$1;
                        statearr_14231_14296[2] = inst_14214;
                        statearr_14231_14296[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14224 === 13) {
                          var inst_14216 = state_14223[2];
                          var state_14223__$1 = function() {
                            var statearr_14232 = state_14223;
                            statearr_14232[9] = inst_14216;
                            return statearr_14232;
                          }();
                          var statearr_14233_14297 = state_14223__$1;
                          statearr_14233_14297[2] = null;
                          statearr_14233_14297[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14224 === 6) {
                            var inst_14188 = state_14223[7];
                            var state_14223__$1 = state_14223;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14223__$1, 11, inst_14188);
                          } else {
                            if (state_val_14224 === 17) {
                              var inst_14209 = state_14223[2];
                              var state_14223__$1 = state_14223;
                              if (cljs.core.truth_(inst_14209)) {
                                var statearr_14234_14298 = state_14223__$1;
                                statearr_14234_14298[1] = 19;
                              } else {
                                var statearr_14235_14299 = state_14223__$1;
                                statearr_14235_14299[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14224 === 3) {
                                var inst_14221 = state_14223[2];
                                var state_14223__$1 = state_14223;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14223__$1, inst_14221);
                              } else {
                                if (state_val_14224 === 12) {
                                  var inst_14198 = state_14223[10];
                                  var state_14223__$1 = state_14223;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14223__$1, 14, inst_14198);
                                } else {
                                  if (state_val_14224 === 2) {
                                    var state_14223__$1 = state_14223;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14223__$1, 4, results);
                                  } else {
                                    if (state_val_14224 === 19) {
                                      var state_14223__$1 = state_14223;
                                      var statearr_14236_14300 = state_14223__$1;
                                      statearr_14236_14300[2] = null;
                                      statearr_14236_14300[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14224 === 11) {
                                        var inst_14198 = state_14223[2];
                                        var state_14223__$1 = function() {
                                          var statearr_14237 = state_14223;
                                          statearr_14237[10] = inst_14198;
                                          return statearr_14237;
                                        }();
                                        var statearr_14238_14301 = state_14223__$1;
                                        statearr_14238_14301[2] = null;
                                        statearr_14238_14301[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14224 === 9) {
                                          var state_14223__$1 = state_14223;
                                          var statearr_14239_14302 = state_14223__$1;
                                          statearr_14239_14302[2] = null;
                                          statearr_14239_14302[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14224 === 5) {
                                            var state_14223__$1 = state_14223;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_14240_14303 = state_14223__$1;
                                              statearr_14240_14303[1] = 8;
                                            } else {
                                              var statearr_14241_14304 = state_14223__$1;
                                              statearr_14241_14304[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14224 === 14) {
                                              var inst_14201 = state_14223[8];
                                              var inst_14203 = state_14223[11];
                                              var inst_14201__$1 = state_14223[2];
                                              var inst_14202 = inst_14201__$1 == null;
                                              var inst_14203__$1 = cljs.core.not.call(null, inst_14202);
                                              var state_14223__$1 = function() {
                                                var statearr_14242 = state_14223;
                                                statearr_14242[8] = inst_14201__$1;
                                                statearr_14242[11] = inst_14203__$1;
                                                return statearr_14242;
                                              }();
                                              if (inst_14203__$1) {
                                                var statearr_14243_14305 = state_14223__$1;
                                                statearr_14243_14305[1] = 15;
                                              } else {
                                                var statearr_14244_14306 = state_14223__$1;
                                                statearr_14244_14306[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14224 === 16) {
                                                var inst_14203 = state_14223[11];
                                                var state_14223__$1 = state_14223;
                                                var statearr_14245_14307 = state_14223__$1;
                                                statearr_14245_14307[2] = inst_14203;
                                                statearr_14245_14307[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14224 === 10) {
                                                  var inst_14195 = state_14223[2];
                                                  var state_14223__$1 = state_14223;
                                                  var statearr_14246_14308 = state_14223__$1;
                                                  statearr_14246_14308[2] = inst_14195;
                                                  statearr_14246_14308[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14224 === 18) {
                                                    var inst_14206 = state_14223[2];
                                                    var state_14223__$1 = state_14223;
                                                    var statearr_14247_14309 = state_14223__$1;
                                                    statearr_14247_14309[2] = inst_14206;
                                                    statearr_14247_14309[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14224 === 8) {
                                                      var inst_14192 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_14223__$1 = state_14223;
                                                      var statearr_14248_14310 = state_14223__$1;
                                                      statearr_14248_14310[2] = inst_14192;
                                                      statearr_14248_14310[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto__, jobs, results, process, async);
        return function(switch__13594__auto__, c__13706__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0 = function() {
              var statearr_14252 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14252[0] = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__;
              statearr_14252[1] = 1;
              return statearr_14252;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1 = function(state_14223) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_14223);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e14253) {
                    if (e14253 instanceof Object) {
                      var ex__13598__auto__ = e14253;
                      var statearr_14254_14311 = state_14223;
                      statearr_14254_14311[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14223);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14253;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14312 = state_14223;
                  state_14223 = G__14312;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__ = function(state_14223) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1.call(this, state_14223);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__13595__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto__, jobs, results, process, async);
      }();
      var state__13708__auto__ = function() {
        var statearr_14255 = f__13707__auto__.call(null);
        statearr_14255[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto__;
        return statearr_14255;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto__, jobs, results, process, async));
  return c__13706__auto__;
};
cljs.core.async.pipeline_async = function cljs$core$async$pipeline_async(var_args) {
  var args14313 = [];
  var len__5726__auto___14316 = arguments.length;
  var i__5727__auto___14317 = 0;
  while (true) {
    if (i__5727__auto___14317 < len__5726__auto___14316) {
      args14313.push(arguments[i__5727__auto___14317]);
      var G__14318 = i__5727__auto___14317 + 1;
      i__5727__auto___14317 = G__14318;
      continue;
    } else {
    }
    break;
  }
  var G__14315 = args14313.length;
  switch(G__14315) {
    case 4:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14313.length)].join(""));;
  }
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = function(n, to, af, from) {
  return cljs.core.async.pipeline_async.call(null, n, to, af, from, true);
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = function(n, to, af, from, close_QMARK_) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
cljs.core.async.pipeline = function cljs$core$async$pipeline(var_args) {
  var args14320 = [];
  var len__5726__auto___14323 = arguments.length;
  var i__5727__auto___14324 = 0;
  while (true) {
    if (i__5727__auto___14324 < len__5726__auto___14323) {
      args14320.push(arguments[i__5727__auto___14324]);
      var G__14325 = i__5727__auto___14324 + 1;
      i__5727__auto___14324 = G__14325;
      continue;
    } else {
    }
    break;
  }
  var G__14322 = args14320.length;
  switch(G__14322) {
    case 4:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14320.length)].join(""));;
  }
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = function(n, to, xf, from) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, true);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = function(n, to, xf, from, close_QMARK_) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, close_QMARK_, null);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
};
cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
cljs.core.async.split = function cljs$core$async$split(var_args) {
  var args14327 = [];
  var len__5726__auto___14380 = arguments.length;
  var i__5727__auto___14381 = 0;
  while (true) {
    if (i__5727__auto___14381 < len__5726__auto___14380) {
      args14327.push(arguments[i__5727__auto___14381]);
      var G__14382 = i__5727__auto___14381 + 1;
      i__5727__auto___14381 = G__14382;
      continue;
    } else {
    }
    break;
  }
  var G__14329 = args14327.length;
  switch(G__14329) {
    case 2:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14327.length)].join(""));;
  }
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.split.call(null, p, ch, null, null);
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
  var tc = cljs.core.async.chan.call(null, t_buf_or_n);
  var fc = cljs.core.async.chan.call(null, f_buf_or_n);
  var c__13706__auto___14384 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___14384, tc, fc) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___14384, tc, fc) {
          return function(state_14355) {
            var state_val_14356 = state_14355[1];
            if (state_val_14356 === 7) {
              var inst_14351 = state_14355[2];
              var state_14355__$1 = state_14355;
              var statearr_14357_14385 = state_14355__$1;
              statearr_14357_14385[2] = inst_14351;
              statearr_14357_14385[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14356 === 1) {
                var state_14355__$1 = state_14355;
                var statearr_14358_14386 = state_14355__$1;
                statearr_14358_14386[2] = null;
                statearr_14358_14386[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14356 === 4) {
                  var inst_14332 = state_14355[7];
                  var inst_14332__$1 = state_14355[2];
                  var inst_14333 = inst_14332__$1 == null;
                  var state_14355__$1 = function() {
                    var statearr_14359 = state_14355;
                    statearr_14359[7] = inst_14332__$1;
                    return statearr_14359;
                  }();
                  if (cljs.core.truth_(inst_14333)) {
                    var statearr_14360_14387 = state_14355__$1;
                    statearr_14360_14387[1] = 5;
                  } else {
                    var statearr_14361_14388 = state_14355__$1;
                    statearr_14361_14388[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14356 === 13) {
                    var state_14355__$1 = state_14355;
                    var statearr_14362_14389 = state_14355__$1;
                    statearr_14362_14389[2] = null;
                    statearr_14362_14389[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14356 === 6) {
                      var inst_14332 = state_14355[7];
                      var inst_14338 = p.call(null, inst_14332);
                      var state_14355__$1 = state_14355;
                      if (cljs.core.truth_(inst_14338)) {
                        var statearr_14363_14390 = state_14355__$1;
                        statearr_14363_14390[1] = 9;
                      } else {
                        var statearr_14364_14391 = state_14355__$1;
                        statearr_14364_14391[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14356 === 3) {
                        var inst_14353 = state_14355[2];
                        var state_14355__$1 = state_14355;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14355__$1, inst_14353);
                      } else {
                        if (state_val_14356 === 12) {
                          var state_14355__$1 = state_14355;
                          var statearr_14365_14392 = state_14355__$1;
                          statearr_14365_14392[2] = null;
                          statearr_14365_14392[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14356 === 2) {
                            var state_14355__$1 = state_14355;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14355__$1, 4, ch);
                          } else {
                            if (state_val_14356 === 11) {
                              var inst_14332 = state_14355[7];
                              var inst_14342 = state_14355[2];
                              var state_14355__$1 = state_14355;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14355__$1, 8, inst_14342, inst_14332);
                            } else {
                              if (state_val_14356 === 9) {
                                var state_14355__$1 = state_14355;
                                var statearr_14366_14393 = state_14355__$1;
                                statearr_14366_14393[2] = tc;
                                statearr_14366_14393[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14356 === 5) {
                                  var inst_14335 = cljs.core.async.close_BANG_.call(null, tc);
                                  var inst_14336 = cljs.core.async.close_BANG_.call(null, fc);
                                  var state_14355__$1 = function() {
                                    var statearr_14367 = state_14355;
                                    statearr_14367[8] = inst_14335;
                                    return statearr_14367;
                                  }();
                                  var statearr_14368_14394 = state_14355__$1;
                                  statearr_14368_14394[2] = inst_14336;
                                  statearr_14368_14394[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14356 === 14) {
                                    var inst_14349 = state_14355[2];
                                    var state_14355__$1 = state_14355;
                                    var statearr_14369_14395 = state_14355__$1;
                                    statearr_14369_14395[2] = inst_14349;
                                    statearr_14369_14395[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14356 === 10) {
                                      var state_14355__$1 = state_14355;
                                      var statearr_14370_14396 = state_14355__$1;
                                      statearr_14370_14396[2] = fc;
                                      statearr_14370_14396[1] = 11;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14356 === 8) {
                                        var inst_14344 = state_14355[2];
                                        var state_14355__$1 = state_14355;
                                        if (cljs.core.truth_(inst_14344)) {
                                          var statearr_14371_14397 = state_14355__$1;
                                          statearr_14371_14397[1] = 12;
                                        } else {
                                          var statearr_14372_14398 = state_14355__$1;
                                          statearr_14372_14398[1] = 13;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___14384, tc, fc);
        return function(switch__13594__auto__, c__13706__auto___14384, tc, fc) {
          return function() {
            var cljs$core$async$state_machine__13595__auto__ = null;
            var cljs$core$async$state_machine__13595__auto____0 = function() {
              var statearr_14376 = [null, null, null, null, null, null, null, null, null];
              statearr_14376[0] = cljs$core$async$state_machine__13595__auto__;
              statearr_14376[1] = 1;
              return statearr_14376;
            };
            var cljs$core$async$state_machine__13595__auto____1 = function(state_14355) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_14355);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e14377) {
                    if (e14377 instanceof Object) {
                      var ex__13598__auto__ = e14377;
                      var statearr_14378_14399 = state_14355;
                      statearr_14378_14399[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14355);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14377;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14400 = state_14355;
                  state_14355 = G__14400;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__13595__auto__ = function(state_14355) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__13595__auto____1.call(this, state_14355);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__13595__auto____0;
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__13595__auto____1;
            return cljs$core$async$state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___14384, tc, fc);
      }();
      var state__13708__auto__ = function() {
        var statearr_14379 = f__13707__auto__.call(null);
        statearr_14379[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___14384;
        return statearr_14379;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___14384, tc, fc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
};
cljs.core.async.split.cljs$lang$maxFixedArity = 4;
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__13706__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto__) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto__) {
          return function(state_14464) {
            var state_val_14465 = state_14464[1];
            if (state_val_14465 === 7) {
              var inst_14460 = state_14464[2];
              var state_14464__$1 = state_14464;
              var statearr_14466_14487 = state_14464__$1;
              statearr_14466_14487[2] = inst_14460;
              statearr_14466_14487[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14465 === 1) {
                var inst_14444 = init;
                var state_14464__$1 = function() {
                  var statearr_14467 = state_14464;
                  statearr_14467[7] = inst_14444;
                  return statearr_14467;
                }();
                var statearr_14468_14488 = state_14464__$1;
                statearr_14468_14488[2] = null;
                statearr_14468_14488[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14465 === 4) {
                  var inst_14447 = state_14464[8];
                  var inst_14447__$1 = state_14464[2];
                  var inst_14448 = inst_14447__$1 == null;
                  var state_14464__$1 = function() {
                    var statearr_14469 = state_14464;
                    statearr_14469[8] = inst_14447__$1;
                    return statearr_14469;
                  }();
                  if (cljs.core.truth_(inst_14448)) {
                    var statearr_14470_14489 = state_14464__$1;
                    statearr_14470_14489[1] = 5;
                  } else {
                    var statearr_14471_14490 = state_14464__$1;
                    statearr_14471_14490[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14465 === 6) {
                    var inst_14451 = state_14464[9];
                    var inst_14447 = state_14464[8];
                    var inst_14444 = state_14464[7];
                    var inst_14451__$1 = f.call(null, inst_14444, inst_14447);
                    var inst_14452 = cljs.core.reduced_QMARK_.call(null, inst_14451__$1);
                    var state_14464__$1 = function() {
                      var statearr_14472 = state_14464;
                      statearr_14472[9] = inst_14451__$1;
                      return statearr_14472;
                    }();
                    if (inst_14452) {
                      var statearr_14473_14491 = state_14464__$1;
                      statearr_14473_14491[1] = 8;
                    } else {
                      var statearr_14474_14492 = state_14464__$1;
                      statearr_14474_14492[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14465 === 3) {
                      var inst_14462 = state_14464[2];
                      var state_14464__$1 = state_14464;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14464__$1, inst_14462);
                    } else {
                      if (state_val_14465 === 2) {
                        var state_14464__$1 = state_14464;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14464__$1, 4, ch);
                      } else {
                        if (state_val_14465 === 9) {
                          var inst_14451 = state_14464[9];
                          var inst_14444 = inst_14451;
                          var state_14464__$1 = function() {
                            var statearr_14475 = state_14464;
                            statearr_14475[7] = inst_14444;
                            return statearr_14475;
                          }();
                          var statearr_14476_14493 = state_14464__$1;
                          statearr_14476_14493[2] = null;
                          statearr_14476_14493[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14465 === 5) {
                            var inst_14444 = state_14464[7];
                            var state_14464__$1 = state_14464;
                            var statearr_14477_14494 = state_14464__$1;
                            statearr_14477_14494[2] = inst_14444;
                            statearr_14477_14494[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14465 === 10) {
                              var inst_14458 = state_14464[2];
                              var state_14464__$1 = state_14464;
                              var statearr_14478_14495 = state_14464__$1;
                              statearr_14478_14495[2] = inst_14458;
                              statearr_14478_14495[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14465 === 8) {
                                var inst_14451 = state_14464[9];
                                var inst_14454 = cljs.core.deref.call(null, inst_14451);
                                var state_14464__$1 = state_14464;
                                var statearr_14479_14496 = state_14464__$1;
                                statearr_14479_14496[2] = inst_14454;
                                statearr_14479_14496[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto__);
        return function(switch__13594__auto__, c__13706__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__13595__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__13595__auto____0 = function() {
              var statearr_14483 = [null, null, null, null, null, null, null, null, null, null];
              statearr_14483[0] = cljs$core$async$reduce_$_state_machine__13595__auto__;
              statearr_14483[1] = 1;
              return statearr_14483;
            };
            var cljs$core$async$reduce_$_state_machine__13595__auto____1 = function(state_14464) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_14464);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e14484) {
                    if (e14484 instanceof Object) {
                      var ex__13598__auto__ = e14484;
                      var statearr_14485_14497 = state_14464;
                      statearr_14485_14497[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14464);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14484;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14498 = state_14464;
                  state_14464 = G__14498;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__13595__auto__ = function(state_14464) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__13595__auto____1.call(this, state_14464);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__13595__auto____0;
            cljs$core$async$reduce_$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__13595__auto____1;
            return cljs$core$async$reduce_$_state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto__);
      }();
      var state__13708__auto__ = function() {
        var statearr_14486 = f__13707__auto__.call(null);
        statearr_14486[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto__;
        return statearr_14486;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto__));
  return c__13706__auto__;
};
cljs.core.async.onto_chan = function cljs$core$async$onto_chan(var_args) {
  var args14499 = [];
  var len__5726__auto___14551 = arguments.length;
  var i__5727__auto___14552 = 0;
  while (true) {
    if (i__5727__auto___14552 < len__5726__auto___14551) {
      args14499.push(arguments[i__5727__auto___14552]);
      var G__14553 = i__5727__auto___14552 + 1;
      i__5727__auto___14552 = G__14553;
      continue;
    } else {
    }
    break;
  }
  var G__14501 = args14499.length;
  switch(G__14501) {
    case 2:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14499.length)].join(""));;
  }
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan.call(null, ch, coll, true);
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  var c__13706__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto__) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto__) {
          return function(state_14526) {
            var state_val_14527 = state_14526[1];
            if (state_val_14527 === 7) {
              var inst_14508 = state_14526[2];
              var state_14526__$1 = state_14526;
              var statearr_14528_14555 = state_14526__$1;
              statearr_14528_14555[2] = inst_14508;
              statearr_14528_14555[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14527 === 1) {
                var inst_14502 = cljs.core.seq.call(null, coll);
                var inst_14503 = inst_14502;
                var state_14526__$1 = function() {
                  var statearr_14529 = state_14526;
                  statearr_14529[7] = inst_14503;
                  return statearr_14529;
                }();
                var statearr_14530_14556 = state_14526__$1;
                statearr_14530_14556[2] = null;
                statearr_14530_14556[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14527 === 4) {
                  var inst_14503 = state_14526[7];
                  var inst_14506 = cljs.core.first.call(null, inst_14503);
                  var state_14526__$1 = state_14526;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14526__$1, 7, ch, inst_14506);
                } else {
                  if (state_val_14527 === 13) {
                    var inst_14520 = state_14526[2];
                    var state_14526__$1 = state_14526;
                    var statearr_14531_14557 = state_14526__$1;
                    statearr_14531_14557[2] = inst_14520;
                    statearr_14531_14557[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14527 === 6) {
                      var inst_14511 = state_14526[2];
                      var state_14526__$1 = state_14526;
                      if (cljs.core.truth_(inst_14511)) {
                        var statearr_14532_14558 = state_14526__$1;
                        statearr_14532_14558[1] = 8;
                      } else {
                        var statearr_14533_14559 = state_14526__$1;
                        statearr_14533_14559[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14527 === 3) {
                        var inst_14524 = state_14526[2];
                        var state_14526__$1 = state_14526;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14526__$1, inst_14524);
                      } else {
                        if (state_val_14527 === 12) {
                          var state_14526__$1 = state_14526;
                          var statearr_14534_14560 = state_14526__$1;
                          statearr_14534_14560[2] = null;
                          statearr_14534_14560[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14527 === 2) {
                            var inst_14503 = state_14526[7];
                            var state_14526__$1 = state_14526;
                            if (cljs.core.truth_(inst_14503)) {
                              var statearr_14535_14561 = state_14526__$1;
                              statearr_14535_14561[1] = 4;
                            } else {
                              var statearr_14536_14562 = state_14526__$1;
                              statearr_14536_14562[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14527 === 11) {
                              var inst_14517 = cljs.core.async.close_BANG_.call(null, ch);
                              var state_14526__$1 = state_14526;
                              var statearr_14537_14563 = state_14526__$1;
                              statearr_14537_14563[2] = inst_14517;
                              statearr_14537_14563[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14527 === 9) {
                                var state_14526__$1 = state_14526;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_14538_14564 = state_14526__$1;
                                  statearr_14538_14564[1] = 11;
                                } else {
                                  var statearr_14539_14565 = state_14526__$1;
                                  statearr_14539_14565[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14527 === 5) {
                                  var inst_14503 = state_14526[7];
                                  var state_14526__$1 = state_14526;
                                  var statearr_14540_14566 = state_14526__$1;
                                  statearr_14540_14566[2] = inst_14503;
                                  statearr_14540_14566[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14527 === 10) {
                                    var inst_14522 = state_14526[2];
                                    var state_14526__$1 = state_14526;
                                    var statearr_14541_14567 = state_14526__$1;
                                    statearr_14541_14567[2] = inst_14522;
                                    statearr_14541_14567[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14527 === 8) {
                                      var inst_14503 = state_14526[7];
                                      var inst_14513 = cljs.core.next.call(null, inst_14503);
                                      var inst_14503__$1 = inst_14513;
                                      var state_14526__$1 = function() {
                                        var statearr_14542 = state_14526;
                                        statearr_14542[7] = inst_14503__$1;
                                        return statearr_14542;
                                      }();
                                      var statearr_14543_14568 = state_14526__$1;
                                      statearr_14543_14568[2] = null;
                                      statearr_14543_14568[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto__);
        return function(switch__13594__auto__, c__13706__auto__) {
          return function() {
            var cljs$core$async$state_machine__13595__auto__ = null;
            var cljs$core$async$state_machine__13595__auto____0 = function() {
              var statearr_14547 = [null, null, null, null, null, null, null, null];
              statearr_14547[0] = cljs$core$async$state_machine__13595__auto__;
              statearr_14547[1] = 1;
              return statearr_14547;
            };
            var cljs$core$async$state_machine__13595__auto____1 = function(state_14526) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_14526);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e14548) {
                    if (e14548 instanceof Object) {
                      var ex__13598__auto__ = e14548;
                      var statearr_14549_14569 = state_14526;
                      statearr_14549_14569[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14526);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14548;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14570 = state_14526;
                  state_14526 = G__14570;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__13595__auto__ = function(state_14526) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__13595__auto____1.call(this, state_14526);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__13595__auto____0;
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__13595__auto____1;
            return cljs$core$async$state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto__);
      }();
      var state__13708__auto__ = function() {
        var statearr_14550 = f__13707__auto__.call(null);
        statearr_14550[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto__;
        return statearr_14550;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto__));
  return c__13706__auto__;
};
cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
};
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (!(_ == null) && !(_.cljs$core$async$Mux$muxch_STAR_$arity$1 == null)) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__5323__auto__ = _ == null ? null : _;
    var m__5324__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, _);
    } else {
      var m__5324__auto____$1 = cljs.core.async.muxch_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, _);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
      }
    }
  }
};
cljs.core.async.Mult = function() {
};
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (!(m == null) && !(m.cljs$core$async$Mult$tap_STAR_$arity$3 == null)) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__5323__auto__ = m == null ? null : m;
    var m__5324__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, m, ch, close_QMARK_);
    } else {
      var m__5324__auto____$1 = cljs.core.async.tap_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, m, ch, close_QMARK_);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
      }
    }
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mult$untap_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__5323__auto__ = m == null ? null : m;
    var m__5324__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, m, ch);
    } else {
      var m__5324__auto____$1 = cljs.core.async.untap_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, m, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
      }
    }
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (!(m == null) && !(m.cljs$core$async$Mult$untap_all_STAR_$arity$1 == null)) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__5323__auto__ = m == null ? null : m;
    var m__5324__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, m);
    } else {
      var m__5324__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, m);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
      }
    }
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t_cljs$core$async14792 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async14792 = function(mult, ch, cs, meta14793) {
        this.mult = mult;
        this.ch = ch;
        this.cs = cs;
        this.meta14793 = meta14793;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async14792.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_14794, meta14793__$1) {
          var self__ = this;
          var _14794__$1 = this;
          return new cljs.core.async.t_cljs$core$async14792(self__.mult, self__.ch, self__.cs, meta14793__$1);
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14792.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_14794) {
          var self__ = this;
          var _14794__$1 = this;
          return self__.meta14793;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14792.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t_cljs$core$async14792.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14792.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t_cljs$core$async14792.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14792.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14792.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14792.getBasis = function(cs) {
        return function() {
          return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mult", "mult", -1187640995, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", 
          "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap puts to a closed channel, it will be removed from the mult."], 
          null)), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "meta14793", "meta14793", 636813912, null)], null);
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14792.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async14792.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async14792";
      cljs.core.async.t_cljs$core$async14792.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
          return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async/t_cljs$core$async14792");
        };
      }(cs);
      cljs.core.async.__GT_t_cljs$core$async14792 = function(cs) {
        return function cljs$core$async$mult_$___GT_t_cljs$core$async14792(mult__$1, ch__$1, cs__$1, meta14793) {
          return new cljs.core.async.t_cljs$core$async14792(mult__$1, ch__$1, cs__$1, meta14793);
        };
      }(cs);
    }
    return new cljs.core.async.t_cljs$core$async14792(cljs$core$async$mult, ch, cs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__13706__auto___15013 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___15013, cs, m, dchan, dctr, done) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___15013, cs, m, dchan, dctr, done) {
          return function(state_14925) {
            var state_val_14926 = state_14925[1];
            if (state_val_14926 === 7) {
              var inst_14921 = state_14925[2];
              var state_14925__$1 = state_14925;
              var statearr_14927_15014 = state_14925__$1;
              statearr_14927_15014[2] = inst_14921;
              statearr_14927_15014[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14926 === 20) {
                var inst_14826 = state_14925[7];
                var inst_14836 = cljs.core.first.call(null, inst_14826);
                var inst_14837 = cljs.core.nth.call(null, inst_14836, 0, null);
                var inst_14838 = cljs.core.nth.call(null, inst_14836, 1, null);
                var state_14925__$1 = function() {
                  var statearr_14928 = state_14925;
                  statearr_14928[8] = inst_14837;
                  return statearr_14928;
                }();
                if (cljs.core.truth_(inst_14838)) {
                  var statearr_14929_15015 = state_14925__$1;
                  statearr_14929_15015[1] = 22;
                } else {
                  var statearr_14930_15016 = state_14925__$1;
                  statearr_14930_15016[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14926 === 27) {
                  var inst_14797 = state_14925[9];
                  var inst_14868 = state_14925[10];
                  var inst_14866 = state_14925[11];
                  var inst_14873 = state_14925[12];
                  var inst_14873__$1 = cljs.core._nth.call(null, inst_14866, inst_14868);
                  var inst_14874 = cljs.core.async.put_BANG_.call(null, inst_14873__$1, inst_14797, done);
                  var state_14925__$1 = function() {
                    var statearr_14931 = state_14925;
                    statearr_14931[12] = inst_14873__$1;
                    return statearr_14931;
                  }();
                  if (cljs.core.truth_(inst_14874)) {
                    var statearr_14932_15017 = state_14925__$1;
                    statearr_14932_15017[1] = 30;
                  } else {
                    var statearr_14933_15018 = state_14925__$1;
                    statearr_14933_15018[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14926 === 1) {
                    var state_14925__$1 = state_14925;
                    var statearr_14934_15019 = state_14925__$1;
                    statearr_14934_15019[2] = null;
                    statearr_14934_15019[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14926 === 24) {
                      var inst_14826 = state_14925[7];
                      var inst_14843 = state_14925[2];
                      var inst_14844 = cljs.core.next.call(null, inst_14826);
                      var inst_14806 = inst_14844;
                      var inst_14807 = null;
                      var inst_14808 = 0;
                      var inst_14809 = 0;
                      var state_14925__$1 = function() {
                        var statearr_14935 = state_14925;
                        statearr_14935[13] = inst_14809;
                        statearr_14935[14] = inst_14843;
                        statearr_14935[15] = inst_14808;
                        statearr_14935[16] = inst_14806;
                        statearr_14935[17] = inst_14807;
                        return statearr_14935;
                      }();
                      var statearr_14936_15020 = state_14925__$1;
                      statearr_14936_15020[2] = null;
                      statearr_14936_15020[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14926 === 39) {
                        var state_14925__$1 = state_14925;
                        var statearr_14940_15021 = state_14925__$1;
                        statearr_14940_15021[2] = null;
                        statearr_14940_15021[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14926 === 4) {
                          var inst_14797 = state_14925[9];
                          var inst_14797__$1 = state_14925[2];
                          var inst_14798 = inst_14797__$1 == null;
                          var state_14925__$1 = function() {
                            var statearr_14941 = state_14925;
                            statearr_14941[9] = inst_14797__$1;
                            return statearr_14941;
                          }();
                          if (cljs.core.truth_(inst_14798)) {
                            var statearr_14942_15022 = state_14925__$1;
                            statearr_14942_15022[1] = 5;
                          } else {
                            var statearr_14943_15023 = state_14925__$1;
                            statearr_14943_15023[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14926 === 15) {
                            var inst_14809 = state_14925[13];
                            var inst_14808 = state_14925[15];
                            var inst_14806 = state_14925[16];
                            var inst_14807 = state_14925[17];
                            var inst_14822 = state_14925[2];
                            var inst_14823 = inst_14809 + 1;
                            var tmp14937 = inst_14808;
                            var tmp14938 = inst_14806;
                            var tmp14939 = inst_14807;
                            var inst_14806__$1 = tmp14938;
                            var inst_14807__$1 = tmp14939;
                            var inst_14808__$1 = tmp14937;
                            var inst_14809__$1 = inst_14823;
                            var state_14925__$1 = function() {
                              var statearr_14944 = state_14925;
                              statearr_14944[13] = inst_14809__$1;
                              statearr_14944[15] = inst_14808__$1;
                              statearr_14944[18] = inst_14822;
                              statearr_14944[16] = inst_14806__$1;
                              statearr_14944[17] = inst_14807__$1;
                              return statearr_14944;
                            }();
                            var statearr_14945_15024 = state_14925__$1;
                            statearr_14945_15024[2] = null;
                            statearr_14945_15024[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14926 === 21) {
                              var inst_14847 = state_14925[2];
                              var state_14925__$1 = state_14925;
                              var statearr_14949_15025 = state_14925__$1;
                              statearr_14949_15025[2] = inst_14847;
                              statearr_14949_15025[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14926 === 31) {
                                var inst_14873 = state_14925[12];
                                var inst_14877 = done.call(null, null);
                                var inst_14878 = cljs.core.async.untap_STAR_.call(null, m, inst_14873);
                                var state_14925__$1 = function() {
                                  var statearr_14950 = state_14925;
                                  statearr_14950[19] = inst_14877;
                                  return statearr_14950;
                                }();
                                var statearr_14951_15026 = state_14925__$1;
                                statearr_14951_15026[2] = inst_14878;
                                statearr_14951_15026[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14926 === 32) {
                                  var inst_14867 = state_14925[20];
                                  var inst_14868 = state_14925[10];
                                  var inst_14865 = state_14925[21];
                                  var inst_14866 = state_14925[11];
                                  var inst_14880 = state_14925[2];
                                  var inst_14881 = inst_14868 + 1;
                                  var tmp14946 = inst_14867;
                                  var tmp14947 = inst_14865;
                                  var tmp14948 = inst_14866;
                                  var inst_14865__$1 = tmp14947;
                                  var inst_14866__$1 = tmp14948;
                                  var inst_14867__$1 = tmp14946;
                                  var inst_14868__$1 = inst_14881;
                                  var state_14925__$1 = function() {
                                    var statearr_14952 = state_14925;
                                    statearr_14952[20] = inst_14867__$1;
                                    statearr_14952[10] = inst_14868__$1;
                                    statearr_14952[21] = inst_14865__$1;
                                    statearr_14952[11] = inst_14866__$1;
                                    statearr_14952[22] = inst_14880;
                                    return statearr_14952;
                                  }();
                                  var statearr_14953_15027 = state_14925__$1;
                                  statearr_14953_15027[2] = null;
                                  statearr_14953_15027[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14926 === 40) {
                                    var inst_14893 = state_14925[23];
                                    var inst_14897 = done.call(null, null);
                                    var inst_14898 = cljs.core.async.untap_STAR_.call(null, m, inst_14893);
                                    var state_14925__$1 = function() {
                                      var statearr_14954 = state_14925;
                                      statearr_14954[24] = inst_14897;
                                      return statearr_14954;
                                    }();
                                    var statearr_14955_15028 = state_14925__$1;
                                    statearr_14955_15028[2] = inst_14898;
                                    statearr_14955_15028[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14926 === 33) {
                                      var inst_14884 = state_14925[25];
                                      var inst_14886 = cljs.core.chunked_seq_QMARK_.call(null, inst_14884);
                                      var state_14925__$1 = state_14925;
                                      if (inst_14886) {
                                        var statearr_14956_15029 = state_14925__$1;
                                        statearr_14956_15029[1] = 36;
                                      } else {
                                        var statearr_14957_15030 = state_14925__$1;
                                        statearr_14957_15030[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14926 === 13) {
                                        var inst_14816 = state_14925[26];
                                        var inst_14819 = cljs.core.async.close_BANG_.call(null, inst_14816);
                                        var state_14925__$1 = state_14925;
                                        var statearr_14958_15031 = state_14925__$1;
                                        statearr_14958_15031[2] = inst_14819;
                                        statearr_14958_15031[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14926 === 22) {
                                          var inst_14837 = state_14925[8];
                                          var inst_14840 = cljs.core.async.close_BANG_.call(null, inst_14837);
                                          var state_14925__$1 = state_14925;
                                          var statearr_14959_15032 = state_14925__$1;
                                          statearr_14959_15032[2] = inst_14840;
                                          statearr_14959_15032[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14926 === 36) {
                                            var inst_14884 = state_14925[25];
                                            var inst_14888 = cljs.core.chunk_first.call(null, inst_14884);
                                            var inst_14889 = cljs.core.chunk_rest.call(null, inst_14884);
                                            var inst_14890 = cljs.core.count.call(null, inst_14888);
                                            var inst_14865 = inst_14889;
                                            var inst_14866 = inst_14888;
                                            var inst_14867 = inst_14890;
                                            var inst_14868 = 0;
                                            var state_14925__$1 = function() {
                                              var statearr_14960 = state_14925;
                                              statearr_14960[20] = inst_14867;
                                              statearr_14960[10] = inst_14868;
                                              statearr_14960[21] = inst_14865;
                                              statearr_14960[11] = inst_14866;
                                              return statearr_14960;
                                            }();
                                            var statearr_14961_15033 = state_14925__$1;
                                            statearr_14961_15033[2] = null;
                                            statearr_14961_15033[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14926 === 41) {
                                              var inst_14884 = state_14925[25];
                                              var inst_14900 = state_14925[2];
                                              var inst_14901 = cljs.core.next.call(null, inst_14884);
                                              var inst_14865 = inst_14901;
                                              var inst_14866 = null;
                                              var inst_14867 = 0;
                                              var inst_14868 = 0;
                                              var state_14925__$1 = function() {
                                                var statearr_14962 = state_14925;
                                                statearr_14962[27] = inst_14900;
                                                statearr_14962[20] = inst_14867;
                                                statearr_14962[10] = inst_14868;
                                                statearr_14962[21] = inst_14865;
                                                statearr_14962[11] = inst_14866;
                                                return statearr_14962;
                                              }();
                                              var statearr_14963_15034 = state_14925__$1;
                                              statearr_14963_15034[2] = null;
                                              statearr_14963_15034[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14926 === 43) {
                                                var state_14925__$1 = state_14925;
                                                var statearr_14964_15035 = state_14925__$1;
                                                statearr_14964_15035[2] = null;
                                                statearr_14964_15035[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14926 === 29) {
                                                  var inst_14909 = state_14925[2];
                                                  var state_14925__$1 = state_14925;
                                                  var statearr_14965_15036 = state_14925__$1;
                                                  statearr_14965_15036[2] = inst_14909;
                                                  statearr_14965_15036[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14926 === 44) {
                                                    var inst_14918 = state_14925[2];
                                                    var state_14925__$1 = function() {
                                                      var statearr_14966 = state_14925;
                                                      statearr_14966[28] = inst_14918;
                                                      return statearr_14966;
                                                    }();
                                                    var statearr_14967_15037 = state_14925__$1;
                                                    statearr_14967_15037[2] = null;
                                                    statearr_14967_15037[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14926 === 6) {
                                                      var inst_14857 = state_14925[29];
                                                      var inst_14856 = cljs.core.deref.call(null, cs);
                                                      var inst_14857__$1 = cljs.core.keys.call(null, inst_14856);
                                                      var inst_14858 = cljs.core.count.call(null, inst_14857__$1);
                                                      var inst_14859 = cljs.core.reset_BANG_.call(null, dctr, inst_14858);
                                                      var inst_14864 = cljs.core.seq.call(null, inst_14857__$1);
                                                      var inst_14865 = inst_14864;
                                                      var inst_14866 = null;
                                                      var inst_14867 = 0;
                                                      var inst_14868 = 0;
                                                      var state_14925__$1 = function() {
                                                        var statearr_14968 = state_14925;
                                                        statearr_14968[20] = inst_14867;
                                                        statearr_14968[10] = inst_14868;
                                                        statearr_14968[21] = inst_14865;
                                                        statearr_14968[11] = inst_14866;
                                                        statearr_14968[29] = inst_14857__$1;
                                                        statearr_14968[30] = inst_14859;
                                                        return statearr_14968;
                                                      }();
                                                      var statearr_14969_15038 = state_14925__$1;
                                                      statearr_14969_15038[2] = null;
                                                      statearr_14969_15038[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_14926 === 28) {
                                                        var inst_14865 = state_14925[21];
                                                        var inst_14884 = state_14925[25];
                                                        var inst_14884__$1 = cljs.core.seq.call(null, inst_14865);
                                                        var state_14925__$1 = function() {
                                                          var statearr_14970 = state_14925;
                                                          statearr_14970[25] = inst_14884__$1;
                                                          return statearr_14970;
                                                        }();
                                                        if (inst_14884__$1) {
                                                          var statearr_14971_15039 = state_14925__$1;
                                                          statearr_14971_15039[1] = 33;
                                                        } else {
                                                          var statearr_14972_15040 = state_14925__$1;
                                                          statearr_14972_15040[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_14926 === 25) {
                                                          var inst_14867 = state_14925[20];
                                                          var inst_14868 = state_14925[10];
                                                          var inst_14870 = inst_14868 < inst_14867;
                                                          var inst_14871 = inst_14870;
                                                          var state_14925__$1 = state_14925;
                                                          if (cljs.core.truth_(inst_14871)) {
                                                            var statearr_14973_15041 = state_14925__$1;
                                                            statearr_14973_15041[1] = 27;
                                                          } else {
                                                            var statearr_14974_15042 = state_14925__$1;
                                                            statearr_14974_15042[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_14926 === 34) {
                                                            var state_14925__$1 = state_14925;
                                                            var statearr_14975_15043 = state_14925__$1;
                                                            statearr_14975_15043[2] = null;
                                                            statearr_14975_15043[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_14926 === 17) {
                                                              var state_14925__$1 = state_14925;
                                                              var statearr_14976_15044 = state_14925__$1;
                                                              statearr_14976_15044[2] = null;
                                                              statearr_14976_15044[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_14926 === 3) {
                                                                var inst_14923 = state_14925[2];
                                                                var state_14925__$1 = state_14925;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14925__$1, inst_14923);
                                                              } else {
                                                                if (state_val_14926 === 12) {
                                                                  var inst_14852 = state_14925[2];
                                                                  var state_14925__$1 = state_14925;
                                                                  var statearr_14977_15045 = state_14925__$1;
                                                                  statearr_14977_15045[2] = inst_14852;
                                                                  statearr_14977_15045[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_14926 === 2) {
                                                                    var state_14925__$1 = state_14925;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14925__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_14926 === 23) {
                                                                      var state_14925__$1 = state_14925;
                                                                      var statearr_14978_15046 = state_14925__$1;
                                                                      statearr_14978_15046[2] = null;
                                                                      statearr_14978_15046[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_14926 === 35) {
                                                                        var inst_14907 = state_14925[2];
                                                                        var state_14925__$1 = state_14925;
                                                                        var statearr_14979_15047 = state_14925__$1;
                                                                        statearr_14979_15047[2] = inst_14907;
                                                                        statearr_14979_15047[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_14926 === 19) {
                                                                          var inst_14826 = state_14925[7];
                                                                          var inst_14830 = cljs.core.chunk_first.call(null, inst_14826);
                                                                          var inst_14831 = cljs.core.chunk_rest.call(null, inst_14826);
                                                                          var inst_14832 = cljs.core.count.call(null, inst_14830);
                                                                          var inst_14806 = inst_14831;
                                                                          var inst_14807 = inst_14830;
                                                                          var inst_14808 = inst_14832;
                                                                          var inst_14809 = 0;
                                                                          var state_14925__$1 = function() {
                                                                            var statearr_14980 = state_14925;
                                                                            statearr_14980[13] = inst_14809;
                                                                            statearr_14980[15] = inst_14808;
                                                                            statearr_14980[16] = inst_14806;
                                                                            statearr_14980[17] = inst_14807;
                                                                            return statearr_14980;
                                                                          }();
                                                                          var statearr_14981_15048 = state_14925__$1;
                                                                          statearr_14981_15048[2] = null;
                                                                          statearr_14981_15048[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_14926 === 11) {
                                                                            var inst_14826 = state_14925[7];
                                                                            var inst_14806 = state_14925[16];
                                                                            var inst_14826__$1 = cljs.core.seq.call(null, inst_14806);
                                                                            var state_14925__$1 = function() {
                                                                              var statearr_14982 = state_14925;
                                                                              statearr_14982[7] = inst_14826__$1;
                                                                              return statearr_14982;
                                                                            }();
                                                                            if (inst_14826__$1) {
                                                                              var statearr_14983_15049 = state_14925__$1;
                                                                              statearr_14983_15049[1] = 16;
                                                                            } else {
                                                                              var statearr_14984_15050 = state_14925__$1;
                                                                              statearr_14984_15050[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_14926 === 9) {
                                                                              var inst_14854 = state_14925[2];
                                                                              var state_14925__$1 = state_14925;
                                                                              var statearr_14985_15051 = state_14925__$1;
                                                                              statearr_14985_15051[2] = inst_14854;
                                                                              statearr_14985_15051[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_14926 === 5) {
                                                                                var inst_14804 = cljs.core.deref.call(null, cs);
                                                                                var inst_14805 = cljs.core.seq.call(null, inst_14804);
                                                                                var inst_14806 = inst_14805;
                                                                                var inst_14807 = null;
                                                                                var inst_14808 = 0;
                                                                                var inst_14809 = 0;
                                                                                var state_14925__$1 = function() {
                                                                                  var statearr_14986 = state_14925;
                                                                                  statearr_14986[13] = inst_14809;
                                                                                  statearr_14986[15] = inst_14808;
                                                                                  statearr_14986[16] = inst_14806;
                                                                                  statearr_14986[17] = inst_14807;
                                                                                  return statearr_14986;
                                                                                }();
                                                                                var statearr_14987_15052 = state_14925__$1;
                                                                                statearr_14987_15052[2] = null;
                                                                                statearr_14987_15052[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_14926 === 14) {
                                                                                  var state_14925__$1 = state_14925;
                                                                                  var statearr_14988_15053 = state_14925__$1;
                                                                                  statearr_14988_15053[2] = null;
                                                                                  statearr_14988_15053[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_14926 === 45) {
                                                                                    var inst_14915 = state_14925[2];
                                                                                    var state_14925__$1 = state_14925;
                                                                                    var statearr_14989_15054 = state_14925__$1;
                                                                                    statearr_14989_15054[2] = inst_14915;
                                                                                    statearr_14989_15054[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_14926 === 26) {
                                                                                      var inst_14857 = state_14925[29];
                                                                                      var inst_14911 = state_14925[2];
                                                                                      var inst_14912 = cljs.core.seq.call(null, inst_14857);
                                                                                      var state_14925__$1 = function() {
                                                                                        var statearr_14990 = state_14925;
                                                                                        statearr_14990[31] = inst_14911;
                                                                                        return statearr_14990;
                                                                                      }();
                                                                                      if (inst_14912) {
                                                                                        var statearr_14991_15055 = state_14925__$1;
                                                                                        statearr_14991_15055[1] = 42;
                                                                                      } else {
                                                                                        var statearr_14992_15056 = state_14925__$1;
                                                                                        statearr_14992_15056[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_14926 === 16) {
                                                                                        var inst_14826 = state_14925[7];
                                                                                        var inst_14828 = cljs.core.chunked_seq_QMARK_.call(null, inst_14826);
                                                                                        var state_14925__$1 = state_14925;
                                                                                        if (inst_14828) {
                                                                                          var statearr_14993_15057 = state_14925__$1;
                                                                                          statearr_14993_15057[1] = 19;
                                                                                        } else {
                                                                                          var statearr_14994_15058 = state_14925__$1;
                                                                                          statearr_14994_15058[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_14926 === 38) {
                                                                                          var inst_14904 = state_14925[2];
                                                                                          var state_14925__$1 = state_14925;
                                                                                          var statearr_14995_15059 = state_14925__$1;
                                                                                          statearr_14995_15059[2] = inst_14904;
                                                                                          statearr_14995_15059[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_14926 === 30) {
                                                                                            var state_14925__$1 = state_14925;
                                                                                            var statearr_14996_15060 = state_14925__$1;
                                                                                            statearr_14996_15060[2] = null;
                                                                                            statearr_14996_15060[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_14926 === 10) {
                                                                                              var inst_14809 = state_14925[13];
                                                                                              var inst_14807 = state_14925[17];
                                                                                              var inst_14815 = cljs.core._nth.call(null, inst_14807, inst_14809);
                                                                                              var inst_14816 = cljs.core.nth.call(null, inst_14815, 0, null);
                                                                                              var inst_14817 = cljs.core.nth.call(null, inst_14815, 1, null);
                                                                                              var state_14925__$1 = function() {
                                                                                                var statearr_14997 = state_14925;
                                                                                                statearr_14997[26] = inst_14816;
                                                                                                return statearr_14997;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_14817)) {
                                                                                                var statearr_14998_15061 = state_14925__$1;
                                                                                                statearr_14998_15061[1] = 13;
                                                                                              } else {
                                                                                                var statearr_14999_15062 = state_14925__$1;
                                                                                                statearr_14999_15062[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_14926 === 18) {
                                                                                                var inst_14850 = state_14925[2];
                                                                                                var state_14925__$1 = state_14925;
                                                                                                var statearr_15000_15063 = state_14925__$1;
                                                                                                statearr_15000_15063[2] = inst_14850;
                                                                                                statearr_15000_15063[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_14926 === 42) {
                                                                                                  var state_14925__$1 = state_14925;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14925__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_14926 === 37) {
                                                                                                    var inst_14797 = state_14925[9];
                                                                                                    var inst_14884 = state_14925[25];
                                                                                                    var inst_14893 = state_14925[23];
                                                                                                    var inst_14893__$1 = cljs.core.first.call(null, inst_14884);
                                                                                                    var inst_14894 = cljs.core.async.put_BANG_.call(null, inst_14893__$1, inst_14797, done);
                                                                                                    var state_14925__$1 = function() {
                                                                                                      var statearr_15001 = state_14925;
                                                                                                      statearr_15001[23] = inst_14893__$1;
                                                                                                      return statearr_15001;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_14894)) {
                                                                                                      var statearr_15002_15064 = state_14925__$1;
                                                                                                      statearr_15002_15064[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_15003_15065 = state_14925__$1;
                                                                                                      statearr_15003_15065[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_14926 === 8) {
                                                                                                      var inst_14809 = state_14925[13];
                                                                                                      var inst_14808 = state_14925[15];
                                                                                                      var inst_14811 = inst_14809 < inst_14808;
                                                                                                      var inst_14812 = inst_14811;
                                                                                                      var state_14925__$1 = state_14925;
                                                                                                      if (cljs.core.truth_(inst_14812)) {
                                                                                                        var statearr_15004_15066 = state_14925__$1;
                                                                                                        statearr_15004_15066[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_15005_15067 = state_14925__$1;
                                                                                                        statearr_15005_15067[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___15013, cs, m, dchan, dctr, done);
        return function(switch__13594__auto__, c__13706__auto___15013, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__13595__auto__ = null;
            var cljs$core$async$mult_$_state_machine__13595__auto____0 = function() {
              var statearr_15009 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15009[0] = cljs$core$async$mult_$_state_machine__13595__auto__;
              statearr_15009[1] = 1;
              return statearr_15009;
            };
            var cljs$core$async$mult_$_state_machine__13595__auto____1 = function(state_14925) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_14925);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e15010) {
                    if (e15010 instanceof Object) {
                      var ex__13598__auto__ = e15010;
                      var statearr_15011_15068 = state_14925;
                      statearr_15011_15068[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14925);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15010;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15069 = state_14925;
                  state_14925 = G__15069;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__13595__auto__ = function(state_14925) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__13595__auto____1.call(this, state_14925);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__13595__auto____0;
            cljs$core$async$mult_$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__13595__auto____1;
            return cljs$core$async$mult_$_state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___15013, cs, m, dchan, dctr, done);
      }();
      var state__13708__auto__ = function() {
        var statearr_15012 = f__13707__auto__.call(null);
        statearr_15012[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___15013;
        return statearr_15012;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___15013, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function cljs$core$async$tap(var_args) {
  var args15070 = [];
  var len__5726__auto___15073 = arguments.length;
  var i__5727__auto___15074 = 0;
  while (true) {
    if (i__5727__auto___15074 < len__5726__auto___15073) {
      args15070.push(arguments[i__5727__auto___15074]);
      var G__15075 = i__5727__auto___15074 + 1;
      i__5727__auto___15074 = G__15075;
      continue;
    } else {
    }
    break;
  }
  var G__15072 = args15070.length;
  switch(G__15072) {
    case 2:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15070.length)].join(""));;
  }
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = function(mult, ch) {
  return cljs.core.async.tap.call(null, mult, ch, true);
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = function(mult, ch, close_QMARK_) {
  cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
  return ch;
};
cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
};
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mix$admix_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__5323__auto__ = m == null ? null : m;
    var m__5324__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, m, ch);
    } else {
      var m__5324__auto____$1 = cljs.core.async.admix_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, m, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
      }
    }
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mix$unmix_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__5323__auto__ = m == null ? null : m;
    var m__5324__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, m, ch);
    } else {
      var m__5324__auto____$1 = cljs.core.async.unmix_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, m, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
      }
    }
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (!(m == null) && !(m.cljs$core$async$Mix$unmix_all_STAR_$arity$1 == null)) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__5323__auto__ = m == null ? null : m;
    var m__5324__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, m);
    } else {
      var m__5324__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, m);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
      }
    }
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (!(m == null) && !(m.cljs$core$async$Mix$toggle_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__5323__auto__ = m == null ? null : m;
    var m__5324__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, m, state_map);
    } else {
      var m__5324__auto____$1 = cljs.core.async.toggle_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, m, state_map);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
      }
    }
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (!(m == null) && !(m.cljs$core$async$Mix$solo_mode_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__5323__auto__ = m == null ? null : m;
    var m__5324__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, m, mode);
    } else {
      var m__5324__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, m, mode);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
      }
    }
  }
};
cljs.core.async.ioc_alts_BANG_ = function cljs$core$async$ioc_alts_BANG_(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___15087 = arguments.length;
  var i__5727__auto___15088 = 0;
  while (true) {
    if (i__5727__auto___15088 < len__5726__auto___15087) {
      args__5733__auto__.push(arguments[i__5727__auto___15088]);
      var G__15089 = i__5727__auto___15088 + 1;
      i__5727__auto___15088 = G__15089;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 3 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(3), 0) : null;
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5734__auto__);
};
cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(state, cont_block, ports, p__15081) {
  var map__15082 = p__15081;
  var map__15082__$1 = (!(map__15082 == null) ? map__15082.cljs$lang$protocol_mask$partition0$ & 64 || map__15082.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15082) : map__15082;
  var opts = map__15082__$1;
  var statearr_15084_15090 = state;
  statearr_15084_15090[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
  var temp__4425__auto__ = cljs.core.async.do_alts.call(null, function(map__15082, map__15082__$1, opts) {
    return function(val) {
      var statearr_15085_15091 = state;
      statearr_15085_15091[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    };
  }(map__15082, map__15082__$1, opts), ports, opts);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var cb = temp__4425__auto__;
    var statearr_15086_15092 = state;
    statearr_15086_15092[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = function(seq15077) {
  var G__15078 = cljs.core.first.call(null, seq15077);
  var seq15077__$1 = cljs.core.next.call(null, seq15077);
  var G__15079 = cljs.core.first.call(null, seq15077__$1);
  var seq15077__$2 = cljs.core.next.call(null, seq15077__$1);
  var G__15080 = cljs.core.first.call(null, seq15077__$2);
  var seq15077__$3 = cljs.core.next.call(null, seq15077__$2);
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__15078, G__15079, G__15080, seq15077__$3);
};
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t_cljs$core$async15256 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async15256 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta15257) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta15257 = meta15257;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async15256.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_15258, meta15257__$1) {
          var self__ = this;
          var _15258__$1 = this;
          return new cljs.core.async.t_cljs$core$async15256(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta15257__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15256.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_15258) {
          var self__ = this;
          var _15258__$1 = this;
          return self__.meta15257;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15256.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t_cljs$core$async15256.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15256.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t_cljs$core$async15256.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15256.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15256.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15256.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15256.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15256.getBasis = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function() {
          return new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "change", "change", 477485025, null), cljs.core.with_meta(new cljs.core.Symbol(null, "mix", "mix", 2121373763, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
          [new cljs.core.Symbol(null, "out", "out", 729986010, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n"], 
          null)), new cljs.core.Symbol(null, "solo-mode", "solo-mode", 2031788074, null), new cljs.core.Symbol(null, "pick", "pick", 1300068175, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "calc-state", "calc-state", -349968968, null), new cljs.core.Symbol(null, "out", "out", 729986010, null), new cljs.core.Symbol(null, "changed", "changed", -2083710852, null), new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, 
          "attrs", "attrs", -450137186, null), new cljs.core.Symbol(null, "meta15257", "meta15257", 231921413, null)], null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15256.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async15256.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async15256";
      cljs.core.async.t_cljs$core$async15256.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
          return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async/t_cljs$core$async15256");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t_cljs$core$async15256 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t_cljs$core$async15256(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta15257) {
          return new cljs.core.async.t_cljs$core$async15256(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta15257);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t_cljs$core$async15256(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__13706__auto___15419 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___15419, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___15419, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_15356) {
            var state_val_15357 = state_15356[1];
            if (state_val_15357 === 7) {
              var inst_15274 = state_15356[2];
              var state_15356__$1 = state_15356;
              var statearr_15358_15420 = state_15356__$1;
              statearr_15358_15420[2] = inst_15274;
              statearr_15358_15420[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15357 === 20) {
                var inst_15286 = state_15356[7];
                var state_15356__$1 = state_15356;
                var statearr_15359_15421 = state_15356__$1;
                statearr_15359_15421[2] = inst_15286;
                statearr_15359_15421[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15357 === 27) {
                  var state_15356__$1 = state_15356;
                  var statearr_15360_15422 = state_15356__$1;
                  statearr_15360_15422[2] = null;
                  statearr_15360_15422[1] = 28;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15357 === 1) {
                    var inst_15262 = state_15356[8];
                    var inst_15262__$1 = calc_state.call(null);
                    var inst_15264 = inst_15262__$1 == null;
                    var inst_15265 = cljs.core.not.call(null, inst_15264);
                    var state_15356__$1 = function() {
                      var statearr_15361 = state_15356;
                      statearr_15361[8] = inst_15262__$1;
                      return statearr_15361;
                    }();
                    if (inst_15265) {
                      var statearr_15362_15423 = state_15356__$1;
                      statearr_15362_15423[1] = 2;
                    } else {
                      var statearr_15363_15424 = state_15356__$1;
                      statearr_15363_15424[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15357 === 24) {
                      var inst_15330 = state_15356[9];
                      var inst_15309 = state_15356[10];
                      var inst_15316 = state_15356[11];
                      var inst_15330__$1 = inst_15309.call(null, inst_15316);
                      var state_15356__$1 = function() {
                        var statearr_15364 = state_15356;
                        statearr_15364[9] = inst_15330__$1;
                        return statearr_15364;
                      }();
                      if (cljs.core.truth_(inst_15330__$1)) {
                        var statearr_15365_15425 = state_15356__$1;
                        statearr_15365_15425[1] = 29;
                      } else {
                        var statearr_15366_15426 = state_15356__$1;
                        statearr_15366_15426[1] = 30;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15357 === 4) {
                        var inst_15277 = state_15356[2];
                        var state_15356__$1 = state_15356;
                        if (cljs.core.truth_(inst_15277)) {
                          var statearr_15367_15427 = state_15356__$1;
                          statearr_15367_15427[1] = 8;
                        } else {
                          var statearr_15368_15428 = state_15356__$1;
                          statearr_15368_15428[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15357 === 15) {
                          var inst_15303 = state_15356[2];
                          var state_15356__$1 = state_15356;
                          if (cljs.core.truth_(inst_15303)) {
                            var statearr_15369_15429 = state_15356__$1;
                            statearr_15369_15429[1] = 19;
                          } else {
                            var statearr_15370_15430 = state_15356__$1;
                            statearr_15370_15430[1] = 20;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15357 === 21) {
                            var inst_15308 = state_15356[12];
                            var inst_15308__$1 = state_15356[2];
                            var inst_15309 = cljs.core.get.call(null, inst_15308__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                            var inst_15310 = cljs.core.get.call(null, inst_15308__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                            var inst_15311 = cljs.core.get.call(null, inst_15308__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                            var state_15356__$1 = function() {
                              var statearr_15371 = state_15356;
                              statearr_15371[12] = inst_15308__$1;
                              statearr_15371[10] = inst_15309;
                              statearr_15371[13] = inst_15310;
                              return statearr_15371;
                            }();
                            return cljs.core.async.ioc_alts_BANG_.call(null, state_15356__$1, 22, inst_15311);
                          } else {
                            if (state_val_15357 === 31) {
                              var inst_15338 = state_15356[2];
                              var state_15356__$1 = state_15356;
                              if (cljs.core.truth_(inst_15338)) {
                                var statearr_15372_15431 = state_15356__$1;
                                statearr_15372_15431[1] = 32;
                              } else {
                                var statearr_15373_15432 = state_15356__$1;
                                statearr_15373_15432[1] = 33;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15357 === 32) {
                                var inst_15315 = state_15356[14];
                                var state_15356__$1 = state_15356;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15356__$1, 35, out, inst_15315);
                              } else {
                                if (state_val_15357 === 33) {
                                  var inst_15308 = state_15356[12];
                                  var inst_15286 = inst_15308;
                                  var state_15356__$1 = function() {
                                    var statearr_15374 = state_15356;
                                    statearr_15374[7] = inst_15286;
                                    return statearr_15374;
                                  }();
                                  var statearr_15375_15433 = state_15356__$1;
                                  statearr_15375_15433[2] = null;
                                  statearr_15375_15433[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15357 === 13) {
                                    var inst_15286 = state_15356[7];
                                    var inst_15293 = inst_15286.cljs$lang$protocol_mask$partition0$;
                                    var inst_15294 = inst_15293 & 64;
                                    var inst_15295 = inst_15286.cljs$core$ISeq$;
                                    var inst_15296 = inst_15294 || inst_15295;
                                    var state_15356__$1 = state_15356;
                                    if (cljs.core.truth_(inst_15296)) {
                                      var statearr_15376_15434 = state_15356__$1;
                                      statearr_15376_15434[1] = 16;
                                    } else {
                                      var statearr_15377_15435 = state_15356__$1;
                                      statearr_15377_15435[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15357 === 22) {
                                      var inst_15315 = state_15356[14];
                                      var inst_15316 = state_15356[11];
                                      var inst_15314 = state_15356[2];
                                      var inst_15315__$1 = cljs.core.nth.call(null, inst_15314, 0, null);
                                      var inst_15316__$1 = cljs.core.nth.call(null, inst_15314, 1, null);
                                      var inst_15317 = inst_15315__$1 == null;
                                      var inst_15318 = cljs.core._EQ_.call(null, inst_15316__$1, change);
                                      var inst_15319 = inst_15317 || inst_15318;
                                      var state_15356__$1 = function() {
                                        var statearr_15378 = state_15356;
                                        statearr_15378[14] = inst_15315__$1;
                                        statearr_15378[11] = inst_15316__$1;
                                        return statearr_15378;
                                      }();
                                      if (cljs.core.truth_(inst_15319)) {
                                        var statearr_15379_15436 = state_15356__$1;
                                        statearr_15379_15436[1] = 23;
                                      } else {
                                        var statearr_15380_15437 = state_15356__$1;
                                        statearr_15380_15437[1] = 24;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15357 === 36) {
                                        var inst_15308 = state_15356[12];
                                        var inst_15286 = inst_15308;
                                        var state_15356__$1 = function() {
                                          var statearr_15381 = state_15356;
                                          statearr_15381[7] = inst_15286;
                                          return statearr_15381;
                                        }();
                                        var statearr_15382_15438 = state_15356__$1;
                                        statearr_15382_15438[2] = null;
                                        statearr_15382_15438[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15357 === 29) {
                                          var inst_15330 = state_15356[9];
                                          var state_15356__$1 = state_15356;
                                          var statearr_15383_15439 = state_15356__$1;
                                          statearr_15383_15439[2] = inst_15330;
                                          statearr_15383_15439[1] = 31;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_15357 === 6) {
                                            var state_15356__$1 = state_15356;
                                            var statearr_15384_15440 = state_15356__$1;
                                            statearr_15384_15440[2] = false;
                                            statearr_15384_15440[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_15357 === 28) {
                                              var inst_15326 = state_15356[2];
                                              var inst_15327 = calc_state.call(null);
                                              var inst_15286 = inst_15327;
                                              var state_15356__$1 = function() {
                                                var statearr_15385 = state_15356;
                                                statearr_15385[15] = inst_15326;
                                                statearr_15385[7] = inst_15286;
                                                return statearr_15385;
                                              }();
                                              var statearr_15386_15441 = state_15356__$1;
                                              statearr_15386_15441[2] = null;
                                              statearr_15386_15441[1] = 11;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_15357 === 25) {
                                                var inst_15352 = state_15356[2];
                                                var state_15356__$1 = state_15356;
                                                var statearr_15387_15442 = state_15356__$1;
                                                statearr_15387_15442[2] = inst_15352;
                                                statearr_15387_15442[1] = 12;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_15357 === 34) {
                                                  var inst_15350 = state_15356[2];
                                                  var state_15356__$1 = state_15356;
                                                  var statearr_15388_15443 = state_15356__$1;
                                                  statearr_15388_15443[2] = inst_15350;
                                                  statearr_15388_15443[1] = 25;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_15357 === 17) {
                                                    var state_15356__$1 = state_15356;
                                                    var statearr_15389_15444 = state_15356__$1;
                                                    statearr_15389_15444[2] = false;
                                                    statearr_15389_15444[1] = 18;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_15357 === 3) {
                                                      var state_15356__$1 = state_15356;
                                                      var statearr_15390_15445 = state_15356__$1;
                                                      statearr_15390_15445[2] = false;
                                                      statearr_15390_15445[1] = 4;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_15357 === 12) {
                                                        var inst_15354 = state_15356[2];
                                                        var state_15356__$1 = state_15356;
                                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15356__$1, inst_15354);
                                                      } else {
                                                        if (state_val_15357 === 2) {
                                                          var inst_15262 = state_15356[8];
                                                          var inst_15267 = inst_15262.cljs$lang$protocol_mask$partition0$;
                                                          var inst_15268 = inst_15267 & 64;
                                                          var inst_15269 = inst_15262.cljs$core$ISeq$;
                                                          var inst_15270 = inst_15268 || inst_15269;
                                                          var state_15356__$1 = state_15356;
                                                          if (cljs.core.truth_(inst_15270)) {
                                                            var statearr_15391_15446 = state_15356__$1;
                                                            statearr_15391_15446[1] = 5;
                                                          } else {
                                                            var statearr_15392_15447 = state_15356__$1;
                                                            statearr_15392_15447[1] = 6;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_15357 === 23) {
                                                            var inst_15315 = state_15356[14];
                                                            var inst_15321 = inst_15315 == null;
                                                            var state_15356__$1 = state_15356;
                                                            if (cljs.core.truth_(inst_15321)) {
                                                              var statearr_15393_15448 = state_15356__$1;
                                                              statearr_15393_15448[1] = 26;
                                                            } else {
                                                              var statearr_15394_15449 = state_15356__$1;
                                                              statearr_15394_15449[1] = 27;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_15357 === 35) {
                                                              var inst_15341 = state_15356[2];
                                                              var state_15356__$1 = state_15356;
                                                              if (cljs.core.truth_(inst_15341)) {
                                                                var statearr_15395_15450 = state_15356__$1;
                                                                statearr_15395_15450[1] = 36;
                                                              } else {
                                                                var statearr_15396_15451 = state_15356__$1;
                                                                statearr_15396_15451[1] = 37;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_15357 === 19) {
                                                                var inst_15286 = state_15356[7];
                                                                var inst_15305 = cljs.core.apply.call(null, cljs.core.hash_map, inst_15286);
                                                                var state_15356__$1 = state_15356;
                                                                var statearr_15397_15452 = state_15356__$1;
                                                                statearr_15397_15452[2] = inst_15305;
                                                                statearr_15397_15452[1] = 21;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_15357 === 11) {
                                                                  var inst_15286 = state_15356[7];
                                                                  var inst_15290 = inst_15286 == null;
                                                                  var inst_15291 = cljs.core.not.call(null, inst_15290);
                                                                  var state_15356__$1 = state_15356;
                                                                  if (inst_15291) {
                                                                    var statearr_15398_15453 = state_15356__$1;
                                                                    statearr_15398_15453[1] = 13;
                                                                  } else {
                                                                    var statearr_15399_15454 = state_15356__$1;
                                                                    statearr_15399_15454[1] = 14;
                                                                  }
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_15357 === 9) {
                                                                    var inst_15262 = state_15356[8];
                                                                    var state_15356__$1 = state_15356;
                                                                    var statearr_15400_15455 = state_15356__$1;
                                                                    statearr_15400_15455[2] = inst_15262;
                                                                    statearr_15400_15455[1] = 10;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_15357 === 5) {
                                                                      var state_15356__$1 = state_15356;
                                                                      var statearr_15401_15456 = state_15356__$1;
                                                                      statearr_15401_15456[2] = true;
                                                                      statearr_15401_15456[1] = 7;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_15357 === 14) {
                                                                        var state_15356__$1 = state_15356;
                                                                        var statearr_15402_15457 = state_15356__$1;
                                                                        statearr_15402_15457[2] = false;
                                                                        statearr_15402_15457[1] = 15;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_15357 === 26) {
                                                                          var inst_15316 = state_15356[11];
                                                                          var inst_15323 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_15316);
                                                                          var state_15356__$1 = state_15356;
                                                                          var statearr_15403_15458 = state_15356__$1;
                                                                          statearr_15403_15458[2] = inst_15323;
                                                                          statearr_15403_15458[1] = 28;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_15357 === 16) {
                                                                            var state_15356__$1 = state_15356;
                                                                            var statearr_15404_15459 = state_15356__$1;
                                                                            statearr_15404_15459[2] = true;
                                                                            statearr_15404_15459[1] = 18;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_15357 === 38) {
                                                                              var inst_15346 = state_15356[2];
                                                                              var state_15356__$1 = state_15356;
                                                                              var statearr_15405_15460 = state_15356__$1;
                                                                              statearr_15405_15460[2] = inst_15346;
                                                                              statearr_15405_15460[1] = 34;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_15357 === 30) {
                                                                                var inst_15309 = state_15356[10];
                                                                                var inst_15310 = state_15356[13];
                                                                                var inst_15316 = state_15356[11];
                                                                                var inst_15333 = cljs.core.empty_QMARK_.call(null, inst_15309);
                                                                                var inst_15334 = inst_15310.call(null, inst_15316);
                                                                                var inst_15335 = cljs.core.not.call(null, inst_15334);
                                                                                var inst_15336 = inst_15333 && inst_15335;
                                                                                var state_15356__$1 = state_15356;
                                                                                var statearr_15406_15461 = state_15356__$1;
                                                                                statearr_15406_15461[2] = inst_15336;
                                                                                statearr_15406_15461[1] = 31;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_15357 === 10) {
                                                                                  var inst_15262 = state_15356[8];
                                                                                  var inst_15282 = state_15356[2];
                                                                                  var inst_15283 = cljs.core.get.call(null, inst_15282, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                                                  var inst_15284 = cljs.core.get.call(null, inst_15282, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                                                  var inst_15285 = cljs.core.get.call(null, inst_15282, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                                                  var inst_15286 = inst_15262;
                                                                                  var state_15356__$1 = function() {
                                                                                    var statearr_15407 = state_15356;
                                                                                    statearr_15407[16] = inst_15283;
                                                                                    statearr_15407[7] = inst_15286;
                                                                                    statearr_15407[17] = inst_15285;
                                                                                    statearr_15407[18] = inst_15284;
                                                                                    return statearr_15407;
                                                                                  }();
                                                                                  var statearr_15408_15462 = state_15356__$1;
                                                                                  statearr_15408_15462[2] = null;
                                                                                  statearr_15408_15462[1] = 11;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_15357 === 18) {
                                                                                    var inst_15300 = state_15356[2];
                                                                                    var state_15356__$1 = state_15356;
                                                                                    var statearr_15409_15463 = state_15356__$1;
                                                                                    statearr_15409_15463[2] = inst_15300;
                                                                                    statearr_15409_15463[1] = 15;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_15357 === 37) {
                                                                                      var state_15356__$1 = state_15356;
                                                                                      var statearr_15410_15464 = state_15356__$1;
                                                                                      statearr_15410_15464[2] = null;
                                                                                      statearr_15410_15464[1] = 38;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_15357 === 8) {
                                                                                        var inst_15262 = state_15356[8];
                                                                                        var inst_15279 = cljs.core.apply.call(null, cljs.core.hash_map, inst_15262);
                                                                                        var state_15356__$1 = state_15356;
                                                                                        var statearr_15411_15465 = state_15356__$1;
                                                                                        statearr_15411_15465[2] = inst_15279;
                                                                                        statearr_15411_15465[1] = 10;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        return null;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___15419, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__13594__auto__, c__13706__auto___15419, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__13595__auto__ = null;
            var cljs$core$async$mix_$_state_machine__13595__auto____0 = function() {
              var statearr_15415 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15415[0] = cljs$core$async$mix_$_state_machine__13595__auto__;
              statearr_15415[1] = 1;
              return statearr_15415;
            };
            var cljs$core$async$mix_$_state_machine__13595__auto____1 = function(state_15356) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_15356);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e15416) {
                    if (e15416 instanceof Object) {
                      var ex__13598__auto__ = e15416;
                      var statearr_15417_15466 = state_15356;
                      statearr_15417_15466[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15356);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15416;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15467 = state_15356;
                  state_15356 = G__15467;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__13595__auto__ = function(state_15356) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__13595__auto____1.call(this, state_15356);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__13595__auto____0;
            cljs$core$async$mix_$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__13595__auto____1;
            return cljs$core$async$mix_$_state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___15419, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__13708__auto__ = function() {
        var statearr_15418 = f__13707__auto__.call(null);
        statearr_15418[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___15419;
        return statearr_15418;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___15419, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
};
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (!(p == null) && !(p.cljs$core$async$Pub$sub_STAR_$arity$4 == null)) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__5323__auto__ = p == null ? null : p;
    var m__5324__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, p, v, ch, close_QMARK_);
    } else {
      var m__5324__auto____$1 = cljs.core.async.sub_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, p, v, ch, close_QMARK_);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
      }
    }
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_STAR_$arity$3 == null)) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__5323__auto__ = p == null ? null : p;
    var m__5324__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, p, v, ch);
    } else {
      var m__5324__auto____$1 = cljs.core.async.unsub_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, p, v, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
      }
    }
  }
};
cljs.core.async.unsub_all_STAR_ = function cljs$core$async$unsub_all_STAR_(var_args) {
  var args15468 = [];
  var len__5726__auto___15471 = arguments.length;
  var i__5727__auto___15472 = 0;
  while (true) {
    if (i__5727__auto___15472 < len__5726__auto___15471) {
      args15468.push(arguments[i__5727__auto___15472]);
      var G__15473 = i__5727__auto___15472 + 1;
      i__5727__auto___15472 = G__15473;
      continue;
    } else {
    }
    break;
  }
  var G__15470 = args15468.length;
  switch(G__15470) {
    case 1:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15468.length)].join(""));;
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = function(p) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_all_STAR_$arity$1 == null)) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
  } else {
    var x__5323__auto__ = p == null ? null : p;
    var m__5324__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, p);
    } else {
      var m__5324__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, p);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
      }
    }
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = function(p, v) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_all_STAR_$arity$2 == null)) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
  } else {
    var x__5323__auto__ = p == null ? null : p;
    var m__5324__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, p, v);
    } else {
      var m__5324__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, p, v);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
      }
    }
  }
};
cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.async.pub = function cljs$core$async$pub(var_args) {
  var args15476 = [];
  var len__5726__auto___15601 = arguments.length;
  var i__5727__auto___15602 = 0;
  while (true) {
    if (i__5727__auto___15602 < len__5726__auto___15601) {
      args15476.push(arguments[i__5727__auto___15602]);
      var G__15603 = i__5727__auto___15602 + 1;
      i__5727__auto___15602 = G__15603;
      continue;
    } else {
    }
    break;
  }
  var G__15478 = args15476.length;
  switch(G__15478) {
    case 2:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15476.length)].join(""));;
  }
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = function(ch, topic_fn) {
  return cljs.core.async.pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = function(ch, topic_fn, buf_fn) {
  var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ensure_mult = function(mults) {
    return function(topic) {
      var or__4668__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__4668__auto__, mults) {
          return function(p1__15475_SHARP_) {
            if (cljs.core.truth_(p1__15475_SHARP_.call(null, topic))) {
              return p1__15475_SHARP_;
            } else {
              return cljs.core.assoc.call(null, p1__15475_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
            }
          };
        }(or__4668__auto__, mults)), topic);
      }
    };
  }(mults);
  var p = function() {
    if (typeof cljs.core.async.t_cljs$core$async15479 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async15479 = function(ch, topic_fn, buf_fn, mults, ensure_mult, meta15480) {
        this.ch = ch;
        this.topic_fn = topic_fn;
        this.buf_fn = buf_fn;
        this.mults = mults;
        this.ensure_mult = ensure_mult;
        this.meta15480 = meta15480;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async15479.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
        return function(_15481, meta15480__$1) {
          var self__ = this;
          var _15481__$1 = this;
          return new cljs.core.async.t_cljs$core$async15479(self__.ch, self__.topic_fn, self__.buf_fn, self__.mults, self__.ensure_mult, meta15480__$1);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15479.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
        return function(_15481) {
          var self__ = this;
          var _15481__$1 = this;
          return self__.meta15480;
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15479.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t_cljs$core$async15479.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15479.prototype.cljs$core$async$Pub$ = true;
      cljs.core.async.t_cljs$core$async15479.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1, close_QMARK_) {
          var self__ = this;
          var p__$1 = this;
          var m = self__.ensure_mult.call(null, topic);
          return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15479.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1) {
          var self__ = this;
          var p__$1 = this;
          var temp__4425__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
          if (cljs.core.truth_(temp__4425__auto__)) {
            var m = temp__4425__auto__;
            return cljs.core.async.untap.call(null, m, ch__$1);
          } else {
            return null;
          }
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15479.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15479.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
        return function(_, topic) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15479.getBasis = function(mults, ensure_mult) {
        return function() {
          return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "topic-fn", "topic-fn", -862449736, null), new cljs.core.Symbol(null, "buf-fn", "buf-fn", -1200281591, null), new cljs.core.Symbol(null, "mults", "mults", -461114485, null), new cljs.core.Symbol(null, "ensure-mult", "ensure-mult", 1796584816, null), new cljs.core.Symbol(null, "meta15480", "meta15480", -891958689, null)], 
          null);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15479.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async15479.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async15479";
      cljs.core.async.t_cljs$core$async15479.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
        return function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
          return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async/t_cljs$core$async15479");
        };
      }(mults, ensure_mult);
      cljs.core.async.__GT_t_cljs$core$async15479 = function(mults, ensure_mult) {
        return function cljs$core$async$__GT_t_cljs$core$async15479(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta15480) {
          return new cljs.core.async.t_cljs$core$async15479(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta15480);
        };
      }(mults, ensure_mult);
    }
    return new cljs.core.async.t_cljs$core$async15479(ch, topic_fn, buf_fn, mults, ensure_mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__13706__auto___15605 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___15605, mults, ensure_mult, p) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___15605, mults, ensure_mult, p) {
          return function(state_15553) {
            var state_val_15554 = state_15553[1];
            if (state_val_15554 === 7) {
              var inst_15549 = state_15553[2];
              var state_15553__$1 = state_15553;
              var statearr_15555_15606 = state_15553__$1;
              statearr_15555_15606[2] = inst_15549;
              statearr_15555_15606[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15554 === 20) {
                var state_15553__$1 = state_15553;
                var statearr_15556_15607 = state_15553__$1;
                statearr_15556_15607[2] = null;
                statearr_15556_15607[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15554 === 1) {
                  var state_15553__$1 = state_15553;
                  var statearr_15557_15608 = state_15553__$1;
                  statearr_15557_15608[2] = null;
                  statearr_15557_15608[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15554 === 24) {
                    var inst_15532 = state_15553[7];
                    var inst_15541 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_15532);
                    var state_15553__$1 = state_15553;
                    var statearr_15558_15609 = state_15553__$1;
                    statearr_15558_15609[2] = inst_15541;
                    statearr_15558_15609[1] = 25;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15554 === 4) {
                      var inst_15484 = state_15553[8];
                      var inst_15484__$1 = state_15553[2];
                      var inst_15485 = inst_15484__$1 == null;
                      var state_15553__$1 = function() {
                        var statearr_15559 = state_15553;
                        statearr_15559[8] = inst_15484__$1;
                        return statearr_15559;
                      }();
                      if (cljs.core.truth_(inst_15485)) {
                        var statearr_15560_15610 = state_15553__$1;
                        statearr_15560_15610[1] = 5;
                      } else {
                        var statearr_15561_15611 = state_15553__$1;
                        statearr_15561_15611[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15554 === 15) {
                        var inst_15526 = state_15553[2];
                        var state_15553__$1 = state_15553;
                        var statearr_15562_15612 = state_15553__$1;
                        statearr_15562_15612[2] = inst_15526;
                        statearr_15562_15612[1] = 12;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15554 === 21) {
                          var inst_15546 = state_15553[2];
                          var state_15553__$1 = function() {
                            var statearr_15563 = state_15553;
                            statearr_15563[9] = inst_15546;
                            return statearr_15563;
                          }();
                          var statearr_15564_15613 = state_15553__$1;
                          statearr_15564_15613[2] = null;
                          statearr_15564_15613[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15554 === 13) {
                            var inst_15508 = state_15553[10];
                            var inst_15510 = cljs.core.chunked_seq_QMARK_.call(null, inst_15508);
                            var state_15553__$1 = state_15553;
                            if (inst_15510) {
                              var statearr_15565_15614 = state_15553__$1;
                              statearr_15565_15614[1] = 16;
                            } else {
                              var statearr_15566_15615 = state_15553__$1;
                              statearr_15566_15615[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15554 === 22) {
                              var inst_15538 = state_15553[2];
                              var state_15553__$1 = state_15553;
                              if (cljs.core.truth_(inst_15538)) {
                                var statearr_15567_15616 = state_15553__$1;
                                statearr_15567_15616[1] = 23;
                              } else {
                                var statearr_15568_15617 = state_15553__$1;
                                statearr_15568_15617[1] = 24;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15554 === 6) {
                                var inst_15532 = state_15553[7];
                                var inst_15484 = state_15553[8];
                                var inst_15534 = state_15553[11];
                                var inst_15532__$1 = topic_fn.call(null, inst_15484);
                                var inst_15533 = cljs.core.deref.call(null, mults);
                                var inst_15534__$1 = cljs.core.get.call(null, inst_15533, inst_15532__$1);
                                var state_15553__$1 = function() {
                                  var statearr_15569 = state_15553;
                                  statearr_15569[7] = inst_15532__$1;
                                  statearr_15569[11] = inst_15534__$1;
                                  return statearr_15569;
                                }();
                                if (cljs.core.truth_(inst_15534__$1)) {
                                  var statearr_15570_15618 = state_15553__$1;
                                  statearr_15570_15618[1] = 19;
                                } else {
                                  var statearr_15571_15619 = state_15553__$1;
                                  statearr_15571_15619[1] = 20;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15554 === 25) {
                                  var inst_15543 = state_15553[2];
                                  var state_15553__$1 = state_15553;
                                  var statearr_15572_15620 = state_15553__$1;
                                  statearr_15572_15620[2] = inst_15543;
                                  statearr_15572_15620[1] = 21;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15554 === 17) {
                                    var inst_15508 = state_15553[10];
                                    var inst_15517 = cljs.core.first.call(null, inst_15508);
                                    var inst_15518 = cljs.core.async.muxch_STAR_.call(null, inst_15517);
                                    var inst_15519 = cljs.core.async.close_BANG_.call(null, inst_15518);
                                    var inst_15520 = cljs.core.next.call(null, inst_15508);
                                    var inst_15494 = inst_15520;
                                    var inst_15495 = null;
                                    var inst_15496 = 0;
                                    var inst_15497 = 0;
                                    var state_15553__$1 = function() {
                                      var statearr_15573 = state_15553;
                                      statearr_15573[12] = inst_15497;
                                      statearr_15573[13] = inst_15519;
                                      statearr_15573[14] = inst_15496;
                                      statearr_15573[15] = inst_15495;
                                      statearr_15573[16] = inst_15494;
                                      return statearr_15573;
                                    }();
                                    var statearr_15574_15621 = state_15553__$1;
                                    statearr_15574_15621[2] = null;
                                    statearr_15574_15621[1] = 8;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15554 === 3) {
                                      var inst_15551 = state_15553[2];
                                      var state_15553__$1 = state_15553;
                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15553__$1, inst_15551);
                                    } else {
                                      if (state_val_15554 === 12) {
                                        var inst_15528 = state_15553[2];
                                        var state_15553__$1 = state_15553;
                                        var statearr_15575_15622 = state_15553__$1;
                                        statearr_15575_15622[2] = inst_15528;
                                        statearr_15575_15622[1] = 9;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15554 === 2) {
                                          var state_15553__$1 = state_15553;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15553__$1, 4, ch);
                                        } else {
                                          if (state_val_15554 === 23) {
                                            var state_15553__$1 = state_15553;
                                            var statearr_15576_15623 = state_15553__$1;
                                            statearr_15576_15623[2] = null;
                                            statearr_15576_15623[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_15554 === 19) {
                                              var inst_15484 = state_15553[8];
                                              var inst_15534 = state_15553[11];
                                              var inst_15536 = cljs.core.async.muxch_STAR_.call(null, inst_15534);
                                              var state_15553__$1 = state_15553;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15553__$1, 22, inst_15536, inst_15484);
                                            } else {
                                              if (state_val_15554 === 11) {
                                                var inst_15494 = state_15553[16];
                                                var inst_15508 = state_15553[10];
                                                var inst_15508__$1 = cljs.core.seq.call(null, inst_15494);
                                                var state_15553__$1 = function() {
                                                  var statearr_15577 = state_15553;
                                                  statearr_15577[10] = inst_15508__$1;
                                                  return statearr_15577;
                                                }();
                                                if (inst_15508__$1) {
                                                  var statearr_15578_15624 = state_15553__$1;
                                                  statearr_15578_15624[1] = 13;
                                                } else {
                                                  var statearr_15579_15625 = state_15553__$1;
                                                  statearr_15579_15625[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_15554 === 9) {
                                                  var inst_15530 = state_15553[2];
                                                  var state_15553__$1 = state_15553;
                                                  var statearr_15580_15626 = state_15553__$1;
                                                  statearr_15580_15626[2] = inst_15530;
                                                  statearr_15580_15626[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_15554 === 5) {
                                                    var inst_15491 = cljs.core.deref.call(null, mults);
                                                    var inst_15492 = cljs.core.vals.call(null, inst_15491);
                                                    var inst_15493 = cljs.core.seq.call(null, inst_15492);
                                                    var inst_15494 = inst_15493;
                                                    var inst_15495 = null;
                                                    var inst_15496 = 0;
                                                    var inst_15497 = 0;
                                                    var state_15553__$1 = function() {
                                                      var statearr_15581 = state_15553;
                                                      statearr_15581[12] = inst_15497;
                                                      statearr_15581[14] = inst_15496;
                                                      statearr_15581[15] = inst_15495;
                                                      statearr_15581[16] = inst_15494;
                                                      return statearr_15581;
                                                    }();
                                                    var statearr_15582_15627 = state_15553__$1;
                                                    statearr_15582_15627[2] = null;
                                                    statearr_15582_15627[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_15554 === 14) {
                                                      var state_15553__$1 = state_15553;
                                                      var statearr_15586_15628 = state_15553__$1;
                                                      statearr_15586_15628[2] = null;
                                                      statearr_15586_15628[1] = 15;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_15554 === 16) {
                                                        var inst_15508 = state_15553[10];
                                                        var inst_15512 = cljs.core.chunk_first.call(null, inst_15508);
                                                        var inst_15513 = cljs.core.chunk_rest.call(null, inst_15508);
                                                        var inst_15514 = cljs.core.count.call(null, inst_15512);
                                                        var inst_15494 = inst_15513;
                                                        var inst_15495 = inst_15512;
                                                        var inst_15496 = inst_15514;
                                                        var inst_15497 = 0;
                                                        var state_15553__$1 = function() {
                                                          var statearr_15587 = state_15553;
                                                          statearr_15587[12] = inst_15497;
                                                          statearr_15587[14] = inst_15496;
                                                          statearr_15587[15] = inst_15495;
                                                          statearr_15587[16] = inst_15494;
                                                          return statearr_15587;
                                                        }();
                                                        var statearr_15588_15629 = state_15553__$1;
                                                        statearr_15588_15629[2] = null;
                                                        statearr_15588_15629[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_15554 === 10) {
                                                          var inst_15497 = state_15553[12];
                                                          var inst_15496 = state_15553[14];
                                                          var inst_15495 = state_15553[15];
                                                          var inst_15494 = state_15553[16];
                                                          var inst_15502 = cljs.core._nth.call(null, inst_15495, inst_15497);
                                                          var inst_15503 = cljs.core.async.muxch_STAR_.call(null, inst_15502);
                                                          var inst_15504 = cljs.core.async.close_BANG_.call(null, inst_15503);
                                                          var inst_15505 = inst_15497 + 1;
                                                          var tmp15583 = inst_15496;
                                                          var tmp15584 = inst_15495;
                                                          var tmp15585 = inst_15494;
                                                          var inst_15494__$1 = tmp15585;
                                                          var inst_15495__$1 = tmp15584;
                                                          var inst_15496__$1 = tmp15583;
                                                          var inst_15497__$1 = inst_15505;
                                                          var state_15553__$1 = function() {
                                                            var statearr_15589 = state_15553;
                                                            statearr_15589[12] = inst_15497__$1;
                                                            statearr_15589[14] = inst_15496__$1;
                                                            statearr_15589[15] = inst_15495__$1;
                                                            statearr_15589[17] = inst_15504;
                                                            statearr_15589[16] = inst_15494__$1;
                                                            return statearr_15589;
                                                          }();
                                                          var statearr_15590_15630 = state_15553__$1;
                                                          statearr_15590_15630[2] = null;
                                                          statearr_15590_15630[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_15554 === 18) {
                                                            var inst_15523 = state_15553[2];
                                                            var state_15553__$1 = state_15553;
                                                            var statearr_15591_15631 = state_15553__$1;
                                                            statearr_15591_15631[2] = inst_15523;
                                                            statearr_15591_15631[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_15554 === 8) {
                                                              var inst_15497 = state_15553[12];
                                                              var inst_15496 = state_15553[14];
                                                              var inst_15499 = inst_15497 < inst_15496;
                                                              var inst_15500 = inst_15499;
                                                              var state_15553__$1 = state_15553;
                                                              if (cljs.core.truth_(inst_15500)) {
                                                                var statearr_15592_15632 = state_15553__$1;
                                                                statearr_15592_15632[1] = 10;
                                                              } else {
                                                                var statearr_15593_15633 = state_15553__$1;
                                                                statearr_15593_15633[1] = 11;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              return null;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___15605, mults, ensure_mult, p);
        return function(switch__13594__auto__, c__13706__auto___15605, mults, ensure_mult, p) {
          return function() {
            var cljs$core$async$state_machine__13595__auto__ = null;
            var cljs$core$async$state_machine__13595__auto____0 = function() {
              var statearr_15597 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15597[0] = cljs$core$async$state_machine__13595__auto__;
              statearr_15597[1] = 1;
              return statearr_15597;
            };
            var cljs$core$async$state_machine__13595__auto____1 = function(state_15553) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_15553);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e15598) {
                    if (e15598 instanceof Object) {
                      var ex__13598__auto__ = e15598;
                      var statearr_15599_15634 = state_15553;
                      statearr_15599_15634[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15553);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15598;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15635 = state_15553;
                  state_15553 = G__15635;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__13595__auto__ = function(state_15553) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__13595__auto____1.call(this, state_15553);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__13595__auto____0;
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__13595__auto____1;
            return cljs$core$async$state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___15605, mults, ensure_mult, p);
      }();
      var state__13708__auto__ = function() {
        var statearr_15600 = f__13707__auto__.call(null);
        statearr_15600[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___15605;
        return statearr_15600;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___15605, mults, ensure_mult, p));
  return p;
};
cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
cljs.core.async.sub = function cljs$core$async$sub(var_args) {
  var args15636 = [];
  var len__5726__auto___15639 = arguments.length;
  var i__5727__auto___15640 = 0;
  while (true) {
    if (i__5727__auto___15640 < len__5726__auto___15639) {
      args15636.push(arguments[i__5727__auto___15640]);
      var G__15641 = i__5727__auto___15640 + 1;
      i__5727__auto___15640 = G__15641;
      continue;
    } else {
    }
    break;
  }
  var G__15638 = args15636.length;
  switch(G__15638) {
    case 3:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15636.length)].join(""));;
  }
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = function(p, topic, ch) {
  return cljs.core.async.sub.call(null, p, topic, ch, true);
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = function(p, topic, ch, close_QMARK_) {
  return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
};
cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function cljs$core$async$unsub_all(var_args) {
  var args15643 = [];
  var len__5726__auto___15646 = arguments.length;
  var i__5727__auto___15647 = 0;
  while (true) {
    if (i__5727__auto___15647 < len__5726__auto___15646) {
      args15643.push(arguments[i__5727__auto___15647]);
      var G__15648 = i__5727__auto___15647 + 1;
      i__5727__auto___15647 = G__15648;
      continue;
    } else {
    }
    break;
  }
  var G__15645 = args15643.length;
  switch(G__15645) {
    case 1:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15643.length)].join(""));;
  }
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return cljs.core.async.unsub_all_STAR_.call(null, p);
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = function(p, topic) {
  return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
};
cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
cljs.core.async.map = function cljs$core$async$map(var_args) {
  var args15650 = [];
  var len__5726__auto___15721 = arguments.length;
  var i__5727__auto___15722 = 0;
  while (true) {
    if (i__5727__auto___15722 < len__5726__auto___15721) {
      args15650.push(arguments[i__5727__auto___15722]);
      var G__15723 = i__5727__auto___15722 + 1;
      i__5727__auto___15722 = G__15723;
      continue;
    } else {
    }
    break;
  }
  var G__15652 = args15650.length;
  switch(G__15652) {
    case 2:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15650.length)].join(""));;
  }
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = function(f, chs) {
  return cljs.core.async.map.call(null, f, chs, null);
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = function(f, chs, buf_or_n) {
  var chs__$1 = cljs.core.vec.call(null, chs);
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var cnt = cljs.core.count.call(null, chs__$1);
  var rets = cljs.core.object_array.call(null, cnt);
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
    return function(i) {
      return function(chs__$1, out, cnt, rets, dchan, dctr) {
        return function(ret) {
          rets[i] = ret;
          if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
            return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
          } else {
            return null;
          }
        };
      }(chs__$1, out, cnt, rets, dchan, dctr);
    };
  }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
  var c__13706__auto___15725 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___15725, chs__$1, out, cnt, rets, dchan, dctr, done) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___15725, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function(state_15691) {
            var state_val_15692 = state_15691[1];
            if (state_val_15692 === 7) {
              var state_15691__$1 = state_15691;
              var statearr_15693_15726 = state_15691__$1;
              statearr_15693_15726[2] = null;
              statearr_15693_15726[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15692 === 1) {
                var state_15691__$1 = state_15691;
                var statearr_15694_15727 = state_15691__$1;
                statearr_15694_15727[2] = null;
                statearr_15694_15727[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15692 === 4) {
                  var inst_15655 = state_15691[7];
                  var inst_15657 = inst_15655 < cnt;
                  var state_15691__$1 = state_15691;
                  if (cljs.core.truth_(inst_15657)) {
                    var statearr_15695_15728 = state_15691__$1;
                    statearr_15695_15728[1] = 6;
                  } else {
                    var statearr_15696_15729 = state_15691__$1;
                    statearr_15696_15729[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15692 === 15) {
                    var inst_15687 = state_15691[2];
                    var state_15691__$1 = state_15691;
                    var statearr_15697_15730 = state_15691__$1;
                    statearr_15697_15730[2] = inst_15687;
                    statearr_15697_15730[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15692 === 13) {
                      var inst_15680 = cljs.core.async.close_BANG_.call(null, out);
                      var state_15691__$1 = state_15691;
                      var statearr_15698_15731 = state_15691__$1;
                      statearr_15698_15731[2] = inst_15680;
                      statearr_15698_15731[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15692 === 6) {
                        var state_15691__$1 = state_15691;
                        var statearr_15699_15732 = state_15691__$1;
                        statearr_15699_15732[2] = null;
                        statearr_15699_15732[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15692 === 3) {
                          var inst_15689 = state_15691[2];
                          var state_15691__$1 = state_15691;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15691__$1, inst_15689);
                        } else {
                          if (state_val_15692 === 12) {
                            var inst_15677 = state_15691[8];
                            var inst_15677__$1 = state_15691[2];
                            var inst_15678 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_15677__$1);
                            var state_15691__$1 = function() {
                              var statearr_15700 = state_15691;
                              statearr_15700[8] = inst_15677__$1;
                              return statearr_15700;
                            }();
                            if (cljs.core.truth_(inst_15678)) {
                              var statearr_15701_15733 = state_15691__$1;
                              statearr_15701_15733[1] = 13;
                            } else {
                              var statearr_15702_15734 = state_15691__$1;
                              statearr_15702_15734[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15692 === 2) {
                              var inst_15654 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                              var inst_15655 = 0;
                              var state_15691__$1 = function() {
                                var statearr_15703 = state_15691;
                                statearr_15703[9] = inst_15654;
                                statearr_15703[7] = inst_15655;
                                return statearr_15703;
                              }();
                              var statearr_15704_15735 = state_15691__$1;
                              statearr_15704_15735[2] = null;
                              statearr_15704_15735[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15692 === 11) {
                                var inst_15655 = state_15691[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_15691, 10, Object, null, 9);
                                var inst_15664 = chs__$1.call(null, inst_15655);
                                var inst_15665 = done.call(null, inst_15655);
                                var inst_15666 = cljs.core.async.take_BANG_.call(null, inst_15664, inst_15665);
                                var state_15691__$1 = state_15691;
                                var statearr_15705_15736 = state_15691__$1;
                                statearr_15705_15736[2] = inst_15666;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15691__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15692 === 9) {
                                  var inst_15655 = state_15691[7];
                                  var inst_15668 = state_15691[2];
                                  var inst_15669 = inst_15655 + 1;
                                  var inst_15655__$1 = inst_15669;
                                  var state_15691__$1 = function() {
                                    var statearr_15706 = state_15691;
                                    statearr_15706[7] = inst_15655__$1;
                                    statearr_15706[10] = inst_15668;
                                    return statearr_15706;
                                  }();
                                  var statearr_15707_15737 = state_15691__$1;
                                  statearr_15707_15737[2] = null;
                                  statearr_15707_15737[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15692 === 5) {
                                    var inst_15675 = state_15691[2];
                                    var state_15691__$1 = function() {
                                      var statearr_15708 = state_15691;
                                      statearr_15708[11] = inst_15675;
                                      return statearr_15708;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15691__$1, 12, dchan);
                                  } else {
                                    if (state_val_15692 === 14) {
                                      var inst_15677 = state_15691[8];
                                      var inst_15682 = cljs.core.apply.call(null, f, inst_15677);
                                      var state_15691__$1 = state_15691;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15691__$1, 16, out, inst_15682);
                                    } else {
                                      if (state_val_15692 === 16) {
                                        var inst_15684 = state_15691[2];
                                        var state_15691__$1 = function() {
                                          var statearr_15709 = state_15691;
                                          statearr_15709[12] = inst_15684;
                                          return statearr_15709;
                                        }();
                                        var statearr_15710_15738 = state_15691__$1;
                                        statearr_15710_15738[2] = null;
                                        statearr_15710_15738[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15692 === 10) {
                                          var inst_15659 = state_15691[2];
                                          var inst_15660 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var state_15691__$1 = function() {
                                            var statearr_15711 = state_15691;
                                            statearr_15711[13] = inst_15659;
                                            return statearr_15711;
                                          }();
                                          var statearr_15712_15739 = state_15691__$1;
                                          statearr_15712_15739[2] = inst_15660;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15691__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_15692 === 8) {
                                            var inst_15673 = state_15691[2];
                                            var state_15691__$1 = state_15691;
                                            var statearr_15713_15740 = state_15691__$1;
                                            statearr_15713_15740[2] = inst_15673;
                                            statearr_15713_15740[1] = 5;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___15725, chs__$1, out, cnt, rets, dchan, dctr, done);
        return function(switch__13594__auto__, c__13706__auto___15725, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function() {
            var cljs$core$async$state_machine__13595__auto__ = null;
            var cljs$core$async$state_machine__13595__auto____0 = function() {
              var statearr_15717 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15717[0] = cljs$core$async$state_machine__13595__auto__;
              statearr_15717[1] = 1;
              return statearr_15717;
            };
            var cljs$core$async$state_machine__13595__auto____1 = function(state_15691) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_15691);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e15718) {
                    if (e15718 instanceof Object) {
                      var ex__13598__auto__ = e15718;
                      var statearr_15719_15741 = state_15691;
                      statearr_15719_15741[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15691);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15718;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15742 = state_15691;
                  state_15691 = G__15742;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__13595__auto__ = function(state_15691) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__13595__auto____1.call(this, state_15691);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__13595__auto____0;
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__13595__auto____1;
            return cljs$core$async$state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___15725, chs__$1, out, cnt, rets, dchan, dctr, done);
      }();
      var state__13708__auto__ = function() {
        var statearr_15720 = f__13707__auto__.call(null);
        statearr_15720[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___15725;
        return statearr_15720;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___15725, chs__$1, out, cnt, rets, dchan, dctr, done));
  return out;
};
cljs.core.async.map.cljs$lang$maxFixedArity = 3;
cljs.core.async.merge = function cljs$core$async$merge(var_args) {
  var args15744 = [];
  var len__5726__auto___15800 = arguments.length;
  var i__5727__auto___15801 = 0;
  while (true) {
    if (i__5727__auto___15801 < len__5726__auto___15800) {
      args15744.push(arguments[i__5727__auto___15801]);
      var G__15802 = i__5727__auto___15801 + 1;
      i__5727__auto___15801 = G__15802;
      continue;
    } else {
    }
    break;
  }
  var G__15746 = args15744.length;
  switch(G__15746) {
    case 1:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15744.length)].join(""));;
  }
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = function(chs) {
  return cljs.core.async.merge.call(null, chs, null);
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = function(chs, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__13706__auto___15804 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___15804, out) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___15804, out) {
          return function(state_15776) {
            var state_val_15777 = state_15776[1];
            if (state_val_15777 === 7) {
              var inst_15756 = state_15776[7];
              var inst_15755 = state_15776[8];
              var inst_15755__$1 = state_15776[2];
              var inst_15756__$1 = cljs.core.nth.call(null, inst_15755__$1, 0, null);
              var inst_15757 = cljs.core.nth.call(null, inst_15755__$1, 1, null);
              var inst_15758 = inst_15756__$1 == null;
              var state_15776__$1 = function() {
                var statearr_15778 = state_15776;
                statearr_15778[7] = inst_15756__$1;
                statearr_15778[9] = inst_15757;
                statearr_15778[8] = inst_15755__$1;
                return statearr_15778;
              }();
              if (cljs.core.truth_(inst_15758)) {
                var statearr_15779_15805 = state_15776__$1;
                statearr_15779_15805[1] = 8;
              } else {
                var statearr_15780_15806 = state_15776__$1;
                statearr_15780_15806[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15777 === 1) {
                var inst_15747 = cljs.core.vec.call(null, chs);
                var inst_15748 = inst_15747;
                var state_15776__$1 = function() {
                  var statearr_15781 = state_15776;
                  statearr_15781[10] = inst_15748;
                  return statearr_15781;
                }();
                var statearr_15782_15807 = state_15776__$1;
                statearr_15782_15807[2] = null;
                statearr_15782_15807[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15777 === 4) {
                  var inst_15748 = state_15776[10];
                  var state_15776__$1 = state_15776;
                  return cljs.core.async.ioc_alts_BANG_.call(null, state_15776__$1, 7, inst_15748);
                } else {
                  if (state_val_15777 === 6) {
                    var inst_15772 = state_15776[2];
                    var state_15776__$1 = state_15776;
                    var statearr_15783_15808 = state_15776__$1;
                    statearr_15783_15808[2] = inst_15772;
                    statearr_15783_15808[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15777 === 3) {
                      var inst_15774 = state_15776[2];
                      var state_15776__$1 = state_15776;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15776__$1, inst_15774);
                    } else {
                      if (state_val_15777 === 2) {
                        var inst_15748 = state_15776[10];
                        var inst_15750 = cljs.core.count.call(null, inst_15748);
                        var inst_15751 = inst_15750 > 0;
                        var state_15776__$1 = state_15776;
                        if (cljs.core.truth_(inst_15751)) {
                          var statearr_15785_15809 = state_15776__$1;
                          statearr_15785_15809[1] = 4;
                        } else {
                          var statearr_15786_15810 = state_15776__$1;
                          statearr_15786_15810[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15777 === 11) {
                          var inst_15748 = state_15776[10];
                          var inst_15765 = state_15776[2];
                          var tmp15784 = inst_15748;
                          var inst_15748__$1 = tmp15784;
                          var state_15776__$1 = function() {
                            var statearr_15787 = state_15776;
                            statearr_15787[10] = inst_15748__$1;
                            statearr_15787[11] = inst_15765;
                            return statearr_15787;
                          }();
                          var statearr_15788_15811 = state_15776__$1;
                          statearr_15788_15811[2] = null;
                          statearr_15788_15811[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15777 === 9) {
                            var inst_15756 = state_15776[7];
                            var state_15776__$1 = state_15776;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15776__$1, 11, out, inst_15756);
                          } else {
                            if (state_val_15777 === 5) {
                              var inst_15770 = cljs.core.async.close_BANG_.call(null, out);
                              var state_15776__$1 = state_15776;
                              var statearr_15789_15812 = state_15776__$1;
                              statearr_15789_15812[2] = inst_15770;
                              statearr_15789_15812[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15777 === 10) {
                                var inst_15768 = state_15776[2];
                                var state_15776__$1 = state_15776;
                                var statearr_15790_15813 = state_15776__$1;
                                statearr_15790_15813[2] = inst_15768;
                                statearr_15790_15813[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15777 === 8) {
                                  var inst_15748 = state_15776[10];
                                  var inst_15756 = state_15776[7];
                                  var inst_15757 = state_15776[9];
                                  var inst_15755 = state_15776[8];
                                  var inst_15760 = function() {
                                    var cs = inst_15748;
                                    var vec__15753 = inst_15755;
                                    var v = inst_15756;
                                    var c = inst_15757;
                                    return function(cs, vec__15753, v, c, inst_15748, inst_15756, inst_15757, inst_15755, state_val_15777, c__13706__auto___15804, out) {
                                      return function(p1__15743_SHARP_) {
                                        return cljs.core.not_EQ_.call(null, c, p1__15743_SHARP_);
                                      };
                                    }(cs, vec__15753, v, c, inst_15748, inst_15756, inst_15757, inst_15755, state_val_15777, c__13706__auto___15804, out);
                                  }();
                                  var inst_15761 = cljs.core.filterv.call(null, inst_15760, inst_15748);
                                  var inst_15748__$1 = inst_15761;
                                  var state_15776__$1 = function() {
                                    var statearr_15791 = state_15776;
                                    statearr_15791[10] = inst_15748__$1;
                                    return statearr_15791;
                                  }();
                                  var statearr_15792_15814 = state_15776__$1;
                                  statearr_15792_15814[2] = null;
                                  statearr_15792_15814[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___15804, out);
        return function(switch__13594__auto__, c__13706__auto___15804, out) {
          return function() {
            var cljs$core$async$state_machine__13595__auto__ = null;
            var cljs$core$async$state_machine__13595__auto____0 = function() {
              var statearr_15796 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15796[0] = cljs$core$async$state_machine__13595__auto__;
              statearr_15796[1] = 1;
              return statearr_15796;
            };
            var cljs$core$async$state_machine__13595__auto____1 = function(state_15776) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_15776);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e15797) {
                    if (e15797 instanceof Object) {
                      var ex__13598__auto__ = e15797;
                      var statearr_15798_15815 = state_15776;
                      statearr_15798_15815[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15776);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15797;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15816 = state_15776;
                  state_15776 = G__15816;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__13595__auto__ = function(state_15776) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__13595__auto____1.call(this, state_15776);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__13595__auto____0;
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__13595__auto____1;
            return cljs$core$async$state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___15804, out);
      }();
      var state__13708__auto__ = function() {
        var statearr_15799 = f__13707__auto__.call(null);
        statearr_15799[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___15804;
        return statearr_15799;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___15804, out));
  return out;
};
cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function cljs$core$async$take(var_args) {
  var args15817 = [];
  var len__5726__auto___15866 = arguments.length;
  var i__5727__auto___15867 = 0;
  while (true) {
    if (i__5727__auto___15867 < len__5726__auto___15866) {
      args15817.push(arguments[i__5727__auto___15867]);
      var G__15868 = i__5727__auto___15867 + 1;
      i__5727__auto___15867 = G__15868;
      continue;
    } else {
    }
    break;
  }
  var G__15819 = args15817.length;
  switch(G__15819) {
    case 2:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15817.length)].join(""));;
  }
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.take.call(null, n, ch, null);
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__13706__auto___15870 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___15870, out) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___15870, out) {
          return function(state_15843) {
            var state_val_15844 = state_15843[1];
            if (state_val_15844 === 7) {
              var inst_15825 = state_15843[7];
              var inst_15825__$1 = state_15843[2];
              var inst_15826 = inst_15825__$1 == null;
              var inst_15827 = cljs.core.not.call(null, inst_15826);
              var state_15843__$1 = function() {
                var statearr_15845 = state_15843;
                statearr_15845[7] = inst_15825__$1;
                return statearr_15845;
              }();
              if (inst_15827) {
                var statearr_15846_15871 = state_15843__$1;
                statearr_15846_15871[1] = 8;
              } else {
                var statearr_15847_15872 = state_15843__$1;
                statearr_15847_15872[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15844 === 1) {
                var inst_15820 = 0;
                var state_15843__$1 = function() {
                  var statearr_15848 = state_15843;
                  statearr_15848[8] = inst_15820;
                  return statearr_15848;
                }();
                var statearr_15849_15873 = state_15843__$1;
                statearr_15849_15873[2] = null;
                statearr_15849_15873[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15844 === 4) {
                  var state_15843__$1 = state_15843;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15843__$1, 7, ch);
                } else {
                  if (state_val_15844 === 6) {
                    var inst_15838 = state_15843[2];
                    var state_15843__$1 = state_15843;
                    var statearr_15850_15874 = state_15843__$1;
                    statearr_15850_15874[2] = inst_15838;
                    statearr_15850_15874[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15844 === 3) {
                      var inst_15840 = state_15843[2];
                      var inst_15841 = cljs.core.async.close_BANG_.call(null, out);
                      var state_15843__$1 = function() {
                        var statearr_15851 = state_15843;
                        statearr_15851[9] = inst_15840;
                        return statearr_15851;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15843__$1, inst_15841);
                    } else {
                      if (state_val_15844 === 2) {
                        var inst_15820 = state_15843[8];
                        var inst_15822 = inst_15820 < n;
                        var state_15843__$1 = state_15843;
                        if (cljs.core.truth_(inst_15822)) {
                          var statearr_15852_15875 = state_15843__$1;
                          statearr_15852_15875[1] = 4;
                        } else {
                          var statearr_15853_15876 = state_15843__$1;
                          statearr_15853_15876[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15844 === 11) {
                          var inst_15820 = state_15843[8];
                          var inst_15830 = state_15843[2];
                          var inst_15831 = inst_15820 + 1;
                          var inst_15820__$1 = inst_15831;
                          var state_15843__$1 = function() {
                            var statearr_15854 = state_15843;
                            statearr_15854[10] = inst_15830;
                            statearr_15854[8] = inst_15820__$1;
                            return statearr_15854;
                          }();
                          var statearr_15855_15877 = state_15843__$1;
                          statearr_15855_15877[2] = null;
                          statearr_15855_15877[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15844 === 9) {
                            var state_15843__$1 = state_15843;
                            var statearr_15856_15878 = state_15843__$1;
                            statearr_15856_15878[2] = null;
                            statearr_15856_15878[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15844 === 5) {
                              var state_15843__$1 = state_15843;
                              var statearr_15857_15879 = state_15843__$1;
                              statearr_15857_15879[2] = null;
                              statearr_15857_15879[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15844 === 10) {
                                var inst_15835 = state_15843[2];
                                var state_15843__$1 = state_15843;
                                var statearr_15858_15880 = state_15843__$1;
                                statearr_15858_15880[2] = inst_15835;
                                statearr_15858_15880[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15844 === 8) {
                                  var inst_15825 = state_15843[7];
                                  var state_15843__$1 = state_15843;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15843__$1, 11, out, inst_15825);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___15870, out);
        return function(switch__13594__auto__, c__13706__auto___15870, out) {
          return function() {
            var cljs$core$async$state_machine__13595__auto__ = null;
            var cljs$core$async$state_machine__13595__auto____0 = function() {
              var statearr_15862 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_15862[0] = cljs$core$async$state_machine__13595__auto__;
              statearr_15862[1] = 1;
              return statearr_15862;
            };
            var cljs$core$async$state_machine__13595__auto____1 = function(state_15843) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_15843);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e15863) {
                    if (e15863 instanceof Object) {
                      var ex__13598__auto__ = e15863;
                      var statearr_15864_15881 = state_15843;
                      statearr_15864_15881[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15843);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15863;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15882 = state_15843;
                  state_15843 = G__15882;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__13595__auto__ = function(state_15843) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__13595__auto____1.call(this, state_15843);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__13595__auto____0;
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__13595__auto____1;
            return cljs$core$async$state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___15870, out);
      }();
      var state__13708__auto__ = function() {
        var statearr_15865 = f__13707__auto__.call(null);
        statearr_15865[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___15870;
        return statearr_15865;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___15870, out));
  return out;
};
cljs.core.async.take.cljs$lang$maxFixedArity = 3;
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t_cljs$core$async15890 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async15890 = function(map_LT_, f, ch, meta15891) {
      this.map_LT_ = map_LT_;
      this.f = f;
      this.ch = ch;
      this.meta15891 = meta15891;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async15890.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15892, meta15891__$1) {
      var self__ = this;
      var _15892__$1 = this;
      return new cljs.core.async.t_cljs$core$async15890(self__.map_LT_, self__.f, self__.ch, meta15891__$1);
    };
    cljs.core.async.t_cljs$core$async15890.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15892) {
      var self__ = this;
      var _15892__$1 = this;
      return self__.meta15891;
    };
    cljs.core.async.t_cljs$core$async15890.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t_cljs$core$async15890.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async15890.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async15890.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t_cljs$core$async15890.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t_cljs$core$async15893 !== "undefined") {
        } else {
          cljs.core.async.t_cljs$core$async15893 = function(map_LT_, f, ch, meta15891, _, fn1, meta15894) {
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta15891 = meta15891;
            this._ = _;
            this.fn1 = fn1;
            this.meta15894 = meta15894;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
            this.cljs$lang$protocol_mask$partition1$ = 0;
          };
          cljs.core.async.t_cljs$core$async15893.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_15895, meta15894__$1) {
              var self__ = this;
              var _15895__$1 = this;
              return new cljs.core.async.t_cljs$core$async15893(self__.map_LT_, self__.f, self__.ch, self__.meta15891, self__._, self__.fn1, meta15894__$1);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async15893.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_15895) {
              var self__ = this;
              var _15895__$1 = this;
              return self__.meta15894;
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async15893.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t_cljs$core$async15893.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async15893.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return true;
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async15893.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__15883_SHARP_) {
                  return f1.call(null, p1__15883_SHARP_ == null ? null : self__.f.call(null, p1__15883_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async15893.getBasis = function(___$1) {
            return function() {
              return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "map\x3c", "map\x3c", -1235808357, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, 
              "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Deprecated - this function will be removed. Use transducer instead"], null)), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta15891", "meta15891", 1427967945, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_", "_", -1201019570, null), 
              new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core.async", "t_cljs$core$async15890", "cljs.core.async/t_cljs$core$async15890", -1821923727, null)], null)), new cljs.core.Symbol(null, "fn1", "fn1", 895834444, null), new cljs.core.Symbol(null, "meta15894", "meta15894", 1461922279, null)], null);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async15893.cljs$lang$type = true;
          cljs.core.async.t_cljs$core$async15893.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async15893";
          cljs.core.async.t_cljs$core$async15893.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
              return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async/t_cljs$core$async15893");
            };
          }(___$1);
          cljs.core.async.__GT_t_cljs$core$async15893 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t_cljs$core$async15893(map_LT___$1, f__$1, ch__$1, meta15891__$1, ___$2, fn1__$1, meta15894) {
              return new cljs.core.async.t_cljs$core$async15893(map_LT___$1, f__$1, ch__$1, meta15891__$1, ___$2, fn1__$1, meta15894);
            };
          }(___$1);
        }
        return new cljs.core.async.t_cljs$core$async15893(self__.map_LT_, self__.f, self__.ch, self__.meta15891, ___$1, fn1, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4656__auto__ = ret;
        if (cljs.core.truth_(and__4656__auto__)) {
          return !(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4656__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t_cljs$core$async15890.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t_cljs$core$async15890.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t_cljs$core$async15890.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "map\x3c", "map\x3c", -1235808357, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", 
      "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Deprecated - this function will be removed. Use transducer instead"], null)), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta15891", "meta15891", 1427967945, null)], null);
    };
    cljs.core.async.t_cljs$core$async15890.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async15890.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async15890";
    cljs.core.async.t_cljs$core$async15890.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
      return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async/t_cljs$core$async15890");
    };
    cljs.core.async.__GT_t_cljs$core$async15890 = function cljs$core$async$map_LT__$___GT_t_cljs$core$async15890(map_LT___$1, f__$1, ch__$1, meta15891) {
      return new cljs.core.async.t_cljs$core$async15890(map_LT___$1, f__$1, ch__$1, meta15891);
    };
  }
  return new cljs.core.async.t_cljs$core$async15890(cljs$core$async$map_LT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t_cljs$core$async15899 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async15899 = function(map_GT_, f, ch, meta15900) {
      this.map_GT_ = map_GT_;
      this.f = f;
      this.ch = ch;
      this.meta15900 = meta15900;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async15899.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15901, meta15900__$1) {
      var self__ = this;
      var _15901__$1 = this;
      return new cljs.core.async.t_cljs$core$async15899(self__.map_GT_, self__.f, self__.ch, meta15900__$1);
    };
    cljs.core.async.t_cljs$core$async15899.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15901) {
      var self__ = this;
      var _15901__$1 = this;
      return self__.meta15900;
    };
    cljs.core.async.t_cljs$core$async15899.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t_cljs$core$async15899.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async15899.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t_cljs$core$async15899.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t_cljs$core$async15899.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t_cljs$core$async15899.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t_cljs$core$async15899.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "map\x3e", "map\x3e", 1676369295, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", 
      "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Deprecated - this function will be removed. Use transducer instead"], null)), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta15900", "meta15900", -231304646, null)], null);
    };
    cljs.core.async.t_cljs$core$async15899.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async15899.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async15899";
    cljs.core.async.t_cljs$core$async15899.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
      return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async/t_cljs$core$async15899");
    };
    cljs.core.async.__GT_t_cljs$core$async15899 = function cljs$core$async$map_GT__$___GT_t_cljs$core$async15899(map_GT___$1, f__$1, ch__$1, meta15900) {
      return new cljs.core.async.t_cljs$core$async15899(map_GT___$1, f__$1, ch__$1, meta15900);
    };
  }
  return new cljs.core.async.t_cljs$core$async15899(cljs$core$async$map_GT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t_cljs$core$async15905 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async15905 = function(filter_GT_, p, ch, meta15906) {
      this.filter_GT_ = filter_GT_;
      this.p = p;
      this.ch = ch;
      this.meta15906 = meta15906;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async15905.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15907, meta15906__$1) {
      var self__ = this;
      var _15907__$1 = this;
      return new cljs.core.async.t_cljs$core$async15905(self__.filter_GT_, self__.p, self__.ch, meta15906__$1);
    };
    cljs.core.async.t_cljs$core$async15905.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15907) {
      var self__ = this;
      var _15907__$1 = this;
      return self__.meta15906;
    };
    cljs.core.async.t_cljs$core$async15905.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t_cljs$core$async15905.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async15905.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async15905.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t_cljs$core$async15905.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t_cljs$core$async15905.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t_cljs$core$async15905.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t_cljs$core$async15905.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "filter\x3e", "filter\x3e", -37644455, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, 
      "p", "p", 1791580836, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Deprecated - this function will be removed. Use transducer instead"], null)), new cljs.core.Symbol(null, "p", "p", 1791580836, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta15906", "meta15906", -1239992069, null)], null);
    };
    cljs.core.async.t_cljs$core$async15905.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async15905.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async15905";
    cljs.core.async.t_cljs$core$async15905.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
      return cljs.core._write.call(null, writer__5267__auto__, "cljs.core.async/t_cljs$core$async15905");
    };
    cljs.core.async.__GT_t_cljs$core$async15905 = function cljs$core$async$filter_GT__$___GT_t_cljs$core$async15905(filter_GT___$1, p__$1, ch__$1, meta15906) {
      return new cljs.core.async.t_cljs$core$async15905(filter_GT___$1, p__$1, ch__$1, meta15906);
    };
  }
  return new cljs.core.async.t_cljs$core$async15905(cljs$core$async$filter_GT_, p, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function cljs$core$async$filter_LT_(var_args) {
  var args15908 = [];
  var len__5726__auto___15952 = arguments.length;
  var i__5727__auto___15953 = 0;
  while (true) {
    if (i__5727__auto___15953 < len__5726__auto___15952) {
      args15908.push(arguments[i__5727__auto___15953]);
      var G__15954 = i__5727__auto___15953 + 1;
      i__5727__auto___15953 = G__15954;
      continue;
    } else {
    }
    break;
  }
  var G__15910 = args15908.length;
  switch(G__15910) {
    case 2:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15908.length)].join(""));;
  }
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.filter_LT_.call(null, p, ch, null);
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__13706__auto___15956 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___15956, out) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___15956, out) {
          return function(state_15931) {
            var state_val_15932 = state_15931[1];
            if (state_val_15932 === 7) {
              var inst_15927 = state_15931[2];
              var state_15931__$1 = state_15931;
              var statearr_15933_15957 = state_15931__$1;
              statearr_15933_15957[2] = inst_15927;
              statearr_15933_15957[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15932 === 1) {
                var state_15931__$1 = state_15931;
                var statearr_15934_15958 = state_15931__$1;
                statearr_15934_15958[2] = null;
                statearr_15934_15958[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15932 === 4) {
                  var inst_15913 = state_15931[7];
                  var inst_15913__$1 = state_15931[2];
                  var inst_15914 = inst_15913__$1 == null;
                  var state_15931__$1 = function() {
                    var statearr_15935 = state_15931;
                    statearr_15935[7] = inst_15913__$1;
                    return statearr_15935;
                  }();
                  if (cljs.core.truth_(inst_15914)) {
                    var statearr_15936_15959 = state_15931__$1;
                    statearr_15936_15959[1] = 5;
                  } else {
                    var statearr_15937_15960 = state_15931__$1;
                    statearr_15937_15960[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15932 === 6) {
                    var inst_15913 = state_15931[7];
                    var inst_15918 = p.call(null, inst_15913);
                    var state_15931__$1 = state_15931;
                    if (cljs.core.truth_(inst_15918)) {
                      var statearr_15938_15961 = state_15931__$1;
                      statearr_15938_15961[1] = 8;
                    } else {
                      var statearr_15939_15962 = state_15931__$1;
                      statearr_15939_15962[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15932 === 3) {
                      var inst_15929 = state_15931[2];
                      var state_15931__$1 = state_15931;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15931__$1, inst_15929);
                    } else {
                      if (state_val_15932 === 2) {
                        var state_15931__$1 = state_15931;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15931__$1, 4, ch);
                      } else {
                        if (state_val_15932 === 11) {
                          var inst_15921 = state_15931[2];
                          var state_15931__$1 = state_15931;
                          var statearr_15940_15963 = state_15931__$1;
                          statearr_15940_15963[2] = inst_15921;
                          statearr_15940_15963[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15932 === 9) {
                            var state_15931__$1 = state_15931;
                            var statearr_15941_15964 = state_15931__$1;
                            statearr_15941_15964[2] = null;
                            statearr_15941_15964[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15932 === 5) {
                              var inst_15916 = cljs.core.async.close_BANG_.call(null, out);
                              var state_15931__$1 = state_15931;
                              var statearr_15942_15965 = state_15931__$1;
                              statearr_15942_15965[2] = inst_15916;
                              statearr_15942_15965[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15932 === 10) {
                                var inst_15924 = state_15931[2];
                                var state_15931__$1 = function() {
                                  var statearr_15943 = state_15931;
                                  statearr_15943[8] = inst_15924;
                                  return statearr_15943;
                                }();
                                var statearr_15944_15966 = state_15931__$1;
                                statearr_15944_15966[2] = null;
                                statearr_15944_15966[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15932 === 8) {
                                  var inst_15913 = state_15931[7];
                                  var state_15931__$1 = state_15931;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15931__$1, 11, out, inst_15913);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___15956, out);
        return function(switch__13594__auto__, c__13706__auto___15956, out) {
          return function() {
            var cljs$core$async$state_machine__13595__auto__ = null;
            var cljs$core$async$state_machine__13595__auto____0 = function() {
              var statearr_15948 = [null, null, null, null, null, null, null, null, null];
              statearr_15948[0] = cljs$core$async$state_machine__13595__auto__;
              statearr_15948[1] = 1;
              return statearr_15948;
            };
            var cljs$core$async$state_machine__13595__auto____1 = function(state_15931) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_15931);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e15949) {
                    if (e15949 instanceof Object) {
                      var ex__13598__auto__ = e15949;
                      var statearr_15950_15967 = state_15931;
                      statearr_15950_15967[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15931);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15949;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15968 = state_15931;
                  state_15931 = G__15968;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__13595__auto__ = function(state_15931) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__13595__auto____1.call(this, state_15931);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__13595__auto____0;
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__13595__auto____1;
            return cljs$core$async$state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___15956, out);
      }();
      var state__13708__auto__ = function() {
        var statearr_15951 = f__13707__auto__.call(null);
        statearr_15951[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___15956;
        return statearr_15951;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___15956, out));
  return out;
};
cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.remove_LT_ = function cljs$core$async$remove_LT_(var_args) {
  var args15969 = [];
  var len__5726__auto___15972 = arguments.length;
  var i__5727__auto___15973 = 0;
  while (true) {
    if (i__5727__auto___15973 < len__5726__auto___15972) {
      args15969.push(arguments[i__5727__auto___15973]);
      var G__15974 = i__5727__auto___15973 + 1;
      i__5727__auto___15973 = G__15974;
      continue;
    } else {
    }
    break;
  }
  var G__15971 = args15969.length;
  switch(G__15971) {
    case 2:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15969.length)].join(""));;
  }
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.remove_LT_.call(null, p, ch, null);
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
};
cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__13706__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto__) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto__) {
          return function(state_16141) {
            var state_val_16142 = state_16141[1];
            if (state_val_16142 === 7) {
              var inst_16137 = state_16141[2];
              var state_16141__$1 = state_16141;
              var statearr_16143_16184 = state_16141__$1;
              statearr_16143_16184[2] = inst_16137;
              statearr_16143_16184[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16142 === 20) {
                var inst_16107 = state_16141[7];
                var inst_16118 = state_16141[2];
                var inst_16119 = cljs.core.next.call(null, inst_16107);
                var inst_16093 = inst_16119;
                var inst_16094 = null;
                var inst_16095 = 0;
                var inst_16096 = 0;
                var state_16141__$1 = function() {
                  var statearr_16144 = state_16141;
                  statearr_16144[8] = inst_16093;
                  statearr_16144[9] = inst_16095;
                  statearr_16144[10] = inst_16118;
                  statearr_16144[11] = inst_16094;
                  statearr_16144[12] = inst_16096;
                  return statearr_16144;
                }();
                var statearr_16145_16185 = state_16141__$1;
                statearr_16145_16185[2] = null;
                statearr_16145_16185[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16142 === 1) {
                  var state_16141__$1 = state_16141;
                  var statearr_16146_16186 = state_16141__$1;
                  statearr_16146_16186[2] = null;
                  statearr_16146_16186[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16142 === 4) {
                    var inst_16082 = state_16141[13];
                    var inst_16082__$1 = state_16141[2];
                    var inst_16083 = inst_16082__$1 == null;
                    var state_16141__$1 = function() {
                      var statearr_16147 = state_16141;
                      statearr_16147[13] = inst_16082__$1;
                      return statearr_16147;
                    }();
                    if (cljs.core.truth_(inst_16083)) {
                      var statearr_16148_16187 = state_16141__$1;
                      statearr_16148_16187[1] = 5;
                    } else {
                      var statearr_16149_16188 = state_16141__$1;
                      statearr_16149_16188[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16142 === 15) {
                      var state_16141__$1 = state_16141;
                      var statearr_16153_16189 = state_16141__$1;
                      statearr_16153_16189[2] = null;
                      statearr_16153_16189[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16142 === 21) {
                        var state_16141__$1 = state_16141;
                        var statearr_16154_16190 = state_16141__$1;
                        statearr_16154_16190[2] = null;
                        statearr_16154_16190[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16142 === 13) {
                          var inst_16093 = state_16141[8];
                          var inst_16095 = state_16141[9];
                          var inst_16094 = state_16141[11];
                          var inst_16096 = state_16141[12];
                          var inst_16103 = state_16141[2];
                          var inst_16104 = inst_16096 + 1;
                          var tmp16150 = inst_16093;
                          var tmp16151 = inst_16095;
                          var tmp16152 = inst_16094;
                          var inst_16093__$1 = tmp16150;
                          var inst_16094__$1 = tmp16152;
                          var inst_16095__$1 = tmp16151;
                          var inst_16096__$1 = inst_16104;
                          var state_16141__$1 = function() {
                            var statearr_16155 = state_16141;
                            statearr_16155[8] = inst_16093__$1;
                            statearr_16155[14] = inst_16103;
                            statearr_16155[9] = inst_16095__$1;
                            statearr_16155[11] = inst_16094__$1;
                            statearr_16155[12] = inst_16096__$1;
                            return statearr_16155;
                          }();
                          var statearr_16156_16191 = state_16141__$1;
                          statearr_16156_16191[2] = null;
                          statearr_16156_16191[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16142 === 22) {
                            var state_16141__$1 = state_16141;
                            var statearr_16157_16192 = state_16141__$1;
                            statearr_16157_16192[2] = null;
                            statearr_16157_16192[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_16142 === 6) {
                              var inst_16082 = state_16141[13];
                              var inst_16091 = f.call(null, inst_16082);
                              var inst_16092 = cljs.core.seq.call(null, inst_16091);
                              var inst_16093 = inst_16092;
                              var inst_16094 = null;
                              var inst_16095 = 0;
                              var inst_16096 = 0;
                              var state_16141__$1 = function() {
                                var statearr_16158 = state_16141;
                                statearr_16158[8] = inst_16093;
                                statearr_16158[9] = inst_16095;
                                statearr_16158[11] = inst_16094;
                                statearr_16158[12] = inst_16096;
                                return statearr_16158;
                              }();
                              var statearr_16159_16193 = state_16141__$1;
                              statearr_16159_16193[2] = null;
                              statearr_16159_16193[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16142 === 17) {
                                var inst_16107 = state_16141[7];
                                var inst_16111 = cljs.core.chunk_first.call(null, inst_16107);
                                var inst_16112 = cljs.core.chunk_rest.call(null, inst_16107);
                                var inst_16113 = cljs.core.count.call(null, inst_16111);
                                var inst_16093 = inst_16112;
                                var inst_16094 = inst_16111;
                                var inst_16095 = inst_16113;
                                var inst_16096 = 0;
                                var state_16141__$1 = function() {
                                  var statearr_16160 = state_16141;
                                  statearr_16160[8] = inst_16093;
                                  statearr_16160[9] = inst_16095;
                                  statearr_16160[11] = inst_16094;
                                  statearr_16160[12] = inst_16096;
                                  return statearr_16160;
                                }();
                                var statearr_16161_16194 = state_16141__$1;
                                statearr_16161_16194[2] = null;
                                statearr_16161_16194[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16142 === 3) {
                                  var inst_16139 = state_16141[2];
                                  var state_16141__$1 = state_16141;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16141__$1, inst_16139);
                                } else {
                                  if (state_val_16142 === 12) {
                                    var inst_16127 = state_16141[2];
                                    var state_16141__$1 = state_16141;
                                    var statearr_16162_16195 = state_16141__$1;
                                    statearr_16162_16195[2] = inst_16127;
                                    statearr_16162_16195[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16142 === 2) {
                                      var state_16141__$1 = state_16141;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16141__$1, 4, in$);
                                    } else {
                                      if (state_val_16142 === 23) {
                                        var inst_16135 = state_16141[2];
                                        var state_16141__$1 = state_16141;
                                        var statearr_16163_16196 = state_16141__$1;
                                        statearr_16163_16196[2] = inst_16135;
                                        statearr_16163_16196[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_16142 === 19) {
                                          var inst_16122 = state_16141[2];
                                          var state_16141__$1 = state_16141;
                                          var statearr_16164_16197 = state_16141__$1;
                                          statearr_16164_16197[2] = inst_16122;
                                          statearr_16164_16197[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_16142 === 11) {
                                            var inst_16093 = state_16141[8];
                                            var inst_16107 = state_16141[7];
                                            var inst_16107__$1 = cljs.core.seq.call(null, inst_16093);
                                            var state_16141__$1 = function() {
                                              var statearr_16165 = state_16141;
                                              statearr_16165[7] = inst_16107__$1;
                                              return statearr_16165;
                                            }();
                                            if (inst_16107__$1) {
                                              var statearr_16166_16198 = state_16141__$1;
                                              statearr_16166_16198[1] = 14;
                                            } else {
                                              var statearr_16167_16199 = state_16141__$1;
                                              statearr_16167_16199[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_16142 === 9) {
                                              var inst_16129 = state_16141[2];
                                              var inst_16130 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_16141__$1 = function() {
                                                var statearr_16168 = state_16141;
                                                statearr_16168[15] = inst_16129;
                                                return statearr_16168;
                                              }();
                                              if (cljs.core.truth_(inst_16130)) {
                                                var statearr_16169_16200 = state_16141__$1;
                                                statearr_16169_16200[1] = 21;
                                              } else {
                                                var statearr_16170_16201 = state_16141__$1;
                                                statearr_16170_16201[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_16142 === 5) {
                                                var inst_16085 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_16141__$1 = state_16141;
                                                var statearr_16171_16202 = state_16141__$1;
                                                statearr_16171_16202[2] = inst_16085;
                                                statearr_16171_16202[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_16142 === 14) {
                                                  var inst_16107 = state_16141[7];
                                                  var inst_16109 = cljs.core.chunked_seq_QMARK_.call(null, inst_16107);
                                                  var state_16141__$1 = state_16141;
                                                  if (inst_16109) {
                                                    var statearr_16172_16203 = state_16141__$1;
                                                    statearr_16172_16203[1] = 17;
                                                  } else {
                                                    var statearr_16173_16204 = state_16141__$1;
                                                    statearr_16173_16204[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_16142 === 16) {
                                                    var inst_16125 = state_16141[2];
                                                    var state_16141__$1 = state_16141;
                                                    var statearr_16174_16205 = state_16141__$1;
                                                    statearr_16174_16205[2] = inst_16125;
                                                    statearr_16174_16205[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_16142 === 10) {
                                                      var inst_16094 = state_16141[11];
                                                      var inst_16096 = state_16141[12];
                                                      var inst_16101 = cljs.core._nth.call(null, inst_16094, inst_16096);
                                                      var state_16141__$1 = state_16141;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16141__$1, 13, out, inst_16101);
                                                    } else {
                                                      if (state_val_16142 === 18) {
                                                        var inst_16107 = state_16141[7];
                                                        var inst_16116 = cljs.core.first.call(null, inst_16107);
                                                        var state_16141__$1 = state_16141;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16141__$1, 20, out, inst_16116);
                                                      } else {
                                                        if (state_val_16142 === 8) {
                                                          var inst_16095 = state_16141[9];
                                                          var inst_16096 = state_16141[12];
                                                          var inst_16098 = inst_16096 < inst_16095;
                                                          var inst_16099 = inst_16098;
                                                          var state_16141__$1 = state_16141;
                                                          if (cljs.core.truth_(inst_16099)) {
                                                            var statearr_16175_16206 = state_16141__$1;
                                                            statearr_16175_16206[1] = 10;
                                                          } else {
                                                            var statearr_16176_16207 = state_16141__$1;
                                                            statearr_16176_16207[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto__);
        return function(switch__13594__auto__, c__13706__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__13595__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__13595__auto____0 = function() {
              var statearr_16180 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16180[0] = cljs$core$async$mapcat_STAR__$_state_machine__13595__auto__;
              statearr_16180[1] = 1;
              return statearr_16180;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__13595__auto____1 = function(state_16141) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_16141);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e16181) {
                    if (e16181 instanceof Object) {
                      var ex__13598__auto__ = e16181;
                      var statearr_16182_16208 = state_16141;
                      statearr_16182_16208[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16141);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16181;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16209 = state_16141;
                  state_16141 = G__16209;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__13595__auto__ = function(state_16141) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__13595__auto____1.call(this, state_16141);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__13595__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__13595__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto__);
      }();
      var state__13708__auto__ = function() {
        var statearr_16183 = f__13707__auto__.call(null);
        statearr_16183[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto__;
        return statearr_16183;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto__));
  return c__13706__auto__;
};
cljs.core.async.mapcat_LT_ = function cljs$core$async$mapcat_LT_(var_args) {
  var args16210 = [];
  var len__5726__auto___16213 = arguments.length;
  var i__5727__auto___16214 = 0;
  while (true) {
    if (i__5727__auto___16214 < len__5726__auto___16213) {
      args16210.push(arguments[i__5727__auto___16214]);
      var G__16215 = i__5727__auto___16214 + 1;
      i__5727__auto___16214 = G__16215;
      continue;
    } else {
    }
    break;
  }
  var G__16212 = args16210.length;
  switch(G__16212) {
    case 2:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args16210.length)].join(""));;
  }
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = function(f, in$) {
  return cljs.core.async.mapcat_LT_.call(null, f, in$, null);
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = function(f, in$, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return out;
};
cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_GT_ = function cljs$core$async$mapcat_GT_(var_args) {
  var args16217 = [];
  var len__5726__auto___16220 = arguments.length;
  var i__5727__auto___16221 = 0;
  while (true) {
    if (i__5727__auto___16221 < len__5726__auto___16220) {
      args16217.push(arguments[i__5727__auto___16221]);
      var G__16222 = i__5727__auto___16221 + 1;
      i__5727__auto___16221 = G__16222;
      continue;
    } else {
    }
    break;
  }
  var G__16219 = args16217.length;
  switch(G__16219) {
    case 2:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args16217.length)].join(""));;
  }
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = function(f, out) {
  return cljs.core.async.mapcat_GT_.call(null, f, out, null);
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = function(f, out, buf_or_n) {
  var in$ = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return in$;
};
cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.unique = function cljs$core$async$unique(var_args) {
  var args16224 = [];
  var len__5726__auto___16275 = arguments.length;
  var i__5727__auto___16276 = 0;
  while (true) {
    if (i__5727__auto___16276 < len__5726__auto___16275) {
      args16224.push(arguments[i__5727__auto___16276]);
      var G__16277 = i__5727__auto___16276 + 1;
      i__5727__auto___16276 = G__16277;
      continue;
    } else {
    }
    break;
  }
  var G__16226 = args16224.length;
  switch(G__16226) {
    case 1:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args16224.length)].join(""));;
  }
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = function(ch) {
  return cljs.core.async.unique.call(null, ch, null);
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = function(ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__13706__auto___16279 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___16279, out) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___16279, out) {
          return function(state_16250) {
            var state_val_16251 = state_16250[1];
            if (state_val_16251 === 7) {
              var inst_16245 = state_16250[2];
              var state_16250__$1 = state_16250;
              var statearr_16252_16280 = state_16250__$1;
              statearr_16252_16280[2] = inst_16245;
              statearr_16252_16280[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16251 === 1) {
                var inst_16227 = null;
                var state_16250__$1 = function() {
                  var statearr_16253 = state_16250;
                  statearr_16253[7] = inst_16227;
                  return statearr_16253;
                }();
                var statearr_16254_16281 = state_16250__$1;
                statearr_16254_16281[2] = null;
                statearr_16254_16281[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16251 === 4) {
                  var inst_16230 = state_16250[8];
                  var inst_16230__$1 = state_16250[2];
                  var inst_16231 = inst_16230__$1 == null;
                  var inst_16232 = cljs.core.not.call(null, inst_16231);
                  var state_16250__$1 = function() {
                    var statearr_16255 = state_16250;
                    statearr_16255[8] = inst_16230__$1;
                    return statearr_16255;
                  }();
                  if (inst_16232) {
                    var statearr_16256_16282 = state_16250__$1;
                    statearr_16256_16282[1] = 5;
                  } else {
                    var statearr_16257_16283 = state_16250__$1;
                    statearr_16257_16283[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16251 === 6) {
                    var state_16250__$1 = state_16250;
                    var statearr_16258_16284 = state_16250__$1;
                    statearr_16258_16284[2] = null;
                    statearr_16258_16284[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16251 === 3) {
                      var inst_16247 = state_16250[2];
                      var inst_16248 = cljs.core.async.close_BANG_.call(null, out);
                      var state_16250__$1 = function() {
                        var statearr_16259 = state_16250;
                        statearr_16259[9] = inst_16247;
                        return statearr_16259;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16250__$1, inst_16248);
                    } else {
                      if (state_val_16251 === 2) {
                        var state_16250__$1 = state_16250;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16250__$1, 4, ch);
                      } else {
                        if (state_val_16251 === 11) {
                          var inst_16230 = state_16250[8];
                          var inst_16239 = state_16250[2];
                          var inst_16227 = inst_16230;
                          var state_16250__$1 = function() {
                            var statearr_16260 = state_16250;
                            statearr_16260[7] = inst_16227;
                            statearr_16260[10] = inst_16239;
                            return statearr_16260;
                          }();
                          var statearr_16261_16285 = state_16250__$1;
                          statearr_16261_16285[2] = null;
                          statearr_16261_16285[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16251 === 9) {
                            var inst_16230 = state_16250[8];
                            var state_16250__$1 = state_16250;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16250__$1, 11, out, inst_16230);
                          } else {
                            if (state_val_16251 === 5) {
                              var inst_16227 = state_16250[7];
                              var inst_16230 = state_16250[8];
                              var inst_16234 = cljs.core._EQ_.call(null, inst_16230, inst_16227);
                              var state_16250__$1 = state_16250;
                              if (inst_16234) {
                                var statearr_16263_16286 = state_16250__$1;
                                statearr_16263_16286[1] = 8;
                              } else {
                                var statearr_16264_16287 = state_16250__$1;
                                statearr_16264_16287[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16251 === 10) {
                                var inst_16242 = state_16250[2];
                                var state_16250__$1 = state_16250;
                                var statearr_16265_16288 = state_16250__$1;
                                statearr_16265_16288[2] = inst_16242;
                                statearr_16265_16288[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16251 === 8) {
                                  var inst_16227 = state_16250[7];
                                  var tmp16262 = inst_16227;
                                  var inst_16227__$1 = tmp16262;
                                  var state_16250__$1 = function() {
                                    var statearr_16266 = state_16250;
                                    statearr_16266[7] = inst_16227__$1;
                                    return statearr_16266;
                                  }();
                                  var statearr_16267_16289 = state_16250__$1;
                                  statearr_16267_16289[2] = null;
                                  statearr_16267_16289[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___16279, out);
        return function(switch__13594__auto__, c__13706__auto___16279, out) {
          return function() {
            var cljs$core$async$state_machine__13595__auto__ = null;
            var cljs$core$async$state_machine__13595__auto____0 = function() {
              var statearr_16271 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_16271[0] = cljs$core$async$state_machine__13595__auto__;
              statearr_16271[1] = 1;
              return statearr_16271;
            };
            var cljs$core$async$state_machine__13595__auto____1 = function(state_16250) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_16250);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e16272) {
                    if (e16272 instanceof Object) {
                      var ex__13598__auto__ = e16272;
                      var statearr_16273_16290 = state_16250;
                      statearr_16273_16290[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16250);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16272;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16291 = state_16250;
                  state_16250 = G__16291;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__13595__auto__ = function(state_16250) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__13595__auto____1.call(this, state_16250);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__13595__auto____0;
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__13595__auto____1;
            return cljs$core$async$state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___16279, out);
      }();
      var state__13708__auto__ = function() {
        var statearr_16274 = f__13707__auto__.call(null);
        statearr_16274[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___16279;
        return statearr_16274;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___16279, out));
  return out;
};
cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
cljs.core.async.partition = function cljs$core$async$partition(var_args) {
  var args16292 = [];
  var len__5726__auto___16362 = arguments.length;
  var i__5727__auto___16363 = 0;
  while (true) {
    if (i__5727__auto___16363 < len__5726__auto___16362) {
      args16292.push(arguments[i__5727__auto___16363]);
      var G__16364 = i__5727__auto___16363 + 1;
      i__5727__auto___16363 = G__16364;
      continue;
    } else {
    }
    break;
  }
  var G__16294 = args16292.length;
  switch(G__16294) {
    case 2:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args16292.length)].join(""));;
  }
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.partition.call(null, n, ch, null);
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__13706__auto___16366 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___16366, out) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___16366, out) {
          return function(state_16332) {
            var state_val_16333 = state_16332[1];
            if (state_val_16333 === 7) {
              var inst_16328 = state_16332[2];
              var state_16332__$1 = state_16332;
              var statearr_16334_16367 = state_16332__$1;
              statearr_16334_16367[2] = inst_16328;
              statearr_16334_16367[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16333 === 1) {
                var inst_16295 = new Array(n);
                var inst_16296 = inst_16295;
                var inst_16297 = 0;
                var state_16332__$1 = function() {
                  var statearr_16335 = state_16332;
                  statearr_16335[7] = inst_16297;
                  statearr_16335[8] = inst_16296;
                  return statearr_16335;
                }();
                var statearr_16336_16368 = state_16332__$1;
                statearr_16336_16368[2] = null;
                statearr_16336_16368[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16333 === 4) {
                  var inst_16300 = state_16332[9];
                  var inst_16300__$1 = state_16332[2];
                  var inst_16301 = inst_16300__$1 == null;
                  var inst_16302 = cljs.core.not.call(null, inst_16301);
                  var state_16332__$1 = function() {
                    var statearr_16337 = state_16332;
                    statearr_16337[9] = inst_16300__$1;
                    return statearr_16337;
                  }();
                  if (inst_16302) {
                    var statearr_16338_16369 = state_16332__$1;
                    statearr_16338_16369[1] = 5;
                  } else {
                    var statearr_16339_16370 = state_16332__$1;
                    statearr_16339_16370[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16333 === 15) {
                    var inst_16322 = state_16332[2];
                    var state_16332__$1 = state_16332;
                    var statearr_16340_16371 = state_16332__$1;
                    statearr_16340_16371[2] = inst_16322;
                    statearr_16340_16371[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16333 === 13) {
                      var state_16332__$1 = state_16332;
                      var statearr_16341_16372 = state_16332__$1;
                      statearr_16341_16372[2] = null;
                      statearr_16341_16372[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16333 === 6) {
                        var inst_16297 = state_16332[7];
                        var inst_16318 = inst_16297 > 0;
                        var state_16332__$1 = state_16332;
                        if (cljs.core.truth_(inst_16318)) {
                          var statearr_16342_16373 = state_16332__$1;
                          statearr_16342_16373[1] = 12;
                        } else {
                          var statearr_16343_16374 = state_16332__$1;
                          statearr_16343_16374[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16333 === 3) {
                          var inst_16330 = state_16332[2];
                          var state_16332__$1 = state_16332;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16332__$1, inst_16330);
                        } else {
                          if (state_val_16333 === 12) {
                            var inst_16296 = state_16332[8];
                            var inst_16320 = cljs.core.vec.call(null, inst_16296);
                            var state_16332__$1 = state_16332;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16332__$1, 15, out, inst_16320);
                          } else {
                            if (state_val_16333 === 2) {
                              var state_16332__$1 = state_16332;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16332__$1, 4, ch);
                            } else {
                              if (state_val_16333 === 11) {
                                var inst_16312 = state_16332[2];
                                var inst_16313 = new Array(n);
                                var inst_16296 = inst_16313;
                                var inst_16297 = 0;
                                var state_16332__$1 = function() {
                                  var statearr_16344 = state_16332;
                                  statearr_16344[7] = inst_16297;
                                  statearr_16344[10] = inst_16312;
                                  statearr_16344[8] = inst_16296;
                                  return statearr_16344;
                                }();
                                var statearr_16345_16375 = state_16332__$1;
                                statearr_16345_16375[2] = null;
                                statearr_16345_16375[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16333 === 9) {
                                  var inst_16296 = state_16332[8];
                                  var inst_16310 = cljs.core.vec.call(null, inst_16296);
                                  var state_16332__$1 = state_16332;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16332__$1, 11, out, inst_16310);
                                } else {
                                  if (state_val_16333 === 5) {
                                    var inst_16297 = state_16332[7];
                                    var inst_16300 = state_16332[9];
                                    var inst_16305 = state_16332[11];
                                    var inst_16296 = state_16332[8];
                                    var inst_16304 = inst_16296[inst_16297] = inst_16300;
                                    var inst_16305__$1 = inst_16297 + 1;
                                    var inst_16306 = inst_16305__$1 < n;
                                    var state_16332__$1 = function() {
                                      var statearr_16346 = state_16332;
                                      statearr_16346[11] = inst_16305__$1;
                                      statearr_16346[12] = inst_16304;
                                      return statearr_16346;
                                    }();
                                    if (cljs.core.truth_(inst_16306)) {
                                      var statearr_16347_16376 = state_16332__$1;
                                      statearr_16347_16376[1] = 8;
                                    } else {
                                      var statearr_16348_16377 = state_16332__$1;
                                      statearr_16348_16377[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16333 === 14) {
                                      var inst_16325 = state_16332[2];
                                      var inst_16326 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_16332__$1 = function() {
                                        var statearr_16350 = state_16332;
                                        statearr_16350[13] = inst_16325;
                                        return statearr_16350;
                                      }();
                                      var statearr_16351_16378 = state_16332__$1;
                                      statearr_16351_16378[2] = inst_16326;
                                      statearr_16351_16378[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_16333 === 10) {
                                        var inst_16316 = state_16332[2];
                                        var state_16332__$1 = state_16332;
                                        var statearr_16352_16379 = state_16332__$1;
                                        statearr_16352_16379[2] = inst_16316;
                                        statearr_16352_16379[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_16333 === 8) {
                                          var inst_16305 = state_16332[11];
                                          var inst_16296 = state_16332[8];
                                          var tmp16349 = inst_16296;
                                          var inst_16296__$1 = tmp16349;
                                          var inst_16297 = inst_16305;
                                          var state_16332__$1 = function() {
                                            var statearr_16353 = state_16332;
                                            statearr_16353[7] = inst_16297;
                                            statearr_16353[8] = inst_16296__$1;
                                            return statearr_16353;
                                          }();
                                          var statearr_16354_16380 = state_16332__$1;
                                          statearr_16354_16380[2] = null;
                                          statearr_16354_16380[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___16366, out);
        return function(switch__13594__auto__, c__13706__auto___16366, out) {
          return function() {
            var cljs$core$async$state_machine__13595__auto__ = null;
            var cljs$core$async$state_machine__13595__auto____0 = function() {
              var statearr_16358 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16358[0] = cljs$core$async$state_machine__13595__auto__;
              statearr_16358[1] = 1;
              return statearr_16358;
            };
            var cljs$core$async$state_machine__13595__auto____1 = function(state_16332) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_16332);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e16359) {
                    if (e16359 instanceof Object) {
                      var ex__13598__auto__ = e16359;
                      var statearr_16360_16381 = state_16332;
                      statearr_16360_16381[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16332);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16359;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16382 = state_16332;
                  state_16332 = G__16382;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__13595__auto__ = function(state_16332) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__13595__auto____1.call(this, state_16332);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__13595__auto____0;
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__13595__auto____1;
            return cljs$core$async$state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___16366, out);
      }();
      var state__13708__auto__ = function() {
        var statearr_16361 = f__13707__auto__.call(null);
        statearr_16361[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___16366;
        return statearr_16361;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___16366, out));
  return out;
};
cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
cljs.core.async.partition_by = function cljs$core$async$partition_by(var_args) {
  var args16383 = [];
  var len__5726__auto___16457 = arguments.length;
  var i__5727__auto___16458 = 0;
  while (true) {
    if (i__5727__auto___16458 < len__5726__auto___16457) {
      args16383.push(arguments[i__5727__auto___16458]);
      var G__16459 = i__5727__auto___16458 + 1;
      i__5727__auto___16458 = G__16459;
      continue;
    } else {
    }
    break;
  }
  var G__16385 = args16383.length;
  switch(G__16385) {
    case 2:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args16383.length)].join(""));;
  }
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, ch) {
  return cljs.core.async.partition_by.call(null, f, ch, null);
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = function(f, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__13706__auto___16461 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___16461, out) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___16461, out) {
          return function(state_16427) {
            var state_val_16428 = state_16427[1];
            if (state_val_16428 === 7) {
              var inst_16423 = state_16427[2];
              var state_16427__$1 = state_16427;
              var statearr_16429_16462 = state_16427__$1;
              statearr_16429_16462[2] = inst_16423;
              statearr_16429_16462[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16428 === 1) {
                var inst_16386 = [];
                var inst_16387 = inst_16386;
                var inst_16388 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                var state_16427__$1 = function() {
                  var statearr_16430 = state_16427;
                  statearr_16430[7] = inst_16387;
                  statearr_16430[8] = inst_16388;
                  return statearr_16430;
                }();
                var statearr_16431_16463 = state_16427__$1;
                statearr_16431_16463[2] = null;
                statearr_16431_16463[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16428 === 4) {
                  var inst_16391 = state_16427[9];
                  var inst_16391__$1 = state_16427[2];
                  var inst_16392 = inst_16391__$1 == null;
                  var inst_16393 = cljs.core.not.call(null, inst_16392);
                  var state_16427__$1 = function() {
                    var statearr_16432 = state_16427;
                    statearr_16432[9] = inst_16391__$1;
                    return statearr_16432;
                  }();
                  if (inst_16393) {
                    var statearr_16433_16464 = state_16427__$1;
                    statearr_16433_16464[1] = 5;
                  } else {
                    var statearr_16434_16465 = state_16427__$1;
                    statearr_16434_16465[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16428 === 15) {
                    var inst_16417 = state_16427[2];
                    var state_16427__$1 = state_16427;
                    var statearr_16435_16466 = state_16427__$1;
                    statearr_16435_16466[2] = inst_16417;
                    statearr_16435_16466[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16428 === 13) {
                      var state_16427__$1 = state_16427;
                      var statearr_16436_16467 = state_16427__$1;
                      statearr_16436_16467[2] = null;
                      statearr_16436_16467[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16428 === 6) {
                        var inst_16387 = state_16427[7];
                        var inst_16412 = inst_16387.length;
                        var inst_16413 = inst_16412 > 0;
                        var state_16427__$1 = state_16427;
                        if (cljs.core.truth_(inst_16413)) {
                          var statearr_16437_16468 = state_16427__$1;
                          statearr_16437_16468[1] = 12;
                        } else {
                          var statearr_16438_16469 = state_16427__$1;
                          statearr_16438_16469[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16428 === 3) {
                          var inst_16425 = state_16427[2];
                          var state_16427__$1 = state_16427;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16427__$1, inst_16425);
                        } else {
                          if (state_val_16428 === 12) {
                            var inst_16387 = state_16427[7];
                            var inst_16415 = cljs.core.vec.call(null, inst_16387);
                            var state_16427__$1 = state_16427;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16427__$1, 15, out, inst_16415);
                          } else {
                            if (state_val_16428 === 2) {
                              var state_16427__$1 = state_16427;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16427__$1, 4, ch);
                            } else {
                              if (state_val_16428 === 11) {
                                var inst_16395 = state_16427[10];
                                var inst_16391 = state_16427[9];
                                var inst_16405 = state_16427[2];
                                var inst_16406 = [];
                                var inst_16407 = inst_16406.push(inst_16391);
                                var inst_16387 = inst_16406;
                                var inst_16388 = inst_16395;
                                var state_16427__$1 = function() {
                                  var statearr_16439 = state_16427;
                                  statearr_16439[7] = inst_16387;
                                  statearr_16439[11] = inst_16407;
                                  statearr_16439[12] = inst_16405;
                                  statearr_16439[8] = inst_16388;
                                  return statearr_16439;
                                }();
                                var statearr_16440_16470 = state_16427__$1;
                                statearr_16440_16470[2] = null;
                                statearr_16440_16470[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16428 === 9) {
                                  var inst_16387 = state_16427[7];
                                  var inst_16403 = cljs.core.vec.call(null, inst_16387);
                                  var state_16427__$1 = state_16427;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16427__$1, 11, out, inst_16403);
                                } else {
                                  if (state_val_16428 === 5) {
                                    var inst_16395 = state_16427[10];
                                    var inst_16391 = state_16427[9];
                                    var inst_16388 = state_16427[8];
                                    var inst_16395__$1 = f.call(null, inst_16391);
                                    var inst_16396 = cljs.core._EQ_.call(null, inst_16395__$1, inst_16388);
                                    var inst_16397 = cljs.core.keyword_identical_QMARK_.call(null, inst_16388, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                    var inst_16398 = inst_16396 || inst_16397;
                                    var state_16427__$1 = function() {
                                      var statearr_16441 = state_16427;
                                      statearr_16441[10] = inst_16395__$1;
                                      return statearr_16441;
                                    }();
                                    if (cljs.core.truth_(inst_16398)) {
                                      var statearr_16442_16471 = state_16427__$1;
                                      statearr_16442_16471[1] = 8;
                                    } else {
                                      var statearr_16443_16472 = state_16427__$1;
                                      statearr_16443_16472[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16428 === 14) {
                                      var inst_16420 = state_16427[2];
                                      var inst_16421 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_16427__$1 = function() {
                                        var statearr_16445 = state_16427;
                                        statearr_16445[13] = inst_16420;
                                        return statearr_16445;
                                      }();
                                      var statearr_16446_16473 = state_16427__$1;
                                      statearr_16446_16473[2] = inst_16421;
                                      statearr_16446_16473[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_16428 === 10) {
                                        var inst_16410 = state_16427[2];
                                        var state_16427__$1 = state_16427;
                                        var statearr_16447_16474 = state_16427__$1;
                                        statearr_16447_16474[2] = inst_16410;
                                        statearr_16447_16474[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_16428 === 8) {
                                          var inst_16387 = state_16427[7];
                                          var inst_16395 = state_16427[10];
                                          var inst_16391 = state_16427[9];
                                          var inst_16400 = inst_16387.push(inst_16391);
                                          var tmp16444 = inst_16387;
                                          var inst_16387__$1 = tmp16444;
                                          var inst_16388 = inst_16395;
                                          var state_16427__$1 = function() {
                                            var statearr_16448 = state_16427;
                                            statearr_16448[7] = inst_16387__$1;
                                            statearr_16448[14] = inst_16400;
                                            statearr_16448[8] = inst_16388;
                                            return statearr_16448;
                                          }();
                                          var statearr_16449_16475 = state_16427__$1;
                                          statearr_16449_16475[2] = null;
                                          statearr_16449_16475[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___16461, out);
        return function(switch__13594__auto__, c__13706__auto___16461, out) {
          return function() {
            var cljs$core$async$state_machine__13595__auto__ = null;
            var cljs$core$async$state_machine__13595__auto____0 = function() {
              var statearr_16453 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16453[0] = cljs$core$async$state_machine__13595__auto__;
              statearr_16453[1] = 1;
              return statearr_16453;
            };
            var cljs$core$async$state_machine__13595__auto____1 = function(state_16427) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_16427);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e16454) {
                    if (e16454 instanceof Object) {
                      var ex__13598__auto__ = e16454;
                      var statearr_16455_16476 = state_16427;
                      statearr_16455_16476[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16427);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16454;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16477 = state_16427;
                  state_16427 = G__16477;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__13595__auto__ = function(state_16427) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__13595__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__13595__auto____1.call(this, state_16427);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__13595__auto____0;
            cljs$core$async$state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__13595__auto____1;
            return cljs$core$async$state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___16461, out);
      }();
      var state__13708__auto__ = function() {
        var statearr_16456 = f__13707__auto__.call(null);
        statearr_16456[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___16461;
        return statearr_16456;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___16461, out));
  return out;
};
cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;
goog.provide("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.platform.isAndroid = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.platform.isIpod = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPod");
};
goog.labs.userAgent.platform.isIphone = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIpad = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIos = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
};
goog.labs.userAgent.platform.isMacintosh = function() {
  return goog.labs.userAgent.util.matchUserAgent("Macintosh");
};
goog.labs.userAgent.platform.isLinux = function() {
  return goog.labs.userAgent.util.matchUserAgent("Linux");
};
goog.labs.userAgent.platform.isWindows = function() {
  return goog.labs.userAgent.util.matchUserAgent("Windows");
};
goog.labs.userAgent.platform.isChromeOS = function() {
  return goog.labs.userAgent.util.matchUserAgent("CrOS");
};
goog.labs.userAgent.platform.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  var version = "", re;
  if (goog.labs.userAgent.platform.isWindows()) {
    re = /Windows (?:NT|Phone) ([0-9.]+)/;
    var match = re.exec(userAgentString);
    if (match) {
      version = match[1];
    } else {
      version = "0.0";
    }
  } else {
    if (goog.labs.userAgent.platform.isIos()) {
      re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
      var match = re.exec(userAgentString);
      version = match && match[1].replace(/_/g, ".");
    } else {
      if (goog.labs.userAgent.platform.isMacintosh()) {
        re = /Mac OS X ([0-9_.]+)/;
        var match = re.exec(userAgentString);
        version = match ? match[1].replace(/_/g, ".") : "10";
      } else {
        if (goog.labs.userAgent.platform.isAndroid()) {
          re = /Android\s+([^\);]+)(\)|;)/;
          var match = re.exec(userAgentString);
          version = match && match[1];
        } else {
          if (goog.labs.userAgent.platform.isChromeOS()) {
            re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
            var match = re.exec(userAgentString);
            version = match && match[1];
          }
        }
      }
    }
  }
  return version || "";
};
goog.labs.userAgent.platform.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), version) >= 0;
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_EDGE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function() {
  return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
};
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return !!navigator && goog.string.contains(navigator["appVersion"] || "", "X11");
};
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.operaVersion_ = function() {
  var version = goog.global.opera.version;
  try {
    return version();
  } catch (e) {
    return version;
  }
};
goog.userAgent.determineVersion_ = function() {
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    return goog.userAgent.operaVersion_();
  }
  var version = "";
  var arr = goog.userAgent.getVersionRegexResult_();
  if (arr) {
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getVersionRegexResult_ = function() {
  var userAgent = goog.userAgent.getUserAgentString();
  if (goog.userAgent.GECKO) {
    return /rv\:([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.EDGE) {
    return /Edge\/([\d\.]+)/.exec(userAgent);
  }
  if (goog.userAgent.IE) {
    return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.WEBKIT) {
    return /WebKit\/(\S+)/.exec(userAgent);
  }
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  var mode = goog.userAgent.getDocumentMode_();
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet("area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr");
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function() {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function() {
  return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
};
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const;
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;
  return stringConst;
};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style), "Forbidden characters in style string: " + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "'");
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  return (new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(style);
};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(style) {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return this;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      goog.asserts.assert(!/[{;}]/.test(value), "Value does not allow [{;}].");
    } else {
      if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
        goog.asserts.fail("String value allows only [-,.\"'%_!# a-zA-Z0-9], got: " + value);
        value = goog.html.SafeStyle.INNOCUOUS_STRING;
      } else {
        if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {
          goog.asserts.fail("String value requires balanced quotes, got: " + value);
          value = goog.html.SafeStyle.INNOCUOUS_STRING;
        }
      }
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.hasBalancedQuotes_ = function(value) {
  var outsideSingle = true;
  var outsideDouble = true;
  for (var i = 0;i < value.length;i++) {
    var c = value.charAt(i);
    if (c == "'" && outsideDouble) {
      outsideSingle = !outsideSingle;
    } else {
      if (c == '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
  }
  return outsideSingle && outsideDouble;
};
goog.html.SafeStyle.VALUE_RE_ = /^[-,."'%_!# a-zA-Z0-9]+$/;
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.html.SafeStyleSheet");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyleSheet = function() {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyleSheet.concat = function(var_args) {
  var result = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      result += goog.html.SafeStyleSheet.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(result);
};
goog.html.SafeStyleSheet.fromConstant = function(styleSheet) {
  var styleSheetString = goog.string.Const.unwrap(styleSheet);
  if (styleSheetString.length === 0) {
    return goog.html.SafeStyleSheet.EMPTY;
  }
  goog.asserts.assert(!goog.string.contains(styleSheetString, "\x3c"), "Forbidden '\x3c' character in style sheet string: " + styleSheetString);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheetString);
};
goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyleSheet.prototype.toString = function() {
    return "SafeStyleSheet{" + this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + "}";
  };
}
goog.html.SafeStyleSheet.unwrap = function(safeStyleSheet) {
  if (safeStyleSheet instanceof goog.html.SafeStyleSheet && safeStyleSheet.constructor === goog.html.SafeStyleSheet && safeStyleSheet.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyleSheet, got '" + safeStyleSheet + "'");
    return "type_error:SafeStyleSheet";
  }
};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse = function(styleSheet) {
  return (new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(styleSheet);
};
goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(styleSheet) {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = styleSheet;
  return this;
};
goog.html.SafeStyleSheet.EMPTY = goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.fs.url");
goog.fs.url.createObjectUrl = function(blob) {
  return goog.fs.url.getUrlObject_().createObjectURL(blob);
};
goog.fs.url.revokeObjectUrl = function(url) {
  goog.fs.url.getUrlObject_().revokeObjectURL(url);
};
goog.fs.url.UrlObject_;
goog.fs.url.getUrlObject_ = function() {
  var urlObject = goog.fs.url.findUrlObject_();
  if (urlObject != null) {
    return urlObject;
  } else {
    throw Error("This browser doesn't seem to support blob URLs");
  }
};
goog.fs.url.findUrlObject_ = function() {
  if (goog.isDef(goog.global.URL) && goog.isDef(goog.global.URL.createObjectURL)) {
    return (goog.global.URL);
  } else {
    if (goog.isDef(goog.global.webkitURL) && goog.isDef(goog.global.webkitURL.createObjectURL)) {
      return (goog.global.webkitURL);
    } else {
      if (goog.isDef(goog.global.createObjectURL)) {
        return (goog.global);
      } else {
        return null;
      }
    }
  }
};
goog.fs.url.browserSupportsObjectUrls = function() {
  return goog.fs.url.findUrlObject_() != null;
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_");
goog.i18n.bidi.Format = {LRE:"\u202a", RLE:"\u202b", PDF:"\u202c", LRM:"\u200e", RLM:"\u200f"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff" + "\u200e\u2c00-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";
goog.i18n.bidi.rtlChars_ = "\u0591-\u06ef\u06fa-\u07ff\u200f\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return !goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardHtmlRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(&lt;.*?(&gt;)+)/g;
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInHtml = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  if (useRtl) {
    return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3drtl\x3e$\x26\x3c/span\x3e");
  }
  return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3dltr\x3e$\x26\x3c/span\x3e");
};
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1\u05f3");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;
goog.i18n.bidi.rtlDetectionThreshold_ = .4;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.setElementDirByTextDirectionality = function(element, text) {
  switch(goog.i18n.bidi.estimateDirection(text)) {
    case goog.i18n.bidi.Dir.LTR:
      element.dir = "ltr";
      break;
    case goog.i18n.bidi.Dir.RTL:
      element.dir = "rtl";
      break;
    default:
      element.removeAttribute("dir");
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.fs.url");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeUrl = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "'");
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_MIME_TYPE_PATTERN_ = /^(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm))$/i;
goog.html.SafeUrl.fromBlob = function(blob) {
  var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ? goog.fs.url.createObjectUrl(blob) : goog.html.SafeUrl.INNOCUOUS_STRING;
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.DATA_URL_PATTERN_ = /^data:([^;,]*);base64,[a-z0-9+\/]+=*$/i;
goog.html.SafeUrl.fromDataUrl = function(dataUrl) {
  var match = dataUrl.match(goog.html.DATA_URL_PATTERN_);
  var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var safeUrl = new goog.html.SafeUrl;
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};
goog.provide("goog.html.TrustedResourceUrl");
goog.require("goog.asserts");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.TrustedResourceUrl = function() {
  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = "";
  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.TrustedResourceUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.TrustedResourceUrl.prototype.toString = function() {
    return "TrustedResourceUrl{" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + "}";
  };
}
goog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {
  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl && trustedResourceUrl.constructor === goog.html.TrustedResourceUrl && trustedResourceUrl.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type TrustedResourceUrl, got '" + trustedResourceUrl + "'");
    return "type_error:TrustedResourceUrl";
  }
};
goog.html.TrustedResourceUrl.fromConstant = function(url) {
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var trustedResourceUrl = new goog.html.TrustedResourceUrl;
  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = url;
  return trustedResourceUrl;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.TagName");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "'");
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.whitespaceEscape(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet(goog.dom.TagName.EMBED, goog.dom.TagName.IFRAME, goog.dom.TagName.LINK, goog.dom.TagName.OBJECT, goog.dom.TagName.SCRIPT, goog.dom.TagName.STYLE, goog.dom.TagName.TEMPLATE);
goog.html.SafeHtml.AttributeValue_;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error("Invalid tag name \x3c" + tagName + "\x3e.");
  }
  if (tagName.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error("Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml.");
  }
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(tagName, opt_attributes, opt_content);
};
goog.html.SafeHtml.createIframe = function(opt_src, opt_srcdoc, opt_attributes, opt_content) {
  var fixedAttributes = {};
  fixedAttributes["src"] = opt_src || null;
  fixedAttributes["srcdoc"] = opt_srcdoc || null;
  var defaultAttributes = {"sandbox":""};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", attributes, opt_content);
};
goog.html.SafeHtml.createStyle = function(styleSheet, opt_attributes) {
  var fixedAttributes = {"type":"text/css"};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  var content = "";
  styleSheet = goog.array.concat(styleSheet);
  for (var i = 0;i < styleSheet.length;i++) {
    content += goog.html.SafeStyleSheet.unwrap(styleSheet[i]);
  }
  var htmlContent = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, goog.i18n.bidi.Dir.NEUTRAL);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style", attributes, htmlContent);
};
goog.html.SafeHtml.getAttrNameAndValue_ = function(tagName, name, value) {
  if (value instanceof goog.string.Const) {
    value = goog.string.Const.unwrap(value);
  } else {
    if (name.toLowerCase() == "style") {
      value = goog.html.SafeHtml.getStyleValue_(value);
    } else {
      if (/^on/i.test(name)) {
        throw Error('Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.');
      } else {
        if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
          if (value instanceof goog.html.TrustedResourceUrl) {
            value = goog.html.TrustedResourceUrl.unwrap(value);
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              if (goog.isString(value)) {
                value = goog.html.SafeUrl.sanitize(value).getTypedStringValue();
              } else {
                throw Error('Attribute "' + name + '" on tag "' + tagName + '" requires goog.html.SafeUrl, goog.string.Const, or string,' + ' value "' + value + '" given.');
              }
            }
          }
        }
      }
    }
  }
  if (value.implementsGoogStringTypedString) {
    value = value.getTypedStringValue();
  }
  goog.asserts.assert(goog.isString(value) || goog.isNumber(value), "String or number value expected, got " + typeof value + " with value: " + value);
  return name + '\x3d"' + goog.string.htmlEscape(String(value)) + '"';
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  return (new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(html, dir);
};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(html, dir) {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  this.dir_ = dir;
  return this;
};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function(tagName, opt_attributes, opt_content) {
  var dir = null;
  var result = "\x3c" + tagName;
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (!goog.isDefAndNotNull(value)) {
        continue;
      }
      result += " " + goog.html.SafeHtml.getAttrNameAndValue_(tagName, name, value);
    }
  }
  var content = opt_content;
  if (!goog.isDefAndNotNull(content)) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.combineAttributes = function(fixedAttributes, defaultAttributes, opt_attributes) {
  var combinedAttributes = {};
  var name;
  for (name in fixedAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = fixedAttributes[name];
  }
  for (name in defaultAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = defaultAttributes[name];
  }
  for (name in opt_attributes) {
    var nameLower = name.toLowerCase();
    if (nameLower in fixedAttributes) {
      throw Error('Cannot override "' + nameLower + '" attribute, got "' + name + '" with value "' + opt_attributes[name] + '"');
    }
    if (nameLower in defaultAttributes) {
      delete combinedAttributes[nameLower];
    }
    combinedAttributes[name] = opt_attributes[name];
  }
  return combinedAttributes;
};
goog.html.SafeHtml.DOCTYPE_HTML = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3c!DOCTYPE html\x3e", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.dom.safe");
goog.provide("goog.dom.safe.InsertAdjacentHtmlPosition");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.dom.safe.InsertAdjacentHtmlPosition = {AFTERBEGIN:"afterbegin", AFTEREND:"afterend", BEFOREBEGIN:"beforebegin", BEFOREEND:"beforeend"};
goog.dom.safe.insertAdjacentHtml = function(node, position, html) {
  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setEmbedSrc = function(embed, url) {
  embed.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setFrameSrc = function(frame, url) {
  frame.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setIframeSrc = function(iframe, url) {
  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {
  link.rel = rel;
  if (goog.string.caseInsensitiveContains(rel, "stylesheet")) {
    goog.asserts.assert(url instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"');
    link.href = goog.html.TrustedResourceUrl.unwrap(url);
  } else {
    if (url instanceof goog.html.TrustedResourceUrl) {
      link.href = goog.html.TrustedResourceUrl.unwrap(url);
    } else {
      if (url instanceof goog.html.SafeUrl) {
        link.href = goog.html.SafeUrl.unwrap(url);
      } else {
        link.href = goog.html.SafeUrl.sanitize(url).getTypedStringValue();
      }
    }
  }
};
goog.dom.safe.setObjectData = function(object, url) {
  object.data = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setScriptSrc = function(script, url) {
  script.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLocationHref = function(loc, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.openInWindow = function(url, opt_openerWin, opt_name, opt_specs, opt_replace) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  var win = opt_openerWin || window;
  return win.open(goog.html.SafeUrl.unwrap(safeUrl), opt_name ? goog.string.Const.unwrap(opt_name) : "", opt_specs, opt_replace);
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = Math.sign || function(x) {
  if (x > 0) {
    return 1;
  }
  if (x < 0) {
    return -1;
  }
  return x;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return (goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.isNegativeZero = function(num) {
  return num == 0 && 1 / num < 0;
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num ? 1 : 0);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return (this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return !this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToCover = function(target) {
  var s = this.aspectRatio() <= target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Unicode");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (parent.getElementsByClassName) {
    retVal = parent.getElementsByClassName(className)[0];
  } else {
    if (goog.dom.canUseQuerySelector_(parent)) {
      retVal = parent.querySelector("." + className);
    } else {
      retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
    }
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return !!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (goog.dom.DIRECT_ATTRIBUTE_MAP_.hasOwnProperty(key)) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = (doc.documentElement);
    if (!(docEl && body)) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (doc.scrollingElement) {
    return doc.scrollingElement;
  }
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var table = (doc.createElement(goog.dom.TagName.TABLE));
  var tbody = table.appendChild(doc.createElement(goog.dom.TagName.TBODY));
  for (var i = 0;i < rows;i++) {
    var tr = doc.createElement(goog.dom.TagName.TR);
    for (var j = 0;j < columns;j++) {
      var td = doc.createElement(goog.dom.TagName.TD);
      if (fillWithNbsp) {
        goog.dom.setTextContent(td, goog.string.Unicode.NBSP);
      }
      tr.appendChild(td);
    }
    tbody.appendChild(tr);
  }
  return table;
};
goog.dom.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(document, html);
};
goog.dom.safeHtmlToNode_ = function(doc, html) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    goog.dom.safe.setInnerHtml(tempDiv, goog.html.SafeHtml.concat(goog.html.SafeHtml.create("br"), html));
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    goog.dom.safe.setInnerHtml(tempDiv, html);
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.childrenToNode_ = function(doc, tempDiv) {
  if (tempDiv.childNodes.length == 1) {
    return tempDiv.removeChild(tempDiv.firstChild);
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch((node).tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return (element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return (goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (goog.isDef(node.firstElementChild)) {
    return (node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (goog.isDef(node.lastElementChild)) {
    return (node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (goog.isDef(node.nextElementSibling)) {
    return (node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (goog.isDef(node.previousElementSibling)) {
    return (node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return (node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return -1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return (isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return -1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return -1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return (node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement(goog.dom.TagName.DIV);
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class, opt_maxSearchSteps) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return (goog.dom.getAncestor(element, function(node) {
    return (!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true, opt_maxSearchSteps));
};
goog.dom.getAncestorByClass = function(element, className, opt_maxSearchSteps) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className, opt_maxSearchSteps);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    goog.asserts.assert(element.name != "parentNode");
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.getPixelRatio = function() {
  var win = goog.dom.getWindow();
  if (goog.isDef(win.devicePixelRatio)) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
};
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(this.document_, html);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
  this.disposed_ = this.disposed_;
  this.onDisposeCallbacks_ = this.onDisposeCallbacks_;
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (this.disposed_) {
    callback.call(opt_scope);
    return;
  }
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", WHEEL:"wheel", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", 
CHANGE:"change", RESET:"reset", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", 
LOSECAPTURE:"losecapture", ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXT:"text", 
TEXTINPUT:"textInput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", 
DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified", BEFOREPRINT:"beforeprint", AFTERPRINT:"afterprint"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  var relevantTouch = e.changedTouches ? e.changedTouches[0] : null;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  if (!goog.isNull(relevantTouch)) {
    this.clientX = relevantTouch.clientX !== undefined ? relevantTouch.clientX : relevantTouch.pageX;
    this.clientY = relevantTouch.clientY !== undefined ? relevantTouch.clientY : relevantTouch.pageY;
    this.screenX = relevantTouch.screenX || 0;
    this.screenY = relevantTouch.screenY || 0;
  } else {
    this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
    this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
    this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
    this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
    this.screenX = e.screenX || 0;
    this.screenY = e.screenY || 0;
  }
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return !!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return ++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return -1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    if (src.attachEvent) {
      src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
    } else {
      throw Error("addEventListener and attachEvent are unavailable.");
    }
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = key;
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return [];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return !!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = true;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          var result = goog.events.fireListener(listener, eventObject);
          retval = retval && result !== false;
        }
      }
    }
  }
  return retval;
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, true, evt);
          retval = retval && result;
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, false, evt);
          retval = retval && result;
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("vdom_signals.dom");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("cljs.core.async");
vdom_signals.dom.vnode;
vdom_signals.dom.vchild = function vdom_signals$dom$vchild(child) {
  if (cljs.core.vector_QMARK_.call(null, child)) {
    if (cljs.core.first.call(null, child) instanceof cljs.core.Keyword) {
      return vdom_signals.dom.vnode.call(null, child);
    } else {
      return cljs.core.clj__GT_js.call(null, cljs.core.map.call(null, vdom_signals.dom.vnode, child));
    }
  } else {
    return child;
  }
};
vdom_signals.dom.vnode = function vdom_signals$dom$vnode(p__16480) {
  var vec__16482 = p__16480;
  var nnode = cljs.core.nth.call(null, vec__16482, 0, null);
  var props = cljs.core.nth.call(null, vec__16482, 1, null);
  var child = cljs.core.nth.call(null, vec__16482, 2, null);
  var child_SINGLEQUOTE_ = vdom_signals.dom.vchild.call(null, child);
  var props_SINGLEQUOTE_ = cljs.core.clj__GT_js.call(null, props);
  var nname_SINGLEQUOTE_ = cljs.core.name.call(null, nnode);
  return virtualDom.h(nname_SINGLEQUOTE_, props_SINGLEQUOTE_, child_SINGLEQUOTE_);
};
vdom_signals.dom.animate = function vdom_signals$dom$animate(f) {
  return window.requestAnimationFrame(f);
};
vdom_signals.dom.renderer = function vdom_signals$dom$renderer(elem) {
  var tree = cljs.core.atom.call(null, new virtualDom.VText(""));
  var root = cljs.core.atom.call(null, virtualDom.create(cljs.core.deref.call(null, tree)));
  var update = function(tree, root) {
    return function(f) {
      return window.requestAnimationFrame(f);
    };
  }(tree, root);
  goog.dom.removeChildren(elem);
  goog.dom.append(elem, cljs.core.deref.call(null, root));
  return function(tree, root, update) {
    return function(view) {
      var new_tree = vdom_signals.dom.vnode.call(null, view);
      var patches = virtualDom.diff(cljs.core.deref.call(null, tree), new_tree);
      cljs.core.reset_BANG_.call(null, tree, new_tree);
      return update.call(null, function(new_tree, patches, tree, root, update) {
        return function() {
          return cljs.core.swap_BANG_.call(null, root, virtualDom.patch, patches);
        };
      }(new_tree, patches, tree, root, update));
    };
  }(tree, root, update);
};
vdom_signals.dom.render_BANG_ = function vdom_signals$dom$render_BANG_(dom_signal, elem) {
  var render = vdom_signals.dom.renderer.call(null, elem);
  var c__13706__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto__, render) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto__, render) {
          return function(state_16511) {
            var state_val_16512 = state_16511[1];
            if (state_val_16512 === 1) {
              var state_16511__$1 = state_16511;
              var statearr_16513_16523 = state_16511__$1;
              statearr_16513_16523[2] = null;
              statearr_16513_16523[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16512 === 2) {
                var state_16511__$1 = state_16511;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16511__$1, 4, dom_signal);
              } else {
                if (state_val_16512 === 3) {
                  var inst_16509 = state_16511[2];
                  var state_16511__$1 = state_16511;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16511__$1, inst_16509);
                } else {
                  if (state_val_16512 === 4) {
                    var inst_16505 = state_16511[2];
                    var inst_16506 = render.call(null, inst_16505);
                    var state_16511__$1 = function() {
                      var statearr_16514 = state_16511;
                      statearr_16514[7] = inst_16506;
                      return statearr_16514;
                    }();
                    var statearr_16515_16524 = state_16511__$1;
                    statearr_16515_16524[2] = null;
                    statearr_16515_16524[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__13706__auto__, render);
        return function(switch__13594__auto__, c__13706__auto__, render) {
          return function() {
            var vdom_signals$dom$render_BANG__$_state_machine__13595__auto__ = null;
            var vdom_signals$dom$render_BANG__$_state_machine__13595__auto____0 = function() {
              var statearr_16519 = [null, null, null, null, null, null, null, null];
              statearr_16519[0] = vdom_signals$dom$render_BANG__$_state_machine__13595__auto__;
              statearr_16519[1] = 1;
              return statearr_16519;
            };
            var vdom_signals$dom$render_BANG__$_state_machine__13595__auto____1 = function(state_16511) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_16511);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e16520) {
                    if (e16520 instanceof Object) {
                      var ex__13598__auto__ = e16520;
                      var statearr_16521_16525 = state_16511;
                      statearr_16521_16525[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16511);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16520;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16526 = state_16511;
                  state_16511 = G__16526;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            vdom_signals$dom$render_BANG__$_state_machine__13595__auto__ = function(state_16511) {
              switch(arguments.length) {
                case 0:
                  return vdom_signals$dom$render_BANG__$_state_machine__13595__auto____0.call(this);
                case 1:
                  return vdom_signals$dom$render_BANG__$_state_machine__13595__auto____1.call(this, state_16511);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            vdom_signals$dom$render_BANG__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = vdom_signals$dom$render_BANG__$_state_machine__13595__auto____0;
            vdom_signals$dom$render_BANG__$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = vdom_signals$dom$render_BANG__$_state_machine__13595__auto____1;
            return vdom_signals$dom$render_BANG__$_state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto__, render);
      }();
      var state__13708__auto__ = function() {
        var statearr_16522 = f__13707__auto__.call(null);
        statearr_16522[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto__;
        return statearr_16522;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto__, render));
  return c__13706__auto__;
};
goog.provide("vdom_signals.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("vdom_signals.dom");
cljs.core.enable_console_print_BANG_.call(null);
vdom_signals.core.animation_frames = function vdom_signals$core$animation_frames() {
  var ch = cljs.core.async.chan.call(null);
  vdom_signals.dom.animate.call(null, function(ch) {
    return function vdom_signals$core$animation_frames_$_tick(t) {
      cljs.core.async.put_BANG_.call(null, ch, t);
      return vdom_signals.dom.animate.call(null, vdom_signals$core$animation_frames_$_tick);
    };
  }(ch));
  return ch;
};
vdom_signals.core.sample_on = function vdom_signals$core$sample_on(sample_ch, value_ch) {
  var ch = cljs.core.async.chan.call(null);
  var c__13706__auto___16577 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___16577, ch) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___16577, ch) {
          return function(state_16564) {
            var state_val_16565 = state_16564[1];
            if (state_val_16565 === 1) {
              var state_16564__$1 = state_16564;
              var statearr_16566_16578 = state_16564__$1;
              statearr_16566_16578[2] = null;
              statearr_16566_16578[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16565 === 2) {
                var state_16564__$1 = state_16564;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16564__$1, 4, sample_ch);
              } else {
                if (state_val_16565 === 3) {
                  var inst_16562 = state_16564[2];
                  var state_16564__$1 = state_16564;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16564__$1, inst_16562);
                } else {
                  if (state_val_16565 === 4) {
                    var inst_16555 = state_16564[2];
                    var state_16564__$1 = function() {
                      var statearr_16567 = state_16564;
                      statearr_16567[7] = inst_16555;
                      return statearr_16567;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16564__$1, 5, value_ch);
                  } else {
                    if (state_val_16565 === 5) {
                      var inst_16557 = state_16564[2];
                      var state_16564__$1 = state_16564;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16564__$1, 6, ch, inst_16557);
                    } else {
                      if (state_val_16565 === 6) {
                        var inst_16559 = state_16564[2];
                        var state_16564__$1 = function() {
                          var statearr_16568 = state_16564;
                          statearr_16568[8] = inst_16559;
                          return statearr_16568;
                        }();
                        var statearr_16569_16579 = state_16564__$1;
                        statearr_16569_16579[2] = null;
                        statearr_16569_16579[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___16577, ch);
        return function(switch__13594__auto__, c__13706__auto___16577, ch) {
          return function() {
            var vdom_signals$core$sample_on_$_state_machine__13595__auto__ = null;
            var vdom_signals$core$sample_on_$_state_machine__13595__auto____0 = function() {
              var statearr_16573 = [null, null, null, null, null, null, null, null, null];
              statearr_16573[0] = vdom_signals$core$sample_on_$_state_machine__13595__auto__;
              statearr_16573[1] = 1;
              return statearr_16573;
            };
            var vdom_signals$core$sample_on_$_state_machine__13595__auto____1 = function(state_16564) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_16564);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e16574) {
                    if (e16574 instanceof Object) {
                      var ex__13598__auto__ = e16574;
                      var statearr_16575_16580 = state_16564;
                      statearr_16575_16580[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16564);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16574;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16581 = state_16564;
                  state_16564 = G__16581;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            vdom_signals$core$sample_on_$_state_machine__13595__auto__ = function(state_16564) {
              switch(arguments.length) {
                case 0:
                  return vdom_signals$core$sample_on_$_state_machine__13595__auto____0.call(this);
                case 1:
                  return vdom_signals$core$sample_on_$_state_machine__13595__auto____1.call(this, state_16564);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            vdom_signals$core$sample_on_$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = vdom_signals$core$sample_on_$_state_machine__13595__auto____0;
            vdom_signals$core$sample_on_$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = vdom_signals$core$sample_on_$_state_machine__13595__auto____1;
            return vdom_signals$core$sample_on_$_state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___16577, ch);
      }();
      var state__13708__auto__ = function() {
        var statearr_16576 = f__13707__auto__.call(null);
        statearr_16576[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___16577;
        return statearr_16576;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___16577, ch));
  return ch;
};
vdom_signals.core.map = function vdom_signals$core$map(f, signal) {
  var ch = cljs.core.async.chan.call(null);
  var c__13706__auto___16626 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__13706__auto___16626, ch) {
    return function() {
      var f__13707__auto__ = function() {
        var switch__13594__auto__ = function(c__13706__auto___16626, ch) {
          return function(state_16614) {
            var state_val_16615 = state_16614[1];
            if (state_val_16615 === 1) {
              var state_16614__$1 = state_16614;
              var statearr_16616_16627 = state_16614__$1;
              statearr_16616_16627[2] = null;
              statearr_16616_16627[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16615 === 2) {
                var state_16614__$1 = state_16614;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16614__$1, 4, signal);
              } else {
                if (state_val_16615 === 3) {
                  var inst_16612 = state_16614[2];
                  var state_16614__$1 = state_16614;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16614__$1, inst_16612);
                } else {
                  if (state_val_16615 === 4) {
                    var inst_16606 = state_16614[2];
                    var inst_16607 = f.call(null, inst_16606);
                    var state_16614__$1 = state_16614;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16614__$1, 5, ch, inst_16607);
                  } else {
                    if (state_val_16615 === 5) {
                      var inst_16609 = state_16614[2];
                      var state_16614__$1 = function() {
                        var statearr_16617 = state_16614;
                        statearr_16617[7] = inst_16609;
                        return statearr_16617;
                      }();
                      var statearr_16618_16628 = state_16614__$1;
                      statearr_16618_16628[2] = null;
                      statearr_16618_16628[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__13706__auto___16626, ch);
        return function(switch__13594__auto__, c__13706__auto___16626, ch) {
          return function() {
            var vdom_signals$core$map_$_state_machine__13595__auto__ = null;
            var vdom_signals$core$map_$_state_machine__13595__auto____0 = function() {
              var statearr_16622 = [null, null, null, null, null, null, null, null];
              statearr_16622[0] = vdom_signals$core$map_$_state_machine__13595__auto__;
              statearr_16622[1] = 1;
              return statearr_16622;
            };
            var vdom_signals$core$map_$_state_machine__13595__auto____1 = function(state_16614) {
              while (true) {
                var ret_value__13596__auto__ = function() {
                  try {
                    while (true) {
                      var result__13597__auto__ = switch__13594__auto__.call(null, state_16614);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13597__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__13597__auto__;
                      }
                      break;
                    }
                  } catch (e16623) {
                    if (e16623 instanceof Object) {
                      var ex__13598__auto__ = e16623;
                      var statearr_16624_16629 = state_16614;
                      statearr_16624_16629[5] = ex__13598__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16614);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16623;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13596__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16630 = state_16614;
                  state_16614 = G__16630;
                  continue;
                } else {
                  return ret_value__13596__auto__;
                }
                break;
              }
            };
            vdom_signals$core$map_$_state_machine__13595__auto__ = function(state_16614) {
              switch(arguments.length) {
                case 0:
                  return vdom_signals$core$map_$_state_machine__13595__auto____0.call(this);
                case 1:
                  return vdom_signals$core$map_$_state_machine__13595__auto____1.call(this, state_16614);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            vdom_signals$core$map_$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$0 = vdom_signals$core$map_$_state_machine__13595__auto____0;
            vdom_signals$core$map_$_state_machine__13595__auto__.cljs$core$IFn$_invoke$arity$1 = vdom_signals$core$map_$_state_machine__13595__auto____1;
            return vdom_signals$core$map_$_state_machine__13595__auto__;
          }();
        }(switch__13594__auto__, c__13706__auto___16626, ch);
      }();
      var state__13708__auto__ = function() {
        var statearr_16625 = f__13707__auto__.call(null);
        statearr_16625[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13706__auto___16626;
        return statearr_16625;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13708__auto__);
    };
  }(c__13706__auto___16626, ch));
  return ch;
};
vdom_signals.dom.render_BANG_.call(null, vdom_signals.core.map.call(null, function(t) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1057191632), cljs.core.PersistentArrayMap.EMPTY, [cljs.core.str("hello!:Wooo!OooWOo "), cljs.core.str(t)].join("")], null);
}, vdom_signals.core.animation_frames.call(null)), document.getElementById("app"));
goog.provide("clojure.test.check.rose_tree");
goog.require("cljs.core");
goog.require("cljs.core");
clojure.test.check.rose_tree.RoseTree = function(root, children) {
  this.root = root;
  this.children = children;
  this.cljs$lang$protocol_mask$partition0$ = 16;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
clojure.test.check.rose_tree.RoseTree.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, i) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core._EQ_.call(null, i, 0)) {
    return self__.root;
  } else {
    if (cljs.core._EQ_.call(null, i, 1)) {
      return self__.children;
    } else {
      throw new Error("Index out of bounds in rose tree");
    }
  }
};
clojure.test.check.rose_tree.RoseTree.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, i, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core._EQ_.call(null, i, 0)) {
    return self__.root;
  } else {
    if (cljs.core._EQ_.call(null, i, 1)) {
      return self__.children;
    } else {
      return not_found;
    }
  }
};
clojure.test.check.rose_tree.RoseTree.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "children", "children", 699969545, null)], null);
};
clojure.test.check.rose_tree.RoseTree.cljs$lang$type = true;
clojure.test.check.rose_tree.RoseTree.cljs$lang$ctorStr = "clojure.test.check.rose-tree/RoseTree";
clojure.test.check.rose_tree.RoseTree.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write.call(null, writer__5267__auto__, "clojure.test.check.rose-tree/RoseTree");
};
clojure.test.check.rose_tree.__GT_RoseTree = function clojure$test$check$rose_tree$__GT_RoseTree(root, children) {
  return new clojure.test.check.rose_tree.RoseTree(root, children);
};
clojure.test.check.rose_tree.root = function clojure$test$check$rose_tree$root(rose) {
  return rose.root;
};
clojure.test.check.rose_tree.children = function clojure$test$check$rose_tree$children(rose) {
  return rose.children;
};
clojure.test.check.rose_tree.make_rose = function clojure$test$check$rose_tree$make_rose(root, children) {
  return new clojure.test.check.rose_tree.RoseTree(root, children);
};
clojure.test.check.rose_tree.exclude_nth = function clojure$test$check$rose_tree$exclude_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (n === 0) {
        return cljs.core.rest.call(null, coll);
      } else {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), clojure$test$check$rose_tree$exclude_nth.call(null, n - 1, cljs.core.rest.call(null, s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
clojure.test.check.rose_tree.join = function clojure$test$check$rose_tree$join(rose) {
  var outer_root = clojure.test.check.rose_tree.root.call(null, rose);
  var outer_children = clojure.test.check.rose_tree.children.call(null, rose);
  var inner_root = clojure.test.check.rose_tree.root.call(null, outer_root);
  var inner_children = clojure.test.check.rose_tree.children.call(null, outer_root);
  return clojure.test.check.rose_tree.make_rose.call(null, inner_root, cljs.core.concat.call(null, cljs.core.map.call(null, clojure$test$check$rose_tree$join, outer_children), inner_children));
};
clojure.test.check.rose_tree.pure = function clojure$test$check$rose_tree$pure(x) {
  return clojure.test.check.rose_tree.make_rose.call(null, x, cljs.core.PersistentVector.EMPTY);
};
clojure.test.check.rose_tree.fmap = function clojure$test$check$rose_tree$fmap(f, rose) {
  return clojure.test.check.rose_tree.make_rose.call(null, f.call(null, clojure.test.check.rose_tree.root.call(null, rose)), cljs.core.map.call(null, function(p1__9687_SHARP_) {
    return clojure$test$check$rose_tree$fmap.call(null, f, p1__9687_SHARP_);
  }, clojure.test.check.rose_tree.children.call(null, rose)));
};
clojure.test.check.rose_tree.bind = function clojure$test$check$rose_tree$bind(m, k) {
  return clojure.test.check.rose_tree.join.call(null, clojure.test.check.rose_tree.fmap.call(null, k, m));
};
clojure.test.check.rose_tree.filter = function clojure$test$check$rose_tree$filter(pred, rose) {
  return clojure.test.check.rose_tree.make_rose.call(null, clojure.test.check.rose_tree.root.call(null, rose), cljs.core.map.call(null, function(p1__9688_SHARP_) {
    return clojure$test$check$rose_tree$filter.call(null, pred, p1__9688_SHARP_);
  }, cljs.core.filter.call(null, function(p1__9689_SHARP_) {
    return pred.call(null, clojure.test.check.rose_tree.root.call(null, p1__9689_SHARP_));
  }, clojure.test.check.rose_tree.children.call(null, rose))));
};
clojure.test.check.rose_tree.permutations = function clojure$test$check$rose_tree$permutations(roses) {
  var iter__5440__auto__ = function clojure$test$check$rose_tree$permutations_$_iter__9698(s__9699) {
    return new cljs.core.LazySeq(null, function() {
      var s__9699__$1 = s__9699;
      while (true) {
        var temp__4425__auto__ = cljs.core.seq.call(null, s__9699__$1);
        if (temp__4425__auto__) {
          var xs__4977__auto__ = temp__4425__auto__;
          var vec__9705 = cljs.core.first.call(null, xs__4977__auto__);
          var rose = cljs.core.nth.call(null, vec__9705, 0, null);
          var index = cljs.core.nth.call(null, vec__9705, 1, null);
          var iterys__5436__auto__ = function(s__9699__$1, vec__9705, rose, index, xs__4977__auto__, temp__4425__auto__) {
            return function clojure$test$check$rose_tree$permutations_$_iter__9698_$_iter__9700(s__9701) {
              return new cljs.core.LazySeq(null, function(s__9699__$1, vec__9705, rose, index, xs__4977__auto__, temp__4425__auto__) {
                return function() {
                  var s__9701__$1 = s__9701;
                  while (true) {
                    var temp__4425__auto____$1 = cljs.core.seq.call(null, s__9701__$1);
                    if (temp__4425__auto____$1) {
                      var s__9701__$2 = temp__4425__auto____$1;
                      if (cljs.core.chunked_seq_QMARK_.call(null, s__9701__$2)) {
                        var c__5438__auto__ = cljs.core.chunk_first.call(null, s__9701__$2);
                        var size__5439__auto__ = cljs.core.count.call(null, c__5438__auto__);
                        var b__9703 = cljs.core.chunk_buffer.call(null, size__5439__auto__);
                        if (function() {
                          var i__9702 = 0;
                          while (true) {
                            if (i__9702 < size__5439__auto__) {
                              var child = cljs.core._nth.call(null, c__5438__auto__, i__9702);
                              cljs.core.chunk_append.call(null, b__9703, cljs.core.assoc.call(null, roses, index, child));
                              var G__9706 = i__9702 + 1;
                              i__9702 = G__9706;
                              continue;
                            } else {
                              return true;
                            }
                            break;
                          }
                        }()) {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9703), clojure$test$check$rose_tree$permutations_$_iter__9698_$_iter__9700.call(null, cljs.core.chunk_rest.call(null, s__9701__$2)));
                        } else {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9703), null);
                        }
                      } else {
                        var child = cljs.core.first.call(null, s__9701__$2);
                        return cljs.core.cons.call(null, cljs.core.assoc.call(null, roses, index, child), clojure$test$check$rose_tree$permutations_$_iter__9698_$_iter__9700.call(null, cljs.core.rest.call(null, s__9701__$2)));
                      }
                    } else {
                      return null;
                    }
                    break;
                  }
                };
              }(s__9699__$1, vec__9705, rose, index, xs__4977__auto__, temp__4425__auto__), null, null);
            };
          }(s__9699__$1, vec__9705, rose, index, xs__4977__auto__, temp__4425__auto__);
          var fs__5437__auto__ = cljs.core.seq.call(null, iterys__5436__auto__.call(null, clojure.test.check.rose_tree.children.call(null, rose)));
          if (fs__5437__auto__) {
            return cljs.core.concat.call(null, fs__5437__auto__, clojure$test$check$rose_tree$permutations_$_iter__9698.call(null, cljs.core.rest.call(null, s__9699__$1)));
          } else {
            var G__9707 = cljs.core.rest.call(null, s__9699__$1);
            s__9699__$1 = G__9707;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    }, null, null);
  };
  return iter__5440__auto__.call(null, cljs.core.map.call(null, cljs.core.vector, roses, cljs.core.range.call(null)));
};
clojure.test.check.rose_tree.zip = function clojure$test$check$rose_tree$zip(f, roses) {
  return clojure.test.check.rose_tree.make_rose.call(null, cljs.core.apply.call(null, f, cljs.core.map.call(null, clojure.test.check.rose_tree.root, roses)), cljs.core.map.call(null, function(p1__9708_SHARP_) {
    return clojure$test$check$rose_tree$zip.call(null, f, p1__9708_SHARP_);
  }, clojure.test.check.rose_tree.permutations.call(null, roses)));
};
clojure.test.check.rose_tree.remove = function clojure$test$check$rose_tree$remove(roses) {
  return cljs.core.concat.call(null, cljs.core.map_indexed.call(null, function(index, _) {
    return clojure.test.check.rose_tree.exclude_nth.call(null, index, roses);
  }, roses), clojure.test.check.rose_tree.permutations.call(null, cljs.core.vec.call(null, roses)));
};
clojure.test.check.rose_tree.shrink = function clojure$test$check$rose_tree$shrink(f, roses) {
  if (cljs.core.seq.call(null, roses)) {
    return clojure.test.check.rose_tree.make_rose.call(null, cljs.core.apply.call(null, f, cljs.core.map.call(null, clojure.test.check.rose_tree.root, roses)), cljs.core.map.call(null, function(p1__9709_SHARP_) {
      return clojure$test$check$rose_tree$shrink.call(null, f, p1__9709_SHARP_);
    }, clojure.test.check.rose_tree.remove.call(null, roses)));
  } else {
    return clojure.test.check.rose_tree.make_rose.call(null, f.call(null), cljs.core.PersistentVector.EMPTY);
  }
};
clojure.test.check.rose_tree.collapse = function clojure$test$check$rose_tree$collapse(rose) {
  return clojure.test.check.rose_tree.make_rose.call(null, clojure.test.check.rose_tree.root.call(null, rose), function() {
    var the_children = clojure.test.check.rose_tree.children.call(null, rose);
    return cljs.core.concat.call(null, cljs.core.map.call(null, clojure$test$check$rose_tree$collapse, the_children), cljs.core.map.call(null, clojure$test$check$rose_tree$collapse, cljs.core.mapcat.call(null, clojure.test.check.rose_tree.children, the_children)));
  }());
};
clojure.test.check.rose_tree.make_stack = function clojure$test$check$rose_tree$make_stack(children, stack) {
  var temp__4423__auto__ = cljs.core.seq.call(null, children);
  if (temp__4423__auto__) {
    var s = temp__4423__auto__;
    return cljs.core.cons.call(null, children, stack);
  } else {
    return stack;
  }
};
clojure.test.check.rose_tree.seq = function clojure$test$check$rose_tree$seq(rose) {
  var helper = function clojure$test$check$rose_tree$seq_$_helper(rose__$1, seen, stack) {
    var node = clojure.test.check.rose_tree.root.call(null, rose__$1);
    var the_children = clojure.test.check.rose_tree.children.call(null, rose__$1);
    return new cljs.core.LazySeq(null, function(node, the_children) {
      return function() {
        if (cljs.core.not.call(null, seen.call(null, node))) {
          return cljs.core.cons.call(null, node, cljs.core.seq.call(null, the_children) ? clojure$test$check$rose_tree$seq_$_helper.call(null, cljs.core.first.call(null, the_children), cljs.core.conj.call(null, seen, node), clojure.test.check.rose_tree.make_stack.call(null, cljs.core.rest.call(null, the_children), stack)) : function() {
            var temp__4425__auto__ = cljs.core.seq.call(null, stack);
            if (temp__4425__auto__) {
              var s = temp__4425__auto__;
              var f = cljs.core.ffirst.call(null, s);
              var r = cljs.core.rest.call(null, cljs.core.first.call(null, s));
              return clojure$test$check$rose_tree$seq_$_helper.call(null, f, cljs.core.conj.call(null, seen, node), clojure.test.check.rose_tree.make_stack.call(null, r, cljs.core.rest.call(null, s)));
            } else {
              return null;
            }
          }());
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, stack);
          if (temp__4425__auto__) {
            var s = temp__4425__auto__;
            var f = cljs.core.ffirst.call(null, s);
            var r = cljs.core.rest.call(null, cljs.core.first.call(null, s));
            return clojure$test$check$rose_tree$seq_$_helper.call(null, f, seen, clojure.test.check.rose_tree.make_stack.call(null, r, cljs.core.rest.call(null, s)));
          } else {
            return null;
          }
        }
      };
    }(node, the_children), null, null);
  };
  return helper.call(null, rose, cljs.core.PersistentHashSet.EMPTY, cljs.core.List.EMPTY);
};
goog.provide("clojure.test.check.random.longs.bit_count_impl");
goog.require("cljs.core");
clojure.test.check.random.longs.bit_count_impl.lookup = function() {
  var arr = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
  null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
  null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
  null, null, null, null, null, null];
  arr[0] = 0;
  var n__5571__auto___9712 = 256;
  var i_9713 = 0;
  while (true) {
    if (i_9713 < n__5571__auto___9712) {
      arr[i_9713] = arr[i_9713 >> 1] + (i_9713 & 1);
      var G__9714 = i_9713 + 1;
      i_9713 = G__9714;
      continue;
    } else {
    }
    break;
  }
  return arr;
}();
clojure.test.check.random.longs.bit_count_impl.bit_count = function clojure$test$check$random$longs$bit_count_impl$bit_count(x) {
  var low = x.low_;
  var high = x.high_;
  return clojure.test.check.random.longs.bit_count_impl.lookup[low & 255] + clojure.test.check.random.longs.bit_count_impl.lookup[low >> 8 & 255] + clojure.test.check.random.longs.bit_count_impl.lookup[low >> 16 & 255] + clojure.test.check.random.longs.bit_count_impl.lookup[low >> 24 & 255] + clojure.test.check.random.longs.bit_count_impl.lookup[high & 255] + clojure.test.check.random.longs.bit_count_impl.lookup[high >> 8 & 255] + clojure.test.check.random.longs.bit_count_impl.lookup[high >> 16 & 
  255] + clojure.test.check.random.longs.bit_count_impl.lookup[high >> 24 & 255];
};
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.valueCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.getZero();
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.getMinValue();
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.getMaxValue();
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.getZero();
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.getTwoPwr24DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.getZero = function() {
  var idZero = goog.math.Long.ValueCacheId_.ZERO;
  if (!goog.math.Long.valueCache_[idZero]) {
    goog.math.Long.valueCache_[idZero] = goog.math.Long.fromInt(0);
  }
  return goog.math.Long.valueCache_[idZero];
};
goog.math.Long.getOne = function() {
  var idOne = goog.math.Long.ValueCacheId_.ONE;
  if (!goog.math.Long.valueCache_[idOne]) {
    goog.math.Long.valueCache_[idOne] = goog.math.Long.fromInt(1);
  }
  return goog.math.Long.valueCache_[idOne];
};
goog.math.Long.getNegOne = function() {
  var idNegOne = goog.math.Long.ValueCacheId_.NEG_ONE;
  if (!goog.math.Long.valueCache_[idNegOne]) {
    goog.math.Long.valueCache_[idNegOne] = goog.math.Long.fromInt(-1);
  }
  return goog.math.Long.valueCache_[idNegOne];
};
goog.math.Long.getMaxValue = function() {
  var idMaxValue = goog.math.Long.ValueCacheId_.MAX_VALUE;
  if (!goog.math.Long.valueCache_[idMaxValue]) {
    goog.math.Long.valueCache_[idMaxValue] = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
  }
  return goog.math.Long.valueCache_[idMaxValue];
};
goog.math.Long.getMinValue = function() {
  var idMinValue = goog.math.Long.ValueCacheId_.MIN_VALUE;
  if (!goog.math.Long.valueCache_[idMinValue]) {
    goog.math.Long.valueCache_[idMinValue] = goog.math.Long.fromBits(0, 2147483648 | 0);
  }
  return goog.math.Long.valueCache_[idMinValue];
};
goog.math.Long.getTwoPwr24 = function() {
  var idTwoPwr24 = goog.math.Long.ValueCacheId_.TWO_PWR_24;
  if (!goog.math.Long.valueCache_[idTwoPwr24]) {
    goog.math.Long.valueCache_[idTwoPwr24] = goog.math.Long.fromInt(1 << 24);
  }
  return goog.math.Long.valueCache_[idTwoPwr24];
};
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.getMinValue())) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.getMinValue())) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return (this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return -1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return -1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.getMinValue())) {
    return goog.math.Long.getMinValue();
  } else {
    return this.not().add(goog.math.Long.getOne());
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.getZero();
  } else {
    if (other.isZero()) {
      return goog.math.Long.getZero();
    }
  }
  if (this.equals(goog.math.Long.getMinValue())) {
    return other.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();
  } else {
    if (other.equals(goog.math.Long.getMinValue())) {
      return this.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.getTwoPwr24()) && other.lessThan(goog.math.Long.getTwoPwr24())) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.getZero();
    }
  }
  if (this.equals(goog.math.Long.getMinValue())) {
    if (other.equals(goog.math.Long.getOne()) || other.equals(goog.math.Long.getNegOne())) {
      return goog.math.Long.getMinValue();
    } else {
      if (other.equals(goog.math.Long.getMinValue())) {
        return goog.math.Long.getOne();
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.getZero())) {
          return other.isNegative() ? goog.math.Long.getOne() : goog.math.Long.getNegOne();
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.getMinValue())) {
      return goog.math.Long.getZero();
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.getZero();
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.getOne();
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.math.Long.ValueCacheId_ = {MAX_VALUE:1, MIN_VALUE:2, ZERO:3, ONE:4, NEG_ONE:5, TWO_PWR_24:6};
goog.provide("clojure.test.check.random.longs");
goog.require("cljs.core");
goog.require("clojure.test.check.random.longs.bit_count_impl");
goog.require("goog.math.Long");
clojure.test.check.random.longs.unsigned_bit_shift_right = function clojure$test$check$random$longs$unsigned_bit_shift_right(x, n) {
  return x.shiftRightUnsigned(n);
};
clojure.test.check.random.longs._PLUS_ = function clojure$test$check$random$longs$_PLUS_(x, y) {
  return x.add(y);
};
clojure.test.check.random.longs._STAR_ = function clojure$test$check$random$longs$_STAR_(x, y) {
  return x.multiply(y);
};
clojure.test.check.random.longs.bit_xor = function clojure$test$check$random$longs$bit_xor(x, y) {
  return x.xor(y);
};
clojure.test.check.random.longs.bit_or = function clojure$test$check$random$longs$bit_or(x, y) {
  return x.or(y);
};
clojure.test.check.random.longs.from_string = function clojure$test$check$random$longs$from_string(s, radix) {
  return goog.math.Long.fromString(s, radix);
};
clojure.test.check.random.longs.from_number = function clojure$test$check$random$longs$from_number(x) {
  return goog.math.Long.fromNumber(x);
};
clojure.test.check.random.longs.__GT_long = function clojure$test$check$random$longs$__GT_long(x) {
  if (typeof x === "number") {
    return goog.math.Long.fromNumber(x);
  } else {
    if (x instanceof goog.math.Long) {
      return x;
    } else {
      return null;
    }
  }
};
clojure.test.check.random.longs.ONE = goog.math.Long.getOne();
clojure.test.check.random.longs.bit_count = clojure.test.check.random.longs.bit_count_impl.bit_count;
goog.provide("clojure.test.check.random.doubles");
goog.require("cljs.core");
goog.require("clojure.test.check.random.longs");
clojure.test.check.random.doubles.double_unit = function() {
  var i = 53;
  var x = 1;
  while (true) {
    if (i === 0) {
      return x;
    } else {
      var G__9719 = i - 1;
      var G__9720 = x / 2;
      i = G__9719;
      x = G__9720;
      continue;
    }
    break;
  }
}();
clojure.test.check.random.doubles.big_double_unit = clojure.test.check.random.doubles.double_unit * 4294967296;
clojure.test.check.random.doubles.rand_long__GT_rand_double = function clojure$test$check$random$doubles$rand_long__GT_rand_double(long$) {
  var x = clojure.test.check.random.longs.unsigned_bit_shift_right.call(null, long$, 11);
  var low_bits = x.getLowBitsUnsigned();
  var high_bits = x.getHighBits();
  return clojure.test.check.random.doubles.double_unit * low_bits + clojure.test.check.random.doubles.big_double_unit * high_bits;
};
goog.provide("clojure.test.check.random");
goog.require("cljs.core");
goog.require("clojure.test.check.random.doubles");
goog.require("clojure.test.check.random.longs");
clojure.test.check.random.IRandom = function() {
};
clojure.test.check.random.rand_long = function clojure$test$check$random$rand_long(rng) {
  if (!(rng == null) && !(rng.clojure$test$check$random$IRandom$rand_long$arity$1 == null)) {
    return rng.clojure$test$check$random$IRandom$rand_long$arity$1(rng);
  } else {
    var x__5323__auto__ = rng == null ? null : rng;
    var m__5324__auto__ = clojure.test.check.random.rand_long[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, rng);
    } else {
      var m__5324__auto____$1 = clojure.test.check.random.rand_long["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, rng);
      } else {
        throw cljs.core.missing_protocol.call(null, "IRandom.rand-long", rng);
      }
    }
  }
};
clojure.test.check.random.rand_double = function clojure$test$check$random$rand_double(rng) {
  if (!(rng == null) && !(rng.clojure$test$check$random$IRandom$rand_double$arity$1 == null)) {
    return rng.clojure$test$check$random$IRandom$rand_double$arity$1(rng);
  } else {
    var x__5323__auto__ = rng == null ? null : rng;
    var m__5324__auto__ = clojure.test.check.random.rand_double[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, rng);
    } else {
      var m__5324__auto____$1 = clojure.test.check.random.rand_double["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, rng);
      } else {
        throw cljs.core.missing_protocol.call(null, "IRandom.rand-double", rng);
      }
    }
  }
};
clojure.test.check.random.split = function clojure$test$check$random$split(rng) {
  if (!(rng == null) && !(rng.clojure$test$check$random$IRandom$split$arity$1 == null)) {
    return rng.clojure$test$check$random$IRandom$split$arity$1(rng);
  } else {
    var x__5323__auto__ = rng == null ? null : rng;
    var m__5324__auto__ = clojure.test.check.random.split[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, rng);
    } else {
      var m__5324__auto____$1 = clojure.test.check.random.split["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, rng);
      } else {
        throw cljs.core.missing_protocol.call(null, "IRandom.split", rng);
      }
    }
  }
};
clojure.test.check.random.split_n = function clojure$test$check$random$split_n(rng, n) {
  if (!(rng == null) && !(rng.clojure$test$check$random$IRandom$split_n$arity$2 == null)) {
    return rng.clojure$test$check$random$IRandom$split_n$arity$2(rng, n);
  } else {
    var x__5323__auto__ = rng == null ? null : rng;
    var m__5324__auto__ = clojure.test.check.random.split_n[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, rng, n);
    } else {
      var m__5324__auto____$1 = clojure.test.check.random.split_n["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, rng, n);
      } else {
        throw cljs.core.missing_protocol.call(null, "IRandom.split-n", rng);
      }
    }
  }
};
clojure.test.check.random.hex_long = function clojure$test$check$random$hex_long(s) {
  return clojure.test.check.random.longs.from_string.call(null, s, 16);
};
clojure.test.check.random.bxoubsr = function clojure$test$check$random$bxoubsr(x, n) {
  return clojure.test.check.random.longs.bit_xor.call(null, clojure.test.check.random.longs.unsigned_bit_shift_right.call(null, x, n), x);
};
clojure.test.check.random.mix_64_const_1 = clojure.test.check.random.hex_long.call(null, "bf58476d1ce4e5b9");
clojure.test.check.random.mix_64_const_2 = clojure.test.check.random.hex_long.call(null, "94d049bb133111eb");
clojure.test.check.random.mix_64 = function clojure$test$check$random$mix_64(n) {
  return clojure.test.check.random.bxoubsr.call(null, clojure.test.check.random.longs._STAR_.call(null, clojure.test.check.random.bxoubsr.call(null, clojure.test.check.random.longs._STAR_.call(null, clojure.test.check.random.bxoubsr.call(null, n, 30), clojure.test.check.random.mix_64_const_1), 27), clojure.test.check.random.mix_64_const_2), 31);
};
clojure.test.check.random.mix_gamma_const_1 = clojure.test.check.random.hex_long.call(null, "ff51afd7ed558ccd");
clojure.test.check.random.mix_gamma_const_2 = clojure.test.check.random.hex_long.call(null, "c4ceb9fe1a85ec53");
clojure.test.check.random.mix_gamma_const_3 = clojure.test.check.random.hex_long.call(null, "aaaaaaaaaaaaaaaa");
clojure.test.check.random.mix_gamma = function clojure$test$check$random$mix_gamma(n) {
  var z = clojure.test.check.random.longs.bit_or.call(null, clojure.test.check.random.bxoubsr.call(null, clojure.test.check.random.longs._STAR_.call(null, clojure.test.check.random.bxoubsr.call(null, clojure.test.check.random.longs._STAR_.call(null, clojure.test.check.random.bxoubsr.call(null, n, 33), clojure.test.check.random.mix_gamma_const_1), 33), clojure.test.check.random.mix_gamma_const_2), 33), clojure.test.check.random.longs.ONE);
  var z__$1 = function() {
    var G__9724 = z;
    var G__9724__$1 = 24 > clojure.test.check.random.longs.bit_count.call(null, clojure.test.check.random.bxoubsr.call(null, z, 1)) ? clojure.test.check.random.longs.bit_xor.call(null, G__9724, clojure.test.check.random.mix_gamma_const_3) : G__9724;
    return G__9724__$1;
  }();
  return z__$1;
};
clojure.test.check.random.JavaUtilSplittableRandom = function(gamma, state) {
  this.gamma = gamma;
  this.state = state;
};
clojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$ = true;
clojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$rand_long$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return clojure.test.check.random.mix_64.call(null, clojure.test.check.random.longs._PLUS_.call(null, self__.state, self__.gamma));
};
clojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$rand_double$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return clojure.test.check.random.doubles.rand_long__GT_rand_double.call(null, clojure.test.check.random.rand_long.call(null, this$__$1));
};
clojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$split$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var state_SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_.call(null, self__.gamma, self__.state);
  var state_SINGLEQUOTE__SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_.call(null, self__.gamma, state_SINGLEQUOTE_);
  var gamma_SINGLEQUOTE_ = clojure.test.check.random.mix_gamma.call(null, state_SINGLEQUOTE__SINGLEQUOTE_);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new clojure.test.check.random.JavaUtilSplittableRandom(self__.gamma, state_SINGLEQUOTE__SINGLEQUOTE_), new clojure.test.check.random.JavaUtilSplittableRandom(gamma_SINGLEQUOTE_, clojure.test.check.random.mix_64.call(null, state_SINGLEQUOTE_))], null);
};
clojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$split_n$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  var G__9725 = n;
  switch(G__9725) {
    case 0:
      return cljs.core.PersistentVector.EMPTY;
      break;
    case 1:
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$__$1], null);
      break;
    default:
      var n_dec = n - 1;
      var state__$1 = self__.state;
      var ret = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
      while (true) {
        if (cljs.core._EQ_.call(null, n_dec, cljs.core.count.call(null, ret))) {
          return cljs.core.persistent_BANG_.call(null, cljs.core.conj_BANG_.call(null, ret, new clojure.test.check.random.JavaUtilSplittableRandom(self__.gamma, state__$1)));
        } else {
          var state_SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_.call(null, self__.gamma, state__$1);
          var state_SINGLEQUOTE__SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_.call(null, self__.gamma, state_SINGLEQUOTE_);
          var gamma_SINGLEQUOTE_ = clojure.test.check.random.mix_gamma.call(null, state_SINGLEQUOTE__SINGLEQUOTE_);
          var new_rng = new clojure.test.check.random.JavaUtilSplittableRandom(gamma_SINGLEQUOTE_, clojure.test.check.random.mix_64.call(null, state_SINGLEQUOTE_));
          var G__9727 = state_SINGLEQUOTE__SINGLEQUOTE_;
          var G__9728 = cljs.core.conj_BANG_.call(null, ret, new_rng);
          state__$1 = G__9727;
          ret = G__9728;
          continue;
        }
        break;
      }
    ;
  }
};
clojure.test.check.random.JavaUtilSplittableRandom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "gamma", "gamma", -770466082, null), new cljs.core.Symbol(null, "state", "state", -348086572, null)], null);
};
clojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$type = true;
clojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$ctorStr = "clojure.test.check.random/JavaUtilSplittableRandom";
clojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
  return cljs.core._write.call(null, writer__5267__auto__, "clojure.test.check.random/JavaUtilSplittableRandom");
};
clojure.test.check.random.__GT_JavaUtilSplittableRandom = function clojure$test$check$random$__GT_JavaUtilSplittableRandom(gamma, state) {
  return new clojure.test.check.random.JavaUtilSplittableRandom(gamma, state);
};
clojure.test.check.random.golden_gamma = clojure.test.check.random.hex_long.call(null, "9e3779b97f4a7c15");
clojure.test.check.random.make_java_util_splittable_random = function clojure$test$check$random$make_java_util_splittable_random(seed) {
  return new clojure.test.check.random.JavaUtilSplittableRandom(clojure.test.check.random.golden_gamma, function() {
    var or__4668__auto__ = clojure.test.check.random.longs.__GT_long.call(null, seed);
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      throw cljs.core.ex_info.call(null, "Bad random seed!", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "seed", "seed", 68613327), seed], null));
    }
  }());
};
clojure.test.check.random.next_rng = function() {
  var a = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "state", "state", -1988618099), clojure.test.check.random.make_java_util_splittable_random.call(null, (new Date).valueOf())], null));
  return function(a) {
    return function() {
      return (new cljs.core.Keyword(null, "returned", "returned", -2020439163)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, a, function(a) {
        return function(p__9729) {
          var map__9730 = p__9729;
          var map__9730__$1 = (!(map__9730 == null) ? map__9730.cljs$lang$protocol_mask$partition0$ & 64 || map__9730.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9730) : map__9730;
          var state = cljs.core.get.call(null, map__9730__$1, new cljs.core.Keyword(null, "state", "state", -1988618099));
          var vec__9732 = clojure.test.check.random.split.call(null, state);
          var r1 = cljs.core.nth.call(null, vec__9732, 0, null);
          var r2 = cljs.core.nth.call(null, vec__9732, 1, null);
          return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "state", "state", -1988618099), r1, new cljs.core.Keyword(null, "returned", "returned", -2020439163), r2], null);
        };
      }(a)));
    };
  }(a);
}();
clojure.test.check.random.make_random = function clojure$test$check$random$make_random(var_args) {
  var args9733 = [];
  var len__5726__auto___9736 = arguments.length;
  var i__5727__auto___9737 = 0;
  while (true) {
    if (i__5727__auto___9737 < len__5726__auto___9736) {
      args9733.push(arguments[i__5727__auto___9737]);
      var G__9738 = i__5727__auto___9737 + 1;
      i__5727__auto___9737 = G__9738;
      continue;
    } else {
    }
    break;
  }
  var G__9735 = args9733.length;
  switch(G__9735) {
    case 0:
      return clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9733.length)].join(""));;
  }
};
clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0 = function() {
  return clojure.test.check.random.next_rng.call(null);
};
clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1 = function(seed) {
  return clojure.test.check.random.make_java_util_splittable_random.call(null, seed);
};
clojure.test.check.random.make_random.cljs$lang$maxFixedArity = 1;
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace_all = function clojure$string$replace_all(s, re, replacement) {
  return s.replace(new RegExp(re.source, "g"), replacement);
};
clojure.string.replace_with = function clojure$string$replace_with(f) {
  return function() {
    var G__9742__delegate = function(args) {
      var matches = cljs.core.drop_last.call(null, 2, args);
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, matches), 1)) {
        return f.call(null, cljs.core.first.call(null, matches));
      } else {
        return f.call(null, cljs.core.vec.call(null, matches));
      }
    };
    var G__9742 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__9743__i = 0, G__9743__a = new Array(arguments.length - 0);
        while (G__9743__i < G__9743__a.length) {
          G__9743__a[G__9743__i] = arguments[G__9743__i + 0];
          ++G__9743__i;
        }
        args = new cljs.core.IndexedSeq(G__9743__a, 0);
      }
      return G__9742__delegate.call(this, args);
    };
    G__9742.cljs$lang$maxFixedArity = 0;
    G__9742.cljs$lang$applyTo = function(arglist__9744) {
      var args = cljs.core.seq(arglist__9744);
      return G__9742__delegate(args);
    };
    G__9742.cljs$core$IFn$_invoke$arity$variadic = G__9742__delegate;
    return G__9742;
  }();
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      if (typeof replacement === "string") {
        return clojure.string.replace_all.call(null, s, match, replacement);
      } else {
        return clojure.string.replace_all.call(null, s, match, clojure.string.replace_with.call(null, replacement));
      }
    } else {
      throw [cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join(var_args) {
  var args9745 = [];
  var len__5726__auto___9748 = arguments.length;
  var i__5727__auto___9749 = 0;
  while (true) {
    if (i__5727__auto___9749 < len__5726__auto___9748) {
      args9745.push(arguments[i__5727__auto___9749]);
      var G__9750 = i__5727__auto___9749 + 1;
      i__5727__auto___9749 = G__9750;
      continue;
    } else {
    }
    break;
  }
  var G__9747 = args9745.length;
  switch(G__9747) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9745.length)].join(""));;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__9752 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var G__9753 = cljs.core.next.call(null, coll__$1);
      sb = G__9752;
      coll__$1 = G__9753;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__9754 = sb;
      var G__9755 = coll__$2;
      sb = G__9754;
      coll__$1 = G__9755;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return [cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if ("" === cljs.core.peek.call(null, v__$1)) {
      var G__9756 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__9756;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (0 === limit) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__9760 = cljs.core._EQ__EQ_;
    var expr__9761 = limit;
    if (cljs.core.truth_(pred__9760.call(null, 1, expr__9761))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__9760.call(null, 2, expr__9761))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split(var_args) {
  var args9763 = [];
  var len__5726__auto___9766 = arguments.length;
  var i__5727__auto___9767 = 0;
  while (true) {
    if (i__5727__auto___9767 < len__5726__auto___9766) {
      args9763.push(arguments[i__5727__auto___9767]);
      var G__9768 = i__5727__auto___9767 + 1;
      i__5727__auto___9767 = G__9768;
      continue;
    } else {
    }
    break;
  }
  var G__9765 = args9763.length;
  switch(G__9765) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9763.length)].join(""));;
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, "/(?:)/" === [cljs.core.str(re)].join("") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (1 === limit__$1) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var m = cljs.core.re_find.call(null, re, s__$1);
        if (!(m == null)) {
          var index = s__$1.indexOf(m);
          var G__9770 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__9771 = limit__$1 - 1;
          var G__9772 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__9770;
          limit__$1 = G__9771;
          parts = G__9772;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if ("\n" === ch || "\r" === ch) {
        var G__9773 = index - 1;
        index = G__9773;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (length === index) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var replacement = cljs.core.get.call(null, cmap, ch);
      if (!(replacement == null)) {
        buffer.append([cljs.core.str(replacement)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__9774 = index + 1;
      index = G__9774;
      continue;
    }
    break;
  }
};
clojure.string.index_of = function clojure$string$index_of(var_args) {
  var args9775 = [];
  var len__5726__auto___9778 = arguments.length;
  var i__5727__auto___9779 = 0;
  while (true) {
    if (i__5727__auto___9779 < len__5726__auto___9778) {
      args9775.push(arguments[i__5727__auto___9779]);
      var G__9780 = i__5727__auto___9779 + 1;
      i__5727__auto___9779 = G__9780;
      continue;
    } else {
    }
    break;
  }
  var G__9777 = args9775.length;
  switch(G__9777) {
    case 2:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9775.length)].join(""));;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.indexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.indexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$lang$maxFixedArity = 3;
clojure.string.last_index_of = function clojure$string$last_index_of(var_args) {
  var args9782 = [];
  var len__5726__auto___9785 = arguments.length;
  var i__5727__auto___9786 = 0;
  while (true) {
    if (i__5727__auto___9786 < len__5726__auto___9785) {
      args9782.push(arguments[i__5727__auto___9786]);
      var G__9787 = i__5727__auto___9786 + 1;
      i__5727__auto___9786 = G__9787;
      continue;
    } else {
    }
    break;
  }
  var G__9784 = args9782.length;
  switch(G__9784) {
    case 2:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9782.length)].join(""));;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.lastIndexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.lastIndexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$lang$maxFixedArity = 3;
clojure.string.starts_with_QMARK_ = function clojure$string$starts_with_QMARK_(s, substr) {
  return goog.string.startsWith(s, substr);
};
clojure.string.ends_with_QMARK_ = function clojure$string$ends_with_QMARK_(s, substr) {
  return goog.string.endsWith(s, substr);
};
clojure.string.includes_QMARK_ = function clojure$string$includes_QMARK_(s, substr) {
  return goog.string.contains(s, substr);
};
goog.provide("clojure.test.check.generators");
goog.require("cljs.core");
goog.require("cljs.core");
goog.require("clojure.test.check.random");
goog.require("clojure.test.check.rose_tree");
goog.require("goog.string");
goog.require("clojure.string");
clojure.test.check.generators.Generator = function(gen, __meta, __extmap, __hash) {
  this.gen = gen;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
clojure.test.check.generators.Generator.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__5282__auto__, k__5283__auto__) {
  var self__ = this;
  var this__5282__auto____$1 = this;
  return cljs.core._lookup.call(null, this__5282__auto____$1, k__5283__auto__, null);
};
clojure.test.check.generators.Generator.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__5284__auto__, k9792, else__5285__auto__) {
  var self__ = this;
  var this__5284__auto____$1 = this;
  var G__9794 = k9792 instanceof cljs.core.Keyword ? k9792.fqn : null;
  switch(G__9794) {
    case "gen":
      return self__.gen;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k9792, else__5285__auto__);
  }
};
clojure.test.check.generators.Generator.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__5296__auto__, writer__5297__auto__, opts__5298__auto__) {
  var self__ = this;
  var this__5296__auto____$1 = this;
  var pr_pair__5299__auto__ = function(this__5296__auto____$1) {
    return function(keyval__5300__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, cljs.core.pr_writer, "", " ", "", opts__5298__auto__, keyval__5300__auto__);
    };
  }(this__5296__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, pr_pair__5299__auto__, "#clojure.test.check.generators.Generator{", ", ", "}", opts__5298__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "gen", "gen", 142575302), self__.gen], null)], null), self__.__extmap));
};
clojure.test.check.generators.Generator.prototype.cljs$core$IIterable$ = true;
clojure.test.check.generators.Generator.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__9791) {
  var self__ = this;
  var G__9791__$1 = this;
  return new cljs.core.RecordIter(0, G__9791__$1, 1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "gen", "gen", 142575302)], null), cljs.core._iterator.call(null, self__.__extmap));
};
clojure.test.check.generators.Generator.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__5280__auto__) {
  var self__ = this;
  var this__5280__auto____$1 = this;
  return self__.__meta;
};
clojure.test.check.generators.Generator.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__5276__auto__) {
  var self__ = this;
  var this__5276__auto____$1 = this;
  return new clojure.test.check.generators.Generator(self__.gen, self__.__meta, self__.__extmap, self__.__hash);
};
clojure.test.check.generators.Generator.prototype.cljs$core$ICounted$_count$arity$1 = function(this__5286__auto__) {
  var self__ = this;
  var this__5286__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
clojure.test.check.generators.Generator.prototype.cljs$core$IHash$_hash$arity$1 = function(this__5277__auto__) {
  var self__ = this;
  var this__5277__auto____$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_imap.call(null, this__5277__auto____$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
clojure.test.check.generators.Generator.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__5278__auto__, other__5279__auto__) {
  var self__ = this;
  var this__5278__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = other__5279__auto__;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = this__5278__auto____$1.constructor === other__5279__auto__.constructor;
      if (and__4656__auto____$1) {
        return cljs.core.equiv_map.call(null, this__5278__auto____$1, other__5279__auto__);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
clojure.test.check.generators.Generator.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__5291__auto__, k__5292__auto__) {
  var self__ = this;
  var this__5291__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "gen", "gen", 142575302), null], null), null), k__5292__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__5291__auto____$1), self__.__meta), k__5292__auto__);
  } else {
    return new clojure.test.check.generators.Generator(self__.gen, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__5292__auto__)), null);
  }
};
clojure.test.check.generators.Generator.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__5289__auto__, k__5290__auto__, G__9791) {
  var self__ = this;
  var this__5289__auto____$1 = this;
  var pred__9795 = cljs.core.keyword_identical_QMARK_;
  var expr__9796 = k__5290__auto__;
  if (cljs.core.truth_(pred__9795.call(null, new cljs.core.Keyword(null, "gen", "gen", 142575302), expr__9796))) {
    return new clojure.test.check.generators.Generator(G__9791, self__.__meta, self__.__extmap, null);
  } else {
    return new clojure.test.check.generators.Generator(self__.gen, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__5290__auto__, G__9791), null);
  }
};
clojure.test.check.generators.Generator.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__5294__auto__) {
  var self__ = this;
  var this__5294__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "gen", "gen", 142575302), self__.gen], null)], null), self__.__extmap));
};
clojure.test.check.generators.Generator.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__5281__auto__, G__9791) {
  var self__ = this;
  var this__5281__auto____$1 = this;
  return new clojure.test.check.generators.Generator(self__.gen, G__9791, self__.__extmap, self__.__hash);
};
clojure.test.check.generators.Generator.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__5287__auto__, entry__5288__auto__) {
  var self__ = this;
  var this__5287__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__5288__auto__)) {
    return cljs.core._assoc.call(null, this__5287__auto____$1, cljs.core._nth.call(null, entry__5288__auto__, 0), cljs.core._nth.call(null, entry__5288__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__5287__auto____$1, entry__5288__auto__);
  }
};
clojure.test.check.generators.Generator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "gen", "gen", 1783106829, null)], null);
};
clojure.test.check.generators.Generator.cljs$lang$type = true;
clojure.test.check.generators.Generator.cljs$lang$ctorPrSeq = function(this__5316__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "clojure.test.check.generators/Generator");
};
clojure.test.check.generators.Generator.cljs$lang$ctorPrWriter = function(this__5316__auto__, writer__5317__auto__) {
  return cljs.core._write.call(null, writer__5317__auto__, "clojure.test.check.generators/Generator");
};
clojure.test.check.generators.__GT_Generator = function clojure$test$check$generators$__GT_Generator(gen) {
  return new clojure.test.check.generators.Generator(gen, null, null, null);
};
clojure.test.check.generators.map__GT_Generator = function clojure$test$check$generators$map__GT_Generator(G__9793) {
  return new clojure.test.check.generators.Generator((new cljs.core.Keyword(null, "gen", "gen", 142575302)).cljs$core$IFn$_invoke$arity$1(G__9793), null, cljs.core.dissoc.call(null, G__9793, new cljs.core.Keyword(null, "gen", "gen", 142575302)), null);
};
clojure.test.check.generators.generator_QMARK_ = function clojure$test$check$generators$generator_QMARK_(x) {
  return x instanceof clojure.test.check.generators.Generator;
};
clojure.test.check.generators.make_gen = function clojure$test$check$generators$make_gen(generator_fn) {
  return new clojure.test.check.generators.Generator(generator_fn, null, null, null);
};
clojure.test.check.generators.call_gen = function clojure$test$check$generators$call_gen(p__9799, rnd, size) {
  var map__9802 = p__9799;
  var map__9802__$1 = (!(map__9802 == null) ? map__9802.cljs$lang$protocol_mask$partition0$ & 64 || map__9802.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9802) : map__9802;
  var generator_fn = cljs.core.get.call(null, map__9802__$1, new cljs.core.Keyword(null, "gen", "gen", 142575302));
  return generator_fn.call(null, rnd, size);
};
clojure.test.check.generators.gen_pure = function clojure$test$check$generators$gen_pure(value) {
  return clojure.test.check.generators.make_gen.call(null, function(rnd, size) {
    return value;
  });
};
clojure.test.check.generators.gen_fmap = function clojure$test$check$generators$gen_fmap(k, p__9804) {
  var map__9807 = p__9804;
  var map__9807__$1 = (!(map__9807 == null) ? map__9807.cljs$lang$protocol_mask$partition0$ & 64 || map__9807.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9807) : map__9807;
  var h = cljs.core.get.call(null, map__9807__$1, new cljs.core.Keyword(null, "gen", "gen", 142575302));
  return clojure.test.check.generators.make_gen.call(null, function(map__9807, map__9807__$1, h) {
    return function(rnd, size) {
      return k.call(null, h.call(null, rnd, size));
    };
  }(map__9807, map__9807__$1, h));
};
clojure.test.check.generators.gen_bind = function clojure$test$check$generators$gen_bind(p__9809, k) {
  var map__9815 = p__9809;
  var map__9815__$1 = (!(map__9815 == null) ? map__9815.cljs$lang$protocol_mask$partition0$ & 64 || map__9815.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9815) : map__9815;
  var h = cljs.core.get.call(null, map__9815__$1, new cljs.core.Keyword(null, "gen", "gen", 142575302));
  return clojure.test.check.generators.make_gen.call(null, function(map__9815, map__9815__$1, h) {
    return function(rnd, size) {
      var vec__9817 = clojure.test.check.random.split.call(null, rnd);
      var r1 = cljs.core.nth.call(null, vec__9817, 0, null);
      var r2 = cljs.core.nth.call(null, vec__9817, 1, null);
      var inner = h.call(null, r1, size);
      var map__9818 = k.call(null, inner);
      var map__9818__$1 = (!(map__9818 == null) ? map__9818.cljs$lang$protocol_mask$partition0$ & 64 || map__9818.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9818) : map__9818;
      var result = cljs.core.get.call(null, map__9818__$1, new cljs.core.Keyword(null, "gen", "gen", 142575302));
      return result.call(null, r2, size);
    };
  }(map__9815, map__9815__$1, h));
};
clojure.test.check.generators.lazy_random_states = function clojure$test$check$generators$lazy_random_states(rr) {
  return new cljs.core.LazySeq(null, function() {
    var vec__9821 = clojure.test.check.random.split.call(null, rr);
    var r1 = cljs.core.nth.call(null, vec__9821, 0, null);
    var r2 = cljs.core.nth.call(null, vec__9821, 1, null);
    return cljs.core.cons.call(null, r1, clojure$test$check$generators$lazy_random_states.call(null, r2));
  }, null, null);
};
clojure.test.check.generators.gen_seq__GT_seq_gen = function clojure$test$check$generators$gen_seq__GT_seq_gen(gens) {
  return clojure.test.check.generators.make_gen.call(null, function(rnd, size) {
    return cljs.core.mapv.call(null, function(p1__9822_SHARP_, p2__9823_SHARP_) {
      return clojure.test.check.generators.call_gen.call(null, p1__9822_SHARP_, p2__9823_SHARP_, size);
    }, gens, clojure.test.check.random.split_n.call(null, rnd, cljs.core.count.call(null, gens)));
  });
};
clojure.test.check.generators.fmap = function clojure$test$check$generators$fmap(f, gen) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Second arg to fmap must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "gen", "gen", 1783106829, null))))].join(""));
  }
  return clojure.test.check.generators.gen_fmap.call(null, function(p1__9824_SHARP_) {
    return clojure.test.check.rose_tree.fmap.call(null, f, p1__9824_SHARP_);
  }, gen);
};
clojure.test.check.generators.return$ = function clojure$test$check$generators$return(value) {
  return clojure.test.check.generators.gen_pure.call(null, clojure.test.check.rose_tree.pure.call(null, value));
};
clojure.test.check.generators.bind_helper = function clojure$test$check$generators$bind_helper(k) {
  return function(rose) {
    return clojure.test.check.generators.gen_fmap.call(null, clojure.test.check.rose_tree.join, clojure.test.check.generators.make_gen.call(null, function(rnd, size) {
      return clojure.test.check.rose_tree.fmap.call(null, function(p1__9825_SHARP_) {
        return clojure.test.check.generators.call_gen.call(null, p1__9825_SHARP_, rnd, size);
      }, clojure.test.check.rose_tree.fmap.call(null, k, rose));
    }));
  };
};
clojure.test.check.generators.bind = function clojure$test$check$generators$bind(generator, k) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, generator))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First arg to bind must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "generator", "generator", 1067569246, null))))].join(""));
  }
  return clojure.test.check.generators.gen_bind.call(null, generator, clojure.test.check.generators.bind_helper.call(null, k));
};
clojure.test.check.generators.make_size_range_seq = function clojure$test$check$generators$make_size_range_seq(max_size) {
  return cljs.core.cycle.call(null, cljs.core.range.call(null, 0, max_size));
};
clojure.test.check.generators.sample_seq = function clojure$test$check$generators$sample_seq(var_args) {
  var args9828 = [];
  var len__5726__auto___9831 = arguments.length;
  var i__5727__auto___9832 = 0;
  while (true) {
    if (i__5727__auto___9832 < len__5726__auto___9831) {
      args9828.push(arguments[i__5727__auto___9832]);
      var G__9833 = i__5727__auto___9832 + 1;
      i__5727__auto___9832 = G__9833;
      continue;
    } else {
    }
    break;
  }
  var G__9830 = args9828.length;
  switch(G__9830) {
    case 1:
      return clojure.test.check.generators.sample_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.test.check.generators.sample_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9828.length)].join(""));;
  }
};
clojure.test.check.generators.sample_seq.cljs$core$IFn$_invoke$arity$1 = function(generator) {
  return clojure.test.check.generators.sample_seq.call(null, generator, 100);
};
clojure.test.check.generators.sample_seq.cljs$core$IFn$_invoke$arity$2 = function(generator, max_size) {
  var r = clojure.test.check.random.make_random.call(null);
  var size_seq = clojure.test.check.generators.make_size_range_seq.call(null, max_size);
  return cljs.core.map.call(null, function(r, size_seq) {
    return function(p1__9826_SHARP_, p2__9827_SHARP_) {
      return clojure.test.check.rose_tree.root.call(null, clojure.test.check.generators.call_gen.call(null, generator, p1__9826_SHARP_, p2__9827_SHARP_));
    };
  }(r, size_seq), clojure.test.check.generators.lazy_random_states.call(null, r), size_seq);
};
clojure.test.check.generators.sample_seq.cljs$lang$maxFixedArity = 2;
clojure.test.check.generators.sample = function clojure$test$check$generators$sample(var_args) {
  var args9835 = [];
  var len__5726__auto___9838 = arguments.length;
  var i__5727__auto___9839 = 0;
  while (true) {
    if (i__5727__auto___9839 < len__5726__auto___9838) {
      args9835.push(arguments[i__5727__auto___9839]);
      var G__9840 = i__5727__auto___9839 + 1;
      i__5727__auto___9839 = G__9840;
      continue;
    } else {
    }
    break;
  }
  var G__9837 = args9835.length;
  switch(G__9837) {
    case 1:
      return clojure.test.check.generators.sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.test.check.generators.sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9835.length)].join(""));;
  }
};
clojure.test.check.generators.sample.cljs$core$IFn$_invoke$arity$1 = function(generator) {
  return clojure.test.check.generators.sample.call(null, generator, 10);
};
clojure.test.check.generators.sample.cljs$core$IFn$_invoke$arity$2 = function(generator, num_samples) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, generator))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First arg to sample must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "generator", "generator", 1067569246, null))))].join(""));
  }
  return cljs.core.take.call(null, num_samples, clojure.test.check.generators.sample_seq.call(null, generator));
};
clojure.test.check.generators.sample.cljs$lang$maxFixedArity = 2;
clojure.test.check.generators.generate = function clojure$test$check$generators$generate(var_args) {
  var args9842 = [];
  var len__5726__auto___9845 = arguments.length;
  var i__5727__auto___9846 = 0;
  while (true) {
    if (i__5727__auto___9846 < len__5726__auto___9845) {
      args9842.push(arguments[i__5727__auto___9846]);
      var G__9847 = i__5727__auto___9846 + 1;
      i__5727__auto___9846 = G__9847;
      continue;
    } else {
    }
    break;
  }
  var G__9844 = args9842.length;
  switch(G__9844) {
    case 1:
      return clojure.test.check.generators.generate.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.test.check.generators.generate.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9842.length)].join(""));;
  }
};
clojure.test.check.generators.generate.cljs$core$IFn$_invoke$arity$1 = function(generator) {
  return clojure.test.check.generators.generate.call(null, generator, 30);
};
clojure.test.check.generators.generate.cljs$core$IFn$_invoke$arity$2 = function(generator, size) {
  var rng = clojure.test.check.random.make_random.call(null);
  return clojure.test.check.rose_tree.root.call(null, clojure.test.check.generators.call_gen.call(null, generator, rng, size));
};
clojure.test.check.generators.generate.cljs$lang$maxFixedArity = 2;
clojure.test.check.generators.halfs = function clojure$test$check$generators$halfs(n) {
  return cljs.core.take_while.call(null, function(p1__9849_SHARP_) {
    return cljs.core.not_EQ_.call(null, 0, p1__9849_SHARP_);
  }, cljs.core.iterate.call(null, function(p1__9850_SHARP_) {
    return cljs.core.quot.call(null, p1__9850_SHARP_, 2);
  }, n));
};
clojure.test.check.generators.shrink_int = function clojure$test$check$generators$shrink_int(integer) {
  return cljs.core.map.call(null, function(p1__9851_SHARP_) {
    return integer - p1__9851_SHARP_;
  }, clojure.test.check.generators.halfs.call(null, integer));
};
clojure.test.check.generators.int_rose_tree = function clojure$test$check$generators$int_rose_tree(value) {
  return clojure.test.check.rose_tree.make_rose.call(null, value, cljs.core.map.call(null, clojure$test$check$generators$int_rose_tree, clojure.test.check.generators.shrink_int.call(null, value)));
};
clojure.test.check.generators.calc_long = function clojure$test$check$generators$calc_long(factor, lower, upper) {
  return cljs.core.long$.call(null, Math.floor(lower + (factor * (1 + upper) - factor * lower)));
};
clojure.test.check.generators.rand_range = function clojure$test$check$generators$rand_range(rnd, lower, upper) {
  if (lower <= upper) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c\x3d", "\x3c\x3d", 1244895369, null), new cljs.core.Symbol(null, "lower", "lower", -1534114948, null), new cljs.core.Symbol(null, "upper", "upper", 1886775433, null))))].join(""));
  }
  return clojure.test.check.generators.calc_long.call(null, clojure.test.check.random.rand_double.call(null, rnd), lower, upper);
};
clojure.test.check.generators.sized = function clojure$test$check$generators$sized(sized_gen) {
  return clojure.test.check.generators.make_gen.call(null, function(rnd, size) {
    var sized_gen__$1 = sized_gen.call(null, size);
    return clojure.test.check.generators.call_gen.call(null, sized_gen__$1, rnd, size);
  });
};
clojure.test.check.generators.resize = function clojure$test$check$generators$resize(n, generator) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, generator))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Second arg to resize must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "generator", "generator", 1067569246, null))))].join(""));
  }
  var map__9854 = generator;
  var map__9854__$1 = (!(map__9854 == null) ? map__9854.cljs$lang$protocol_mask$partition0$ & 64 || map__9854.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9854) : map__9854;
  var gen = cljs.core.get.call(null, map__9854__$1, new cljs.core.Keyword(null, "gen", "gen", 142575302));
  return clojure.test.check.generators.make_gen.call(null, function(map__9854, map__9854__$1, gen) {
    return function(rnd, _size) {
      return gen.call(null, rnd, n);
    };
  }(map__9854, map__9854__$1, gen));
};
clojure.test.check.generators.scale = function clojure$test$check$generators$scale(f, generator) {
  return clojure.test.check.generators.sized.call(null, function(n) {
    return clojure.test.check.generators.resize.call(null, f.call(null, n), generator);
  });
};
clojure.test.check.generators.choose = function clojure$test$check$generators$choose(lower, upper) {
  return clojure.test.check.generators.make_gen.call(null, function(rnd, _size) {
    var value = clojure.test.check.generators.rand_range.call(null, rnd, lower, upper);
    return clojure.test.check.rose_tree.filter.call(null, function(value) {
      return function(p1__9856_SHARP_) {
        return p1__9856_SHARP_ >= lower && p1__9856_SHARP_ <= upper;
      };
    }(value), clojure.test.check.generators.int_rose_tree.call(null, value));
  });
};
clojure.test.check.generators.one_of = function clojure$test$check$generators$one_of(generators) {
  if (cljs.core.every_QMARK_.call(null, clojure.test.check.generators.generator_QMARK_, generators)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Arg to one-of must be a collection of generators"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "every?", "every?", 2083724064, null), new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "generators", "generators", -269612955, null))))].join(""));
  }
  return clojure.test.check.generators.bind.call(null, clojure.test.check.generators.choose.call(null, 0, cljs.core.count.call(null, generators) - 1), function(p1__9857_SHARP_) {
    return cljs.core.nth.call(null, generators, p1__9857_SHARP_);
  });
};
clojure.test.check.generators.pick = function clojure$test$check$generators$pick(p__9858, n) {
  while (true) {
    var vec__9861 = p__9858;
    var h = cljs.core.nth.call(null, vec__9861, 0, null);
    var tail = cljs.core.nthnext.call(null, vec__9861, 1);
    var vec__9862 = h;
    var chance = cljs.core.nth.call(null, vec__9862, 0, null);
    var gen = cljs.core.nth.call(null, vec__9862, 1, null);
    if (n <= chance) {
      return gen;
    } else {
      var G__9863 = tail;
      var G__9864 = n - chance;
      p__9858 = G__9863;
      n = G__9864;
      continue;
    }
    break;
  }
};
clojure.test.check.generators.frequency = function clojure$test$check$generators$frequency(pairs) {
  if (cljs.core.every_QMARK_.call(null, function(p__9868) {
    var vec__9869 = p__9868;
    var x = cljs.core.nth.call(null, vec__9869, 0, null);
    var g = cljs.core.nth.call(null, vec__9869, 1, null);
    var and__4656__auto__ = typeof x === "number";
    if (and__4656__auto__) {
      return clojure.test.check.generators.generator_QMARK_.call(null, g);
    } else {
      return and__4656__auto__;
    }
  }, pairs)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Arg to frequency must be a list of [num generator] pairs"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "every?", "every?", 2083724064, null), cljs.core.list(new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [new cljs.core.Symbol(null, "x", "x", -555367584, null), new cljs.core.Symbol(null, "g", "g", -916345864, null)], null)], null), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "g", "g", -916345864, null)))), new cljs.core.Symbol(null, 
    "pairs", "pairs", -2039825990, null))))].join(""));
  }
  var total = cljs.core.apply.call(null, cljs.core._PLUS_, cljs.core.map.call(null, cljs.core.first, pairs));
  return clojure.test.check.generators.gen_bind.call(null, clojure.test.check.generators.choose.call(null, 1, total), function(total) {
    return function(p1__9865_SHARP_) {
      return clojure.test.check.generators.pick.call(null, pairs, clojure.test.check.rose_tree.root.call(null, p1__9865_SHARP_));
    };
  }(total));
};
clojure.test.check.generators.elements = function clojure$test$check$generators$elements(coll) {
  if (cljs.core.seq.call(null, coll)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("elements cannot be called with an empty collection"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "seq", "seq", -177272256, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null))))].join(""));
  }
  var v = cljs.core.vec.call(null, coll);
  return clojure.test.check.generators.gen_bind.call(null, clojure.test.check.generators.choose.call(null, 0, cljs.core.count.call(null, v) - 1), function(v) {
    return function(p1__9870_SHARP_) {
      return clojure.test.check.generators.gen_pure.call(null, clojure.test.check.rose_tree.fmap.call(null, v, p1__9870_SHARP_));
    };
  }(v));
};
clojure.test.check.generators.such_that_helper = function clojure$test$check$generators$such_that_helper(max_tries, pred, gen, tries_left, rng, size) {
  while (true) {
    if (tries_left === 0) {
      throw cljs.core.ex_info.call(null, [cljs.core.str("Couldn't satisfy such-that predicate after "), cljs.core.str(max_tries), cljs.core.str(" tries.")].join(""), cljs.core.PersistentArrayMap.EMPTY);
    } else {
      var vec__9872 = clojure.test.check.random.split.call(null, rng);
      var r1 = cljs.core.nth.call(null, vec__9872, 0, null);
      var r2 = cljs.core.nth.call(null, vec__9872, 1, null);
      var value = clojure.test.check.generators.call_gen.call(null, gen, r1, size);
      if (cljs.core.truth_(pred.call(null, clojure.test.check.rose_tree.root.call(null, value)))) {
        return clojure.test.check.rose_tree.filter.call(null, pred, value);
      } else {
        var G__9873 = max_tries;
        var G__9874 = pred;
        var G__9875 = gen;
        var G__9876 = tries_left - 1;
        var G__9877 = r2;
        var G__9878 = size + 1;
        max_tries = G__9873;
        pred = G__9874;
        gen = G__9875;
        tries_left = G__9876;
        rng = G__9877;
        size = G__9878;
        continue;
      }
    }
    break;
  }
};
clojure.test.check.generators.such_that = function clojure$test$check$generators$such_that(var_args) {
  var args9879 = [];
  var len__5726__auto___9882 = arguments.length;
  var i__5727__auto___9883 = 0;
  while (true) {
    if (i__5727__auto___9883 < len__5726__auto___9882) {
      args9879.push(arguments[i__5727__auto___9883]);
      var G__9884 = i__5727__auto___9883 + 1;
      i__5727__auto___9883 = G__9884;
      continue;
    } else {
    }
    break;
  }
  var G__9881 = args9879.length;
  switch(G__9881) {
    case 2:
      return clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9879.length)].join(""));;
  }
};
clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$2 = function(pred, gen) {
  return clojure.test.check.generators.such_that.call(null, pred, gen, 10);
};
clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$3 = function(pred, gen, max_tries) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Second arg to such-that must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "gen", "gen", 1783106829, null))))].join(""));
  }
  return clojure.test.check.generators.make_gen.call(null, function(rand_seed, size) {
    return clojure.test.check.generators.such_that_helper.call(null, max_tries, pred, gen, max_tries, rand_seed, size);
  });
};
clojure.test.check.generators.such_that.cljs$lang$maxFixedArity = 3;
clojure.test.check.generators.not_empty = function clojure$test$check$generators$not_empty(gen) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Arg to not-empty must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "gen", "gen", 1783106829, null))))].join(""));
  }
  return clojure.test.check.generators.such_that.call(null, cljs.core.not_empty, gen);
};
clojure.test.check.generators.no_shrink = function clojure$test$check$generators$no_shrink(gen) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Arg to no-shrink must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "gen", "gen", 1783106829, null))))].join(""));
  }
  return clojure.test.check.generators.gen_bind.call(null, gen, function(rose) {
    return clojure.test.check.generators.gen_pure.call(null, clojure.test.check.rose_tree.make_rose.call(null, clojure.test.check.rose_tree.root.call(null, rose), cljs.core.PersistentVector.EMPTY));
  });
};
clojure.test.check.generators.shrink_2 = function clojure$test$check$generators$shrink_2(gen) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Arg to shrink-2 must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "gen", "gen", 1783106829, null))))].join(""));
  }
  return clojure.test.check.generators.gen_bind.call(null, gen, cljs.core.comp.call(null, clojure.test.check.generators.gen_pure, clojure.test.check.rose_tree.collapse));
};
clojure.test.check.generators.boolean$ = clojure.test.check.generators.elements.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, true], null));
clojure.test.check.generators.tuple = function clojure$test$check$generators$tuple(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9887 = arguments.length;
  var i__5727__auto___9888 = 0;
  while (true) {
    if (i__5727__auto___9888 < len__5726__auto___9887) {
      args__5733__auto__.push(arguments[i__5727__auto___9888]);
      var G__9889 = i__5727__auto___9888 + 1;
      i__5727__auto___9888 = G__9889;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic = function(generators) {
  if (cljs.core.every_QMARK_.call(null, clojure.test.check.generators.generator_QMARK_, generators)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Args to tuple must be generators"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "every?", "every?", 2083724064, null), new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "generators", "generators", -269612955, null))))].join(""));
  }
  return clojure.test.check.generators.gen_bind.call(null, clojure.test.check.generators.gen_seq__GT_seq_gen.call(null, generators), function(roses) {
    return clojure.test.check.generators.gen_pure.call(null, clojure.test.check.rose_tree.zip.call(null, cljs.core.vector, roses));
  });
};
clojure.test.check.generators.tuple.cljs$lang$maxFixedArity = 0;
clojure.test.check.generators.tuple.cljs$lang$applyTo = function(seq9886) {
  return clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9886));
};
clojure.test.check.generators.int$ = clojure.test.check.generators.sized.call(null, function(size) {
  return clojure.test.check.generators.choose.call(null, -size, size);
});
clojure.test.check.generators.nat = clojure.test.check.generators.fmap.call(null, function(p1__9890_SHARP_) {
  return Math.abs(cljs.core.long$.call(null, p1__9890_SHARP_));
}, clojure.test.check.generators.int$);
clojure.test.check.generators.pos_int = clojure.test.check.generators.nat;
clojure.test.check.generators.neg_int = clojure.test.check.generators.fmap.call(null, function(p1__9891_SHARP_) {
  return -1 * p1__9891_SHARP_;
}, clojure.test.check.generators.nat);
clojure.test.check.generators.s_pos_int = clojure.test.check.generators.fmap.call(null, cljs.core.inc, clojure.test.check.generators.nat);
clojure.test.check.generators.s_neg_int = clojure.test.check.generators.fmap.call(null, cljs.core.dec, clojure.test.check.generators.neg_int);
clojure.test.check.generators.vector = function clojure$test$check$generators$vector(var_args) {
  var args9893 = [];
  var len__5726__auto___9896 = arguments.length;
  var i__5727__auto___9897 = 0;
  while (true) {
    if (i__5727__auto___9897 < len__5726__auto___9896) {
      args9893.push(arguments[i__5727__auto___9897]);
      var G__9898 = i__5727__auto___9897 + 1;
      i__5727__auto___9897 = G__9898;
      continue;
    } else {
    }
    break;
  }
  var G__9895 = args9893.length;
  switch(G__9895) {
    case 1:
      return clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9893.length)].join(""));;
  }
};
clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$1 = function(generator) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, generator))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Arg to vector must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "generator", "generator", 1067569246, null))))].join(""));
  }
  return clojure.test.check.generators.gen_bind.call(null, clojure.test.check.generators.sized.call(null, function(p1__9892_SHARP_) {
    return clojure.test.check.generators.choose.call(null, 0, p1__9892_SHARP_);
  }), function(num_elements_rose) {
    return clojure.test.check.generators.gen_bind.call(null, clojure.test.check.generators.gen_seq__GT_seq_gen.call(null, cljs.core.repeat.call(null, clojure.test.check.rose_tree.root.call(null, num_elements_rose), generator)), function(roses) {
      return clojure.test.check.generators.gen_pure.call(null, clojure.test.check.rose_tree.shrink.call(null, cljs.core.vector, roses));
    });
  });
};
clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$2 = function(generator, num_elements) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, generator))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First arg to vector must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "generator", "generator", 1067569246, null))))].join(""));
  }
  return cljs.core.apply.call(null, clojure.test.check.generators.tuple, cljs.core.repeat.call(null, num_elements, generator));
};
clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$3 = function(generator, min_elements, max_elements) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, generator))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First arg to vector must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "generator", "generator", 1067569246, null))))].join(""));
  }
  return clojure.test.check.generators.gen_bind.call(null, clojure.test.check.generators.choose.call(null, min_elements, max_elements), function(num_elements_rose) {
    return clojure.test.check.generators.gen_bind.call(null, clojure.test.check.generators.gen_seq__GT_seq_gen.call(null, cljs.core.repeat.call(null, clojure.test.check.rose_tree.root.call(null, num_elements_rose), generator)), function(roses) {
      return clojure.test.check.generators.gen_bind.call(null, clojure.test.check.generators.gen_pure.call(null, clojure.test.check.rose_tree.shrink.call(null, cljs.core.vector, roses)), function(rose) {
        return clojure.test.check.generators.gen_pure.call(null, clojure.test.check.rose_tree.filter.call(null, function(v) {
          return cljs.core.count.call(null, v) >= min_elements && cljs.core.count.call(null, v) <= max_elements;
        }, rose));
      });
    });
  });
};
clojure.test.check.generators.vector.cljs$lang$maxFixedArity = 3;
clojure.test.check.generators.list = function clojure$test$check$generators$list(generator) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, generator))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First arg to list must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "generator", "generator", 1067569246, null))))].join(""));
  }
  return clojure.test.check.generators.gen_bind.call(null, clojure.test.check.generators.sized.call(null, function(p1__9900_SHARP_) {
    return clojure.test.check.generators.choose.call(null, 0, p1__9900_SHARP_);
  }), function(num_elements_rose) {
    return clojure.test.check.generators.gen_bind.call(null, clojure.test.check.generators.gen_seq__GT_seq_gen.call(null, cljs.core.repeat.call(null, clojure.test.check.rose_tree.root.call(null, num_elements_rose), generator)), function(roses) {
      return clojure.test.check.generators.gen_pure.call(null, clojure.test.check.rose_tree.shrink.call(null, cljs.core.list, roses));
    });
  });
};
clojure.test.check.generators.swap = function clojure$test$check$generators$swap(coll, p__9901) {
  var vec__9903 = p__9901;
  var i1 = cljs.core.nth.call(null, vec__9903, 0, null);
  var i2 = cljs.core.nth.call(null, vec__9903, 1, null);
  return cljs.core.assoc.call(null, coll, i2, coll.call(null, i1), i1, coll.call(null, i2));
};
clojure.test.check.generators.shuffle = function clojure$test$check$generators$shuffle(coll) {
  var index_gen = clojure.test.check.generators.choose.call(null, 0, cljs.core.count.call(null, coll) - 1);
  return clojure.test.check.generators.fmap.call(null, function(index_gen) {
    return function(p1__9904_SHARP_) {
      return cljs.core.reduce.call(null, clojure.test.check.generators.swap, cljs.core.vec.call(null, coll), p1__9904_SHARP_);
    };
  }(index_gen), clojure.test.check.generators.vector.call(null, clojure.test.check.generators.tuple.call(null, index_gen, index_gen), 0, 2 * cljs.core.count.call(null, coll)));
};
clojure.test.check.generators.hash_map = function clojure$test$check$generators$hash_map(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___9907 = arguments.length;
  var i__5727__auto___9908 = 0;
  while (true) {
    if (i__5727__auto___9908 < len__5726__auto___9907) {
      args__5733__auto__.push(arguments[i__5727__auto___9908]);
      var G__9909 = i__5727__auto___9908 + 1;
      i__5727__auto___9908 = G__9909;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return clojure.test.check.generators.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
clojure.test.check.generators.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(kvs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null)))))].join(""));
  }
  var ks = cljs.core.take_nth.call(null, 2, kvs);
  var vs = cljs.core.take_nth.call(null, 2, cljs.core.rest.call(null, kvs));
  if (cljs.core.every_QMARK_.call(null, clojure.test.check.generators.generator_QMARK_, vs)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Value args to hash-map must be generators"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "every?", "every?", 2083724064, null), new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "vs", "vs", -381565563, null))))].join(""));
  }
  return clojure.test.check.generators.fmap.call(null, function(ks, vs) {
    return function(p1__9905_SHARP_) {
      return cljs.core.zipmap.call(null, ks, p1__9905_SHARP_);
    };
  }(ks, vs), cljs.core.apply.call(null, clojure.test.check.generators.tuple, vs));
};
clojure.test.check.generators.hash_map.cljs$lang$maxFixedArity = 0;
clojure.test.check.generators.hash_map.cljs$lang$applyTo = function(seq9906) {
  return clojure.test.check.generators.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9906));
};
clojure.test.check.generators.transient_set_contains_QMARK_ = function clojure$test$check$generators$transient_set_contains_QMARK_(s, k) {
  return cljs.core.some_QMARK_.call(null, cljs.core._lookup.call(null, s, k));
};
clojure.test.check.generators.coll_distinct_by_STAR_ = function clojure$test$check$generators$coll_distinct_by_STAR_(empty_coll, key_fn, shuffle_fn, gen, rng, size, num_elements, min_elements, max_tries) {
  if (cljs.core.truth_(gen)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "gen", "gen", 1783106829, null)))].join(""));
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "gen", "gen", 142575302)).cljs$core$IFn$_invoke$arity$1(gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Keyword(null, "gen", "gen", 142575302), new cljs.core.Symbol(null, "gen", "gen", 1783106829, null))))].join(""));
  }
  var rose_trees = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  var s = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
  var rng__$1 = rng;
  var size__$1 = size;
  var tries = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, max_tries, tries) && cljs.core.count.call(null, rose_trees) < min_elements) {
      throw cljs.core.ex_info.call(null, "Couldn't generate enough distinct elements!", new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "gen", "gen", 142575302), gen, new cljs.core.Keyword(null, "max-tries", "max-tries", -1824441792), max_tries, new cljs.core.Keyword(null, "num-elements", "num-elements", 1960422107), num_elements, new cljs.core.Keyword(null, "so-far", "so-far", -1973642241), cljs.core.map.call(null, clojure.test.check.rose_tree.root, cljs.core.persistent_BANG_.call(null, 
      rose_trees))], null));
    } else {
      if (cljs.core._EQ_.call(null, max_tries, tries) || cljs.core._EQ_.call(null, cljs.core.count.call(null, rose_trees), num_elements)) {
        return clojure.test.check.rose_tree.shrink.call(null, function(rose_trees, s, rng__$1, size__$1, tries) {
          return function() {
            var G__9913__delegate = function(rest__9910_SHARP_) {
              return cljs.core.into.call(null, empty_coll, rest__9910_SHARP_);
            };
            var G__9913 = function(var_args) {
              var rest__9910_SHARP_ = null;
              if (arguments.length > 0) {
                var G__9914__i = 0, G__9914__a = new Array(arguments.length - 0);
                while (G__9914__i < G__9914__a.length) {
                  G__9914__a[G__9914__i] = arguments[G__9914__i + 0];
                  ++G__9914__i;
                }
                rest__9910_SHARP_ = new cljs.core.IndexedSeq(G__9914__a, 0);
              }
              return G__9913__delegate.call(this, rest__9910_SHARP_);
            };
            G__9913.cljs$lang$maxFixedArity = 0;
            G__9913.cljs$lang$applyTo = function(arglist__9915) {
              var rest__9910_SHARP_ = cljs.core.seq(arglist__9915);
              return G__9913__delegate(rest__9910_SHARP_);
            };
            G__9913.cljs$core$IFn$_invoke$arity$variadic = G__9913__delegate;
            return G__9913;
          }();
        }(rose_trees, s, rng__$1, size__$1, tries), shuffle_fn.call(null, rng__$1, cljs.core.persistent_BANG_.call(null, rose_trees)));
      } else {
        var vec__9912 = clojure.test.check.random.split.call(null, rng__$1);
        var rng1 = cljs.core.nth.call(null, vec__9912, 0, null);
        var rng2 = cljs.core.nth.call(null, vec__9912, 1, null);
        var rose = clojure.test.check.generators.call_gen.call(null, gen, rng1, size__$1);
        var root = clojure.test.check.rose_tree.root.call(null, rose);
        var k = key_fn.call(null, root);
        if (cljs.core.truth_(clojure.test.check.generators.transient_set_contains_QMARK_.call(null, s, k))) {
          var G__9916 = rose_trees;
          var G__9917 = s;
          var G__9918 = rng2;
          var G__9919 = size__$1 + 1;
          var G__9920 = tries + 1;
          rose_trees = G__9916;
          s = G__9917;
          rng__$1 = G__9918;
          size__$1 = G__9919;
          tries = G__9920;
          continue;
        } else {
          var G__9921 = cljs.core.conj_BANG_.call(null, rose_trees, rose);
          var G__9922 = cljs.core.conj_BANG_.call(null, s, k);
          var G__9923 = rng2;
          var G__9924 = size__$1;
          var G__9925 = 0;
          rose_trees = G__9921;
          s = G__9922;
          rng__$1 = G__9923;
          size__$1 = G__9924;
          tries = G__9925;
          continue;
        }
      }
    }
    break;
  }
};
clojure.test.check.generators.distinct_by_QMARK_ = function clojure$test$check$generators$distinct_by_QMARK_(f, coll) {
  var or__4668__auto__ = cljs.core.empty_QMARK_.call(null, coll);
  if (or__4668__auto__) {
    return or__4668__auto__;
  } else {
    return cljs.core.apply.call(null, cljs.core.distinct_QMARK_, cljs.core.map.call(null, f, coll));
  }
};
clojure.test.check.generators.the_shuffle_fn = function clojure$test$check$generators$the_shuffle_fn(rng, coll) {
  var empty_coll = cljs.core.empty.call(null, coll);
  var v = cljs.core.vec.call(null, coll);
  var card = cljs.core.count.call(null, coll);
  var dec_card = card - 1;
  return cljs.core.into.call(null, empty_coll, cljs.core.first.call(null, cljs.core.reduce.call(null, function(empty_coll, v, card, dec_card) {
    return function(p__9929, idx) {
      var vec__9930 = p__9929;
      var v__$1 = cljs.core.nth.call(null, vec__9930, 0, null);
      var rng__$1 = cljs.core.nth.call(null, vec__9930, 1, null);
      var vec__9931 = clojure.test.check.random.split.call(null, rng__$1);
      var rng1 = cljs.core.nth.call(null, vec__9931, 0, null);
      var rng2 = cljs.core.nth.call(null, vec__9931, 1, null);
      var swap_idx = clojure.test.check.generators.rand_range.call(null, rng1, idx, dec_card);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.swap.call(null, v__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [idx, swap_idx], null)), rng2], null);
    };
  }(empty_coll, v, card, dec_card), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, rng], null), cljs.core.range.call(null, card))));
};
clojure.test.check.generators.coll_distinct_by = function clojure$test$check$generators$coll_distinct_by(empty_coll, key_fn, allows_dupes_QMARK_, ordered_QMARK_, gen, p__9938) {
  var map__9941 = p__9938;
  var map__9941__$1 = (!(map__9941 == null) ? map__9941.cljs$lang$protocol_mask$partition0$ & 64 || map__9941.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9941) : map__9941;
  var num_elements = cljs.core.get.call(null, map__9941__$1, new cljs.core.Keyword(null, "num-elements", "num-elements", 1960422107));
  var min_elements = cljs.core.get.call(null, map__9941__$1, new cljs.core.Keyword(null, "min-elements", "min-elements", 949370780));
  var max_elements = cljs.core.get.call(null, map__9941__$1, new cljs.core.Keyword(null, "max-elements", "max-elements", 433034073));
  var max_tries = cljs.core.get.call(null, map__9941__$1, new cljs.core.Keyword(null, "max-tries", "max-tries", -1824441792), 10);
  var shuffle_fn = cljs.core.truth_(ordered_QMARK_) ? clojure.test.check.generators.the_shuffle_fn : function(map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries) {
    return function(_rng, coll) {
      return coll;
    };
  }(map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries);
  var hard_min_elements = function() {
    var or__4668__auto__ = num_elements;
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      var or__4668__auto____$1 = min_elements;
      if (cljs.core.truth_(or__4668__auto____$1)) {
        return or__4668__auto____$1;
      } else {
        return 1;
      }
    }
  }();
  if (cljs.core.truth_(num_elements)) {
    var size_pred = function(shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries) {
      return function(p1__9932_SHARP_) {
        return cljs.core._EQ_.call(null, num_elements, cljs.core.count.call(null, p1__9932_SHARP_));
      };
    }(shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries);
    if (min_elements == null && max_elements == null) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "min-elements", "min-elements", -1705064989, null)), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "max-elements", "max-elements", 2073565600, null)))))].join(""));
    }
    return clojure.test.check.generators.make_gen.call(null, function(size_pred, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries) {
      return function(rng, gen_size) {
        return clojure.test.check.rose_tree.filter.call(null, cljs.core.truth_(allows_dupes_QMARK_) ? cljs.core.every_pred.call(null, size_pred, function(size_pred, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries) {
          return function(p1__9933_SHARP_) {
            return clojure.test.check.generators.distinct_by_QMARK_.call(null, key_fn, p1__9933_SHARP_);
          };
        }(size_pred, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries)) : size_pred, clojure.test.check.generators.coll_distinct_by_STAR_.call(null, empty_coll, key_fn, shuffle_fn, gen, rng, gen_size, num_elements, hard_min_elements, max_tries));
      };
    }(size_pred, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries));
  } else {
    var min_elements__$1 = function() {
      var or__4668__auto__ = min_elements;
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        return 0;
      }
    }();
    var size_pred = cljs.core.truth_(max_elements) ? function(min_elements__$1, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries) {
      return function(p1__9934_SHARP_) {
        return min_elements__$1 <= cljs.core.count.call(null, p1__9934_SHARP_) && cljs.core.count.call(null, p1__9934_SHARP_) <= max_elements;
      };
    }(min_elements__$1, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries) : function(min_elements__$1, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries) {
      return function(p1__9935_SHARP_) {
        return min_elements__$1 <= cljs.core.count.call(null, p1__9935_SHARP_);
      };
    }(min_elements__$1, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries);
    return clojure.test.check.generators.gen_bind.call(null, cljs.core.truth_(max_elements) ? clojure.test.check.generators.choose.call(null, min_elements__$1, max_elements) : clojure.test.check.generators.sized.call(null, function(min_elements__$1, size_pred, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries) {
      return function(p1__9936_SHARP_) {
        return clojure.test.check.generators.choose.call(null, min_elements__$1, min_elements__$1 + p1__9936_SHARP_);
      };
    }(min_elements__$1, size_pred, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries)), function(min_elements__$1, size_pred, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries) {
      return function(num_elements_rose) {
        var num_elements__$1 = clojure.test.check.rose_tree.root.call(null, num_elements_rose);
        return clojure.test.check.generators.make_gen.call(null, function(num_elements__$1, min_elements__$1, size_pred, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries) {
          return function(rng, gen_size) {
            return clojure.test.check.rose_tree.filter.call(null, cljs.core.truth_(allows_dupes_QMARK_) ? cljs.core.every_pred.call(null, size_pred, function(num_elements__$1, min_elements__$1, size_pred, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries) {
              return function(p1__9937_SHARP_) {
                return clojure.test.check.generators.distinct_by_QMARK_.call(null, key_fn, p1__9937_SHARP_);
              };
            }(num_elements__$1, min_elements__$1, size_pred, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries)) : size_pred, clojure.test.check.generators.coll_distinct_by_STAR_.call(null, empty_coll, key_fn, shuffle_fn, gen, rng, gen_size, num_elements__$1, hard_min_elements, max_tries));
          };
        }(num_elements__$1, min_elements__$1, size_pred, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries));
      };
    }(min_elements__$1, size_pred, shuffle_fn, hard_min_elements, map__9941, map__9941__$1, num_elements, min_elements, max_elements, max_tries));
  }
};
clojure.test.check.generators.vector_distinct = function clojure$test$check$generators$vector_distinct(var_args) {
  var args9943 = [];
  var len__5726__auto___9946 = arguments.length;
  var i__5727__auto___9947 = 0;
  while (true) {
    if (i__5727__auto___9947 < len__5726__auto___9946) {
      args9943.push(arguments[i__5727__auto___9947]);
      var G__9948 = i__5727__auto___9947 + 1;
      i__5727__auto___9947 = G__9948;
      continue;
    } else {
    }
    break;
  }
  var G__9945 = args9943.length;
  switch(G__9945) {
    case 1:
      return clojure.test.check.generators.vector_distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.test.check.generators.vector_distinct.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9943.length)].join(""));;
  }
};
clojure.test.check.generators.vector_distinct.cljs$core$IFn$_invoke$arity$1 = function(gen) {
  return clojure.test.check.generators.vector_distinct.call(null, gen, cljs.core.PersistentArrayMap.EMPTY);
};
clojure.test.check.generators.vector_distinct.cljs$core$IFn$_invoke$arity$2 = function(gen, opts) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First arg to vector-distinct must be a generator!"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "gen", "gen", 1783106829, null))))].join(""));
  }
  return clojure.test.check.generators.coll_distinct_by.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.identity, true, true, gen, opts);
};
clojure.test.check.generators.vector_distinct.cljs$lang$maxFixedArity = 2;
clojure.test.check.generators.list_distinct = function clojure$test$check$generators$list_distinct(var_args) {
  var args9950 = [];
  var len__5726__auto___9953 = arguments.length;
  var i__5727__auto___9954 = 0;
  while (true) {
    if (i__5727__auto___9954 < len__5726__auto___9953) {
      args9950.push(arguments[i__5727__auto___9954]);
      var G__9955 = i__5727__auto___9954 + 1;
      i__5727__auto___9954 = G__9955;
      continue;
    } else {
    }
    break;
  }
  var G__9952 = args9950.length;
  switch(G__9952) {
    case 1:
      return clojure.test.check.generators.list_distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.test.check.generators.list_distinct.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9950.length)].join(""));;
  }
};
clojure.test.check.generators.list_distinct.cljs$core$IFn$_invoke$arity$1 = function(gen) {
  return clojure.test.check.generators.list_distinct.call(null, gen, cljs.core.PersistentArrayMap.EMPTY);
};
clojure.test.check.generators.list_distinct.cljs$core$IFn$_invoke$arity$2 = function(gen, opts) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First arg to list-distinct must be a generator!"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "gen", "gen", 1783106829, null))))].join(""));
  }
  return clojure.test.check.generators.coll_distinct_by.call(null, cljs.core.List.EMPTY, cljs.core.identity, true, true, gen, opts);
};
clojure.test.check.generators.list_distinct.cljs$lang$maxFixedArity = 2;
clojure.test.check.generators.vector_distinct_by = function clojure$test$check$generators$vector_distinct_by(var_args) {
  var args9957 = [];
  var len__5726__auto___9960 = arguments.length;
  var i__5727__auto___9961 = 0;
  while (true) {
    if (i__5727__auto___9961 < len__5726__auto___9960) {
      args9957.push(arguments[i__5727__auto___9961]);
      var G__9962 = i__5727__auto___9961 + 1;
      i__5727__auto___9961 = G__9962;
      continue;
    } else {
    }
    break;
  }
  var G__9959 = args9957.length;
  switch(G__9959) {
    case 2:
      return clojure.test.check.generators.vector_distinct_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.test.check.generators.vector_distinct_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9957.length)].join(""));;
  }
};
clojure.test.check.generators.vector_distinct_by.cljs$core$IFn$_invoke$arity$2 = function(key_fn, gen) {
  return clojure.test.check.generators.vector_distinct_by.call(null, key_fn, gen, cljs.core.PersistentArrayMap.EMPTY);
};
clojure.test.check.generators.vector_distinct_by.cljs$core$IFn$_invoke$arity$3 = function(key_fn, gen, opts) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First arg to vector-distinct-by must be a generator!"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "gen", "gen", 1783106829, null))))].join(""));
  }
  return clojure.test.check.generators.coll_distinct_by.call(null, cljs.core.PersistentVector.EMPTY, key_fn, true, true, gen, opts);
};
clojure.test.check.generators.vector_distinct_by.cljs$lang$maxFixedArity = 3;
clojure.test.check.generators.list_distinct_by = function clojure$test$check$generators$list_distinct_by(var_args) {
  var args9964 = [];
  var len__5726__auto___9967 = arguments.length;
  var i__5727__auto___9968 = 0;
  while (true) {
    if (i__5727__auto___9968 < len__5726__auto___9967) {
      args9964.push(arguments[i__5727__auto___9968]);
      var G__9969 = i__5727__auto___9968 + 1;
      i__5727__auto___9968 = G__9969;
      continue;
    } else {
    }
    break;
  }
  var G__9966 = args9964.length;
  switch(G__9966) {
    case 2:
      return clojure.test.check.generators.list_distinct_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.test.check.generators.list_distinct_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9964.length)].join(""));;
  }
};
clojure.test.check.generators.list_distinct_by.cljs$core$IFn$_invoke$arity$2 = function(key_fn, gen) {
  return clojure.test.check.generators.list_distinct_by.call(null, key_fn, gen, cljs.core.PersistentArrayMap.EMPTY);
};
clojure.test.check.generators.list_distinct_by.cljs$core$IFn$_invoke$arity$3 = function(key_fn, gen, opts) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First arg to list-distinct-by must be a generator!"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "gen", "gen", 1783106829, null))))].join(""));
  }
  return clojure.test.check.generators.coll_distinct_by.call(null, cljs.core.List.EMPTY, key_fn, true, true, gen, opts);
};
clojure.test.check.generators.list_distinct_by.cljs$lang$maxFixedArity = 3;
clojure.test.check.generators.set = function clojure$test$check$generators$set(var_args) {
  var args9971 = [];
  var len__5726__auto___9974 = arguments.length;
  var i__5727__auto___9975 = 0;
  while (true) {
    if (i__5727__auto___9975 < len__5726__auto___9974) {
      args9971.push(arguments[i__5727__auto___9975]);
      var G__9976 = i__5727__auto___9975 + 1;
      i__5727__auto___9975 = G__9976;
      continue;
    } else {
    }
    break;
  }
  var G__9973 = args9971.length;
  switch(G__9973) {
    case 1:
      return clojure.test.check.generators.set.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.test.check.generators.set.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9971.length)].join(""));;
  }
};
clojure.test.check.generators.set.cljs$core$IFn$_invoke$arity$1 = function(gen) {
  return clojure.test.check.generators.set.call(null, gen, cljs.core.PersistentArrayMap.EMPTY);
};
clojure.test.check.generators.set.cljs$core$IFn$_invoke$arity$2 = function(gen, opts) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First arg to set must be a generator!"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "gen", "gen", 1783106829, null))))].join(""));
  }
  return clojure.test.check.generators.coll_distinct_by.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.identity, false, false, gen, opts);
};
clojure.test.check.generators.set.cljs$lang$maxFixedArity = 2;
clojure.test.check.generators.sorted_set = function clojure$test$check$generators$sorted_set(var_args) {
  var args9978 = [];
  var len__5726__auto___9981 = arguments.length;
  var i__5727__auto___9982 = 0;
  while (true) {
    if (i__5727__auto___9982 < len__5726__auto___9981) {
      args9978.push(arguments[i__5727__auto___9982]);
      var G__9983 = i__5727__auto___9982 + 1;
      i__5727__auto___9982 = G__9983;
      continue;
    } else {
    }
    break;
  }
  var G__9980 = args9978.length;
  switch(G__9980) {
    case 1:
      return clojure.test.check.generators.sorted_set.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.test.check.generators.sorted_set.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9978.length)].join(""));;
  }
};
clojure.test.check.generators.sorted_set.cljs$core$IFn$_invoke$arity$1 = function(gen) {
  return clojure.test.check.generators.sorted_set.call(null, gen, cljs.core.PersistentArrayMap.EMPTY);
};
clojure.test.check.generators.sorted_set.cljs$core$IFn$_invoke$arity$2 = function(gen, opts) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First arg to sorted-set must be a generator!"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "gen", "gen", 1783106829, null))))].join(""));
  }
  return clojure.test.check.generators.coll_distinct_by.call(null, cljs.core.sorted_set.call(null), cljs.core.identity, false, false, gen, opts);
};
clojure.test.check.generators.sorted_set.cljs$lang$maxFixedArity = 2;
clojure.test.check.generators.map = function clojure$test$check$generators$map(var_args) {
  var args9985 = [];
  var len__5726__auto___9988 = arguments.length;
  var i__5727__auto___9989 = 0;
  while (true) {
    if (i__5727__auto___9989 < len__5726__auto___9988) {
      args9985.push(arguments[i__5727__auto___9989]);
      var G__9990 = i__5727__auto___9989 + 1;
      i__5727__auto___9989 = G__9990;
      continue;
    } else {
    }
    break;
  }
  var G__9987 = args9985.length;
  switch(G__9987) {
    case 2:
      return clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9985.length)].join(""));;
  }
};
clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$2 = function(key_gen, val_gen) {
  return clojure.test.check.generators.map.call(null, key_gen, val_gen, cljs.core.PersistentArrayMap.EMPTY);
};
clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$3 = function(key_gen, val_gen, opts) {
  return clojure.test.check.generators.coll_distinct_by.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.first, false, false, clojure.test.check.generators.tuple.call(null, key_gen, val_gen), opts);
};
clojure.test.check.generators.map.cljs$lang$maxFixedArity = 3;
clojure.test.check.generators.gen_raw_long = clojure.test.check.generators.make_gen.call(null, function(rnd, _size) {
  return clojure.test.check.rose_tree.pure.call(null, clojure.test.check.random.rand_long.call(null, rnd));
});
clojure.test.check.generators.MAX_INTEGER = cljs.core.apply.call(null, cljs.core._STAR_, cljs.core.repeat.call(null, 53, 2)) - 1;
clojure.test.check.generators.MIN_INTEGER = -clojure.test.check.generators.MAX_INTEGER;
clojure.test.check.generators.abs = function clojure$test$check$generators$abs(x) {
  return Math.abs(x);
};
clojure.test.check.generators.long__GT_large_integer = function clojure$test$check$generators$long__GT_large_integer(bit_count, x, min, max) {
  var res = function() {
    var G__9994 = x.shiftRight(64 - bit_count).toNumber();
    var G__9994__$1 = min === 0 ? clojure.test.check.generators.abs.call(null, G__9994) : G__9994;
    return G__9994__$1;
  }();
  while (true) {
    if (min <= res && res <= max) {
      return res;
    } else {
      var res_SINGLEQUOTE_ = -res;
      if (min <= res_SINGLEQUOTE_ && res_SINGLEQUOTE_ <= max) {
        return res_SINGLEQUOTE_;
      } else {
        var G__9996 = function() {
          var G__9995 = res;
          var G__9995__$1 = cljs.core.odd_QMARK_.call(null, res) ? (res < 0 ? cljs.core.inc : cljs.core.dec).call(null, G__9995) : G__9995;
          return G__9995__$1;
        }() / 2;
        res = G__9996;
        continue;
      }
    }
    break;
  }
};
clojure.test.check.generators.large_integer_STAR__STAR_ = function clojure$test$check$generators$large_integer_STAR__STAR_(min, max) {
  return clojure.test.check.generators.sized.call(null, function(size) {
    var size__$1 = function() {
      var x__4999__auto__ = size;
      var y__5000__auto__ = 1;
      return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
    }();
    var max_bit_count = function() {
      var x__5006__auto__ = size__$1;
      var y__5007__auto__ = 54;
      return x__5006__auto__ < y__5007__auto__ ? x__5006__auto__ : y__5007__auto__;
    }();
    return clojure.test.check.generators.gen_fmap.call(null, function(size__$1, max_bit_count) {
      return function(rose) {
        var vec__9998 = clojure.test.check.rose_tree.root.call(null, rose);
        var bit_count = cljs.core.nth.call(null, vec__9998, 0, null);
        var x = cljs.core.nth.call(null, vec__9998, 1, null);
        return clojure.test.check.generators.int_rose_tree.call(null, clojure.test.check.generators.long__GT_large_integer.call(null, bit_count, x, min, max));
      };
    }(size__$1, max_bit_count), clojure.test.check.generators.tuple.call(null, clojure.test.check.generators.choose.call(null, 1, max_bit_count), clojure.test.check.generators.gen_raw_long));
  });
};
clojure.test.check.generators.large_integer_STAR_ = function clojure$test$check$generators$large_integer_STAR_(p__10002) {
  var map__10005 = p__10002;
  var map__10005__$1 = (!(map__10005 == null) ? map__10005.cljs$lang$protocol_mask$partition0$ & 64 || map__10005.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10005) : map__10005;
  var min = cljs.core.get.call(null, map__10005__$1, new cljs.core.Keyword(null, "min", "min", 444991522));
  var max = cljs.core.get.call(null, map__10005__$1, new cljs.core.Keyword(null, "max", "max", 61366548));
  var min__$1 = function() {
    var or__4668__auto__ = min;
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return clojure.test.check.generators.MIN_INTEGER;
    }
  }();
  var max__$1 = function() {
    var or__4668__auto__ = max;
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return clojure.test.check.generators.MAX_INTEGER;
    }
  }();
  if (min__$1 <= max__$1) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c\x3d", "\x3c\x3d", 1244895369, null), new cljs.core.Symbol(null, "min", "min", 2085523049, null), new cljs.core.Symbol(null, "max", "max", 1701898075, null))))].join(""));
  }
  return clojure.test.check.generators.such_that.call(null, function(min__$1, max__$1, map__10005, map__10005__$1, min, max) {
    return function(p1__9999_SHARP_) {
      return min__$1 <= p1__9999_SHARP_ && p1__9999_SHARP_ <= max__$1;
    };
  }(min__$1, max__$1, map__10005, map__10005__$1, min, max), min__$1 <= 0 && 0 <= max__$1 ? clojure.test.check.generators.large_integer_STAR__STAR_.call(null, min__$1, max__$1) : max__$1 < 0 ? clojure.test.check.generators.fmap.call(null, function(min__$1, max__$1, map__10005, map__10005__$1, min, max) {
    return function(p1__10000_SHARP_) {
      return max__$1 + p1__10000_SHARP_;
    };
  }(min__$1, max__$1, map__10005, map__10005__$1, min, max), clojure.test.check.generators.large_integer_STAR__STAR_.call(null, min__$1 - max__$1, 0)) : clojure.test.check.generators.fmap.call(null, function(min__$1, max__$1, map__10005, map__10005__$1, min, max) {
    return function(p1__10001_SHARP_) {
      return min__$1 + p1__10001_SHARP_;
    };
  }(min__$1, max__$1, map__10005, map__10005__$1, min, max), clojure.test.check.generators.large_integer_STAR__STAR_.call(null, 0, max__$1 - min__$1)));
};
clojure.test.check.generators.large_integer = clojure.test.check.generators.large_integer_STAR_.call(null, cljs.core.PersistentArrayMap.EMPTY);
clojure.test.check.generators.POS_INFINITY = Number.POSITIVE_INFINITY;
clojure.test.check.generators.NEG_INFINITY = Number.NEGATIVE_INFINITY;
clojure.test.check.generators.MAX_POS_VALUE = Number.MAX_VALUE;
clojure.test.check.generators.MIN_NEG_VALUE = -clojure.test.check.generators.MAX_POS_VALUE;
clojure.test.check.generators.NAN = Number.NaN;
clojure.test.check.generators.uniform_integer = function clojure$test$check$generators$uniform_integer(bit_count) {
  if (bit_count <= 32) {
    return clojure.test.check.generators.choose.call(null, 0, function() {
      var G__10010 = cljs.core.long$.call(null, bit_count);
      switch(G__10010) {
        case 32:
          return 4294967295;
          break;
        case 31:
          return 2147483647;
          break;
        default:
          return (1 << bit_count) - 1;
      }
    }());
  } else {
    return clojure.test.check.generators.fmap.call(null, function(p__10011) {
      var vec__10012 = p__10011;
      var upper = cljs.core.nth.call(null, vec__10012, 0, null);
      var lower = cljs.core.nth.call(null, vec__10012, 1, null);
      return upper * 4294967296 + lower;
    }, clojure.test.check.generators.tuple.call(null, clojure$test$check$generators$uniform_integer.call(null, bit_count - 32), clojure$test$check$generators$uniform_integer.call(null, 32)));
  }
};
clojure.test.check.generators.scalb = function clojure$test$check$generators$scalb(x, exp) {
  return x * Math.pow(2, exp);
};
clojure.test.check.generators.fifty_two_bit_reverse = function clojure$test$check$generators$fifty_two_bit_reverse(n) {
  var out = 0;
  var n__$1 = n;
  var out_shifter = Math.pow(2, 52);
  while (true) {
    if (n__$1 < 1) {
      return out * out_shifter;
    } else {
      var G__10014 = out * 2 + (n__$1 & 1);
      var G__10015 = n__$1 / 2;
      var G__10016 = out_shifter / 2;
      out = G__10014;
      n__$1 = G__10015;
      out_shifter = G__10016;
      continue;
    }
    break;
  }
};
clojure.test.check.generators.backwards_shrinking_significand = clojure.test.check.generators.fmap.call(null, clojure.test.check.generators.fifty_two_bit_reverse, clojure.test.check.generators.sized.call(null, function(size) {
  return clojure.test.check.generators.gen_bind.call(null, clojure.test.check.generators.choose.call(null, 0, function() {
    var x__5006__auto__ = size;
    var y__5007__auto__ = 52;
    return x__5006__auto__ < y__5007__auto__ ? x__5006__auto__ : y__5007__auto__;
  }()), function(rose) {
    return clojure.test.check.generators.uniform_integer.call(null, clojure.test.check.rose_tree.root.call(null, rose));
  });
}));
clojure.test.check.generators.get_exponent = function clojure$test$check$generators$get_exponent(x) {
  if (x === 0) {
    return -1023;
  } else {
    var x__$1 = Math.abs(x);
    var res = Math.floor(Math.log(x__$1) * Math.LOG2E);
    var t = clojure.test.check.generators.scalb.call(null, x__$1, -res);
    if (t < 1) {
      return res - 1;
    } else {
      if (2 <= t) {
        return res + 1;
      } else {
        return res;
      }
    }
  }
};
clojure.test.check.generators.double_exp_and_sign = function clojure$test$check$generators$double_exp_and_sign(lower_bound, upper_bound) {
  var gen_exp = function clojure$test$check$generators$double_exp_and_sign_$_gen_exp(lb, ub) {
    return clojure.test.check.generators.sized.call(null, function(size) {
      var qs8 = 1 << cljs.core.quot.call(null, function() {
        var x__5006__auto__ = 200;
        var y__5007__auto__ = size;
        return x__5006__auto__ < y__5007__auto__ ? x__5006__auto__ : y__5007__auto__;
      }(), 8);
      if (lb <= 0 && 0 <= ub) {
        return clojure.test.check.generators.choose.call(null, function() {
          var x__4999__auto__ = lb;
          var y__5000__auto__ = -qs8;
          return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
        }(), function() {
          var x__5006__auto__ = ub;
          var y__5007__auto__ = qs8;
          return x__5006__auto__ < y__5007__auto__ ? x__5006__auto__ : y__5007__auto__;
        }());
      } else {
        if (ub < 0) {
          return clojure.test.check.generators.choose.call(null, function() {
            var x__4999__auto__ = lb;
            var y__5000__auto__ = ub - qs8;
            return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
          }(), ub);
        } else {
          return clojure.test.check.generators.choose.call(null, lb, function() {
            var x__5006__auto__ = ub;
            var y__5007__auto__ = lb + qs8;
            return x__5006__auto__ < y__5007__auto__ ? x__5006__auto__ : y__5007__auto__;
          }());
        }
      }
    });
  };
  if (lower_bound == null && upper_bound == null) {
    return clojure.test.check.generators.tuple.call(null, gen_exp.call(null, -1023, 1023), clojure.test.check.generators.elements.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, -1], null)));
  } else {
    var lower_bound__$1 = function() {
      var or__4668__auto__ = lower_bound;
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        return clojure.test.check.generators.MIN_NEG_VALUE;
      }
    }();
    var upper_bound__$1 = function() {
      var or__4668__auto__ = upper_bound;
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        return clojure.test.check.generators.MAX_POS_VALUE;
      }
    }();
    var lbexp = function() {
      var x__4999__auto__ = -1023;
      var y__5000__auto__ = clojure.test.check.generators.get_exponent.call(null, lower_bound__$1);
      return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
    }();
    var ubexp = function() {
      var x__4999__auto__ = -1023;
      var y__5000__auto__ = clojure.test.check.generators.get_exponent.call(null, upper_bound__$1);
      return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
    }();
    if (0 <= lower_bound__$1) {
      return clojure.test.check.generators.tuple.call(null, gen_exp.call(null, lbexp, ubexp), clojure.test.check.generators.return$.call(null, 1));
    } else {
      if (upper_bound__$1 <= 0) {
        return clojure.test.check.generators.tuple.call(null, gen_exp.call(null, ubexp, lbexp), clojure.test.check.generators.return$.call(null, -1));
      } else {
        return clojure.test.check.generators.fmap.call(null, function(lower_bound__$1, upper_bound__$1, lbexp, ubexp) {
          return function(p__10019) {
            var vec__10020 = p__10019;
            var exp = cljs.core.nth.call(null, vec__10020, 0, null);
            var sign = cljs.core.nth.call(null, vec__10020, 1, null);
            var pair = vec__10020;
            if (sign < 0 && lbexp < exp || sign > 0 && ubexp < exp) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [exp, -sign], null);
            } else {
              return pair;
            }
          };
        }(lower_bound__$1, upper_bound__$1, lbexp, ubexp), clojure.test.check.generators.tuple.call(null, gen_exp.call(null, -1023, function() {
          var x__4999__auto__ = ubexp;
          var y__5000__auto__ = lbexp;
          return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
        }()), clojure.test.check.generators.elements.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, -1], null))));
      }
    }
  }
};
clojure.test.check.generators.block_bounds = function clojure$test$check$generators$block_bounds(exp, sign) {
  if (sign < 0) {
    var vec__10022 = clojure$test$check$generators$block_bounds.call(null, exp, -sign);
    var low = cljs.core.nth.call(null, vec__10022, 0, null);
    var high = cljs.core.nth.call(null, vec__10022, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [-high, -low], null);
  } else {
    if (cljs.core._EQ_.call(null, -1023, exp)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, clojure.test.check.generators.scalb.call(null, clojure.test.check.generators.scalb.call(null, 1, 52) - 1, -1074)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.scalb.call(null, 1, exp), clojure.test.check.generators.scalb.call(null, clojure.test.check.generators.scalb.call(null, 1, 52) - 1, exp - 51)], null);
    }
  }
};
clojure.test.check.generators.double_finite = function clojure$test$check$generators$double_finite(lower_bound, upper_bound) {
  if (lower_bound == null || upper_bound == null || lower_bound <= upper_bound) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "lower-bound", "lower-bound", 1794164016, null)), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "upper-bound", "upper-bound", -1091542953, null)), cljs.core.list(new cljs.core.Symbol(null, 
    "\x3c\x3d", "\x3c\x3d", 1244895369, null), new cljs.core.Symbol(null, "lower-bound", "lower-bound", 1794164016, null), new cljs.core.Symbol(null, "upper-bound", "upper-bound", -1091542953, null)))))].join(""));
  }
  var pred = cljs.core.truth_(lower_bound) ? cljs.core.truth_(upper_bound) ? function(p1__10023_SHARP_) {
    return lower_bound <= p1__10023_SHARP_ && p1__10023_SHARP_ <= upper_bound;
  } : function(p1__10024_SHARP_) {
    return lower_bound <= p1__10024_SHARP_;
  } : cljs.core.truth_(upper_bound) ? function(p1__10025_SHARP_) {
    return p1__10025_SHARP_ <= upper_bound;
  } : null;
  var gen = clojure.test.check.generators.fmap.call(null, function(pred) {
    return function(p__10033) {
      var vec__10034 = p__10033;
      var vec__10035 = cljs.core.nth.call(null, vec__10034, 0, null);
      var exp = cljs.core.nth.call(null, vec__10035, 0, null);
      var sign = cljs.core.nth.call(null, vec__10035, 1, null);
      var significand = cljs.core.nth.call(null, vec__10034, 1, null);
      var base = significand / Math.pow(2, 52) + 1;
      var x = clojure.test.check.generators.scalb.call(null, base, exp) * sign;
      if (cljs.core.truth_(function() {
        var or__4668__auto__ = pred == null;
        if (or__4668__auto__) {
          return or__4668__auto__;
        } else {
          return pred.call(null, x);
        }
      }())) {
        return x;
      } else {
        var vec__10036 = clojure.test.check.generators.block_bounds.call(null, exp, sign);
        var low = cljs.core.nth.call(null, vec__10036, 0, null);
        var high = cljs.core.nth.call(null, vec__10036, 1, null);
        var block_lb = function() {
          var G__10037 = low;
          var G__10037__$1 = cljs.core.truth_(lower_bound) ? function() {
            var x__4999__auto__ = G__10037;
            var y__5000__auto__ = lower_bound;
            return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
          }() : G__10037;
          return G__10037__$1;
        }();
        var block_ub = function() {
          var G__10038 = high;
          var G__10038__$1 = cljs.core.truth_(upper_bound) ? function() {
            var x__5006__auto__ = G__10038;
            var y__5007__auto__ = upper_bound;
            return x__5006__auto__ < y__5007__auto__ ? x__5006__auto__ : y__5007__auto__;
          }() : G__10038;
          return G__10038__$1;
        }();
        var x__$1 = block_lb + (block_ub - block_lb) * (base - 1);
        var x__4999__auto__ = function() {
          var x__5006__auto__ = x__$1;
          var y__5007__auto__ = block_ub;
          return x__5006__auto__ < y__5007__auto__ ? x__5006__auto__ : y__5007__auto__;
        }();
        var y__5000__auto__ = block_lb;
        return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
      }
    };
  }(pred), clojure.test.check.generators.tuple.call(null, clojure.test.check.generators.double_exp_and_sign.call(null, lower_bound, upper_bound), clojure.test.check.generators.backwards_shrinking_significand));
  var G__10039 = gen;
  var G__10039__$1 = cljs.core.truth_(pred) ? clojure.test.check.generators.such_that.call(null, pred, G__10039) : G__10039;
  return G__10039__$1;
};
clojure.test.check.generators.double_STAR_ = function clojure$test$check$generators$double_STAR_(p__10040) {
  var map__10044 = p__10040;
  var map__10044__$1 = (!(map__10044 == null) ? map__10044.cljs$lang$protocol_mask$partition0$ & 64 || map__10044.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10044) : map__10044;
  var infinite_QMARK_ = cljs.core.get.call(null, map__10044__$1, new cljs.core.Keyword(null, "infinite?", "infinite?", -2017886608), true);
  var NaN_QMARK_ = cljs.core.get.call(null, map__10044__$1, new cljs.core.Keyword(null, "NaN?", "NaN?", -1917767651), true);
  var min = cljs.core.get.call(null, map__10044__$1, new cljs.core.Keyword(null, "min", "min", 444991522));
  var max = cljs.core.get.call(null, map__10044__$1, new cljs.core.Keyword(null, "max", "max", 61366548));
  var frequency_arg = function() {
    var G__10046 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [95, clojure.test.check.generators.double_finite.call(null, min, max)], null)], null);
    var G__10046__$1 = (min == null ? max == null || 0 <= max : max == null ? min <= 0 : min <= 0 && 0 <= max) ? cljs.core.conj.call(null, G__10046, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, clojure.test.check.generators.return$.call(null, 0)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, clojure.test.check.generators.return$.call(null, -0)], null)) : G__10046;
    var G__10046__$2 = cljs.core.truth_(function() {
      var and__4656__auto__ = infinite_QMARK_;
      if (cljs.core.truth_(and__4656__auto__)) {
        return max == null;
      } else {
        return and__4656__auto__;
      }
    }()) ? cljs.core.conj.call(null, G__10046__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, clojure.test.check.generators.return$.call(null, clojure.test.check.generators.POS_INFINITY)], null)) : G__10046__$1;
    var G__10046__$3 = cljs.core.truth_(function() {
      var and__4656__auto__ = infinite_QMARK_;
      if (cljs.core.truth_(and__4656__auto__)) {
        return min == null;
      } else {
        return and__4656__auto__;
      }
    }()) ? cljs.core.conj.call(null, G__10046__$2, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, clojure.test.check.generators.return$.call(null, clojure.test.check.generators.NEG_INFINITY)], null)) : G__10046__$2;
    var G__10046__$4 = cljs.core.truth_(NaN_QMARK_) ? cljs.core.conj.call(null, G__10046__$3, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, clojure.test.check.generators.return$.call(null, clojure.test.check.generators.NAN)], null)) : G__10046__$3;
    return G__10046__$4;
  }();
  if (cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, frequency_arg))) {
    return cljs.core.second.call(null, cljs.core.first.call(null, frequency_arg));
  } else {
    return clojure.test.check.generators.frequency.call(null, frequency_arg);
  }
};
clojure.test.check.generators.double$ = clojure.test.check.generators.double_STAR_.call(null, cljs.core.PersistentArrayMap.EMPTY);
clojure.test.check.generators.char$ = clojure.test.check.generators.fmap.call(null, cljs.core.char$, clojure.test.check.generators.choose.call(null, 0, 255));
clojure.test.check.generators.char_ascii = clojure.test.check.generators.fmap.call(null, cljs.core.char$, clojure.test.check.generators.choose.call(null, 32, 126));
clojure.test.check.generators.char_alphanumeric = clojure.test.check.generators.fmap.call(null, cljs.core.char$, clojure.test.check.generators.one_of.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.choose.call(null, 48, 57), clojure.test.check.generators.choose.call(null, 65, 90), clojure.test.check.generators.choose.call(null, 97, 122)], null)));
clojure.test.check.generators.char_alpha_numeric = clojure.test.check.generators.char_alphanumeric;
clojure.test.check.generators.char_alpha = clojure.test.check.generators.fmap.call(null, cljs.core.char$, clojure.test.check.generators.one_of.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.choose.call(null, 65, 90), clojure.test.check.generators.choose.call(null, 97, 122)], null)));
clojure.test.check.generators.char_symbol_special = clojure.test.check.generators.elements.call(null, new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["*", "+", "!", "-", "_", "?"], null));
clojure.test.check.generators.char_keyword_rest = clojure.test.check.generators.frequency.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, clojure.test.check.generators.char_alphanumeric], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, clojure.test.check.generators.char_symbol_special], null)], null));
clojure.test.check.generators.char_keyword_first = clojure.test.check.generators.frequency.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, clojure.test.check.generators.char_alpha], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, clojure.test.check.generators.char_symbol_special], null)], null));
clojure.test.check.generators.string = clojure.test.check.generators.fmap.call(null, clojure.string.join, clojure.test.check.generators.vector.call(null, clojure.test.check.generators.char$));
clojure.test.check.generators.string_ascii = clojure.test.check.generators.fmap.call(null, clojure.string.join, clojure.test.check.generators.vector.call(null, clojure.test.check.generators.char_ascii));
clojure.test.check.generators.string_alphanumeric = clojure.test.check.generators.fmap.call(null, clojure.string.join, clojure.test.check.generators.vector.call(null, clojure.test.check.generators.char_alphanumeric));
clojure.test.check.generators.string_alpha_numeric = clojure.test.check.generators.string_alphanumeric;
clojure.test.check.generators.digit_QMARK_ = function clojure$test$check$generators$digit_QMARK_(d) {
  return goog.string.isNumeric(d);
};
clojure.test.check.generators._PLUS__or___digit_QMARK_ = function clojure$test$check$generators$_PLUS__or___digit_QMARK_(c, d) {
  return cljs.core.boolean$.call(null, function() {
    var and__4656__auto__ = d;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = "+" === c || "-" === c;
      if (and__4656__auto____$1) {
        return clojure.test.check.generators.digit_QMARK_.call(null, d);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }());
};
clojure.test.check.generators.namespace_segment = clojure.test.check.generators.fmap.call(null, function(p__10047) {
  var vec__10048 = p__10047;
  var c = cljs.core.nth.call(null, vec__10048, 0, null);
  var cs = cljs.core.nth.call(null, vec__10048, 1, null);
  return clojure.string.join.call(null, cljs.core.cons.call(null, c, cs));
}, clojure.test.check.generators.such_that.call(null, function(p__10049) {
  var vec__10050 = p__10049;
  var c = cljs.core.nth.call(null, vec__10050, 0, null);
  var vec__10051 = cljs.core.nth.call(null, vec__10050, 1, null);
  var d = cljs.core.nth.call(null, vec__10051, 0, null);
  return cljs.core.not.call(null, clojure.test.check.generators._PLUS__or___digit_QMARK_.call(null, c, d));
}, clojure.test.check.generators.tuple.call(null, clojure.test.check.generators.char_keyword_first, clojure.test.check.generators.vector.call(null, clojure.test.check.generators.char_keyword_rest))));
clojure.test.check.generators.namespace = clojure.test.check.generators.fmap.call(null, function(v) {
  if (cljs.core.seq.call(null, v)) {
    return clojure.string.join.call(null, ".", v);
  } else {
    return null;
  }
}, clojure.test.check.generators.vector.call(null, clojure.test.check.generators.namespace_segment));
clojure.test.check.generators.keyword_segment_rest = clojure.test.check.generators.fmap.call(null, function(p__10052) {
  var vec__10053 = p__10052;
  var c = cljs.core.nth.call(null, vec__10053, 0, null);
  var cs = cljs.core.nth.call(null, vec__10053, 1, null);
  return clojure.string.join.call(null, cljs.core.cons.call(null, c, cs));
}, clojure.test.check.generators.tuple.call(null, clojure.test.check.generators.char_keyword_rest, clojure.test.check.generators.vector.call(null, clojure.test.check.generators.char_keyword_rest)));
clojure.test.check.generators.keyword_segment_first = clojure.test.check.generators.fmap.call(null, function(p__10054) {
  var vec__10055 = p__10054;
  var c = cljs.core.nth.call(null, vec__10055, 0, null);
  var cs = cljs.core.nth.call(null, vec__10055, 1, null);
  return clojure.string.join.call(null, cljs.core.cons.call(null, c, cs));
}, clojure.test.check.generators.tuple.call(null, clojure.test.check.generators.char_keyword_first, clojure.test.check.generators.vector.call(null, clojure.test.check.generators.char_keyword_rest)));
clojure.test.check.generators.keyword = clojure.test.check.generators.fmap.call(null, function(p__10056) {
  var vec__10057 = p__10056;
  var c = cljs.core.nth.call(null, vec__10057, 0, null);
  var cs = cljs.core.nth.call(null, vec__10057, 1, null);
  return cljs.core.keyword.call(null, clojure.string.join.call(null, ":", cljs.core.cons.call(null, c, cs)));
}, clojure.test.check.generators.tuple.call(null, clojure.test.check.generators.keyword_segment_first, clojure.test.check.generators.vector.call(null, clojure.test.check.generators.keyword_segment_rest)));
clojure.test.check.generators.keyword_ns = clojure.test.check.generators.fmap.call(null, function(p__10058) {
  var vec__10059 = p__10058;
  var ns = cljs.core.nth.call(null, vec__10059, 0, null);
  var c = cljs.core.nth.call(null, vec__10059, 1, null);
  var cs = cljs.core.nth.call(null, vec__10059, 2, null);
  return cljs.core.keyword.call(null, ns, clojure.string.join.call(null, cljs.core.cons.call(null, c, cs)));
}, clojure.test.check.generators.tuple.call(null, clojure.test.check.generators.namespace, clojure.test.check.generators.char_keyword_first, clojure.test.check.generators.vector.call(null, clojure.test.check.generators.char_keyword_rest)));
clojure.test.check.generators.char_symbol_first = clojure.test.check.generators.frequency.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [10, clojure.test.check.generators.char_alpha], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [5, clojure.test.check.generators.char_symbol_special], null), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, clojure.test.check.generators.return$.call(null, ".")], null)], null));
clojure.test.check.generators.char_symbol_rest = clojure.test.check.generators.frequency.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [10, clojure.test.check.generators.char_alphanumeric], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [5, clojure.test.check.generators.char_symbol_special], null), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, clojure.test.check.generators.return$.call(null, ".")], null)], null));
clojure.test.check.generators.symbol = clojure.test.check.generators.frequency.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [100, clojure.test.check.generators.fmap.call(null, function(p__10060) {
  var vec__10061 = p__10060;
  var c = cljs.core.nth.call(null, vec__10061, 0, null);
  var cs = cljs.core.nth.call(null, vec__10061, 1, null);
  return cljs.core.symbol.call(null, clojure.string.join.call(null, cljs.core.cons.call(null, c, cs)));
}, clojure.test.check.generators.such_that.call(null, function(p__10062) {
  var vec__10063 = p__10062;
  var c = cljs.core.nth.call(null, vec__10063, 0, null);
  var vec__10064 = cljs.core.nth.call(null, vec__10063, 1, null);
  var d = cljs.core.nth.call(null, vec__10064, 0, null);
  return cljs.core.not.call(null, clojure.test.check.generators._PLUS__or___digit_QMARK_.call(null, c, d));
}, clojure.test.check.generators.tuple.call(null, clojure.test.check.generators.char_symbol_first, clojure.test.check.generators.vector.call(null, clojure.test.check.generators.char_symbol_rest))))], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, clojure.test.check.generators.return$.call(null, new cljs.core.Symbol(null, "/", "/", -1371932971, null))], null)], null));
clojure.test.check.generators.symbol_ns = clojure.test.check.generators.frequency.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [100, clojure.test.check.generators.fmap.call(null, function(p__10065) {
  var vec__10066 = p__10065;
  var ns = cljs.core.nth.call(null, vec__10066, 0, null);
  var c = cljs.core.nth.call(null, vec__10066, 1, null);
  var cs = cljs.core.nth.call(null, vec__10066, 2, null);
  return cljs.core.symbol.call(null, ns, clojure.string.join.call(null, cljs.core.cons.call(null, c, cs)));
}, clojure.test.check.generators.such_that.call(null, function(p__10067) {
  var vec__10068 = p__10067;
  var _ = cljs.core.nth.call(null, vec__10068, 0, null);
  var c = cljs.core.nth.call(null, vec__10068, 1, null);
  var vec__10069 = cljs.core.nth.call(null, vec__10068, 2, null);
  var d = cljs.core.nth.call(null, vec__10069, 0, null);
  return cljs.core.not.call(null, clojure.test.check.generators._PLUS__or___digit_QMARK_.call(null, c, d));
}, clojure.test.check.generators.tuple.call(null, clojure.test.check.generators.namespace, clojure.test.check.generators.char_symbol_first, clojure.test.check.generators.vector.call(null, clojure.test.check.generators.char_symbol_rest))))], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, clojure.test.check.generators.return$.call(null, new cljs.core.Symbol(null, "/", "/", -1371932971, null))], null)], null));
clojure.test.check.generators.ratio = clojure.test.check.generators.fmap.call(null, function(p__10070) {
  var vec__10071 = p__10070;
  var a = cljs.core.nth.call(null, vec__10071, 0, null);
  var b = cljs.core.nth.call(null, vec__10071, 1, null);
  return a / b;
}, clojure.test.check.generators.tuple.call(null, clojure.test.check.generators.int$, clojure.test.check.generators.such_that.call(null, cljs.core.complement.call(null, cljs.core.zero_QMARK_), clojure.test.check.generators.int$)));
clojure.test.check.generators.uuid = clojure.test.check.generators.no_shrink.call(null, clojure.test.check.generators.fmap.call(null, function(nibbles) {
  var hex = function clojure$test$check$generators$hex(idx) {
    return nibbles.call(null, idx).toString(16);
  };
  var rhex = ((nibbles.call(null, 15) & 3) + 8).toString(16);
  return cljs.core.uuid.call(null, [cljs.core.str(hex.call(null, 0)), cljs.core.str(hex.call(null, 1)), cljs.core.str(hex.call(null, 2)), cljs.core.str(hex.call(null, 3)), cljs.core.str(hex.call(null, 4)), cljs.core.str(hex.call(null, 5)), cljs.core.str(hex.call(null, 6)), cljs.core.str(hex.call(null, 7)), cljs.core.str("-"), cljs.core.str(hex.call(null, 8)), cljs.core.str(hex.call(null, 9)), cljs.core.str(hex.call(null, 10)), cljs.core.str(hex.call(null, 11)), cljs.core.str("-"), cljs.core.str("4"), 
  cljs.core.str(hex.call(null, 12)), cljs.core.str(hex.call(null, 13)), cljs.core.str(hex.call(null, 14)), cljs.core.str("-"), cljs.core.str(rhex), cljs.core.str(hex.call(null, 16)), cljs.core.str(hex.call(null, 17)), cljs.core.str(hex.call(null, 18)), cljs.core.str("-"), cljs.core.str(hex.call(null, 19)), cljs.core.str(hex.call(null, 20)), cljs.core.str(hex.call(null, 21)), cljs.core.str(hex.call(null, 22)), cljs.core.str(hex.call(null, 23)), cljs.core.str(hex.call(null, 24)), cljs.core.str(hex.call(null, 
  25)), cljs.core.str(hex.call(null, 26)), cljs.core.str(hex.call(null, 27)), cljs.core.str(hex.call(null, 28)), cljs.core.str(hex.call(null, 29)), cljs.core.str(hex.call(null, 30))].join(""));
}, clojure.test.check.generators.vector.call(null, clojure.test.check.generators.choose.call(null, 0, 15), 31)));
clojure.test.check.generators.simple_type = clojure.test.check.generators.one_of.call(null, new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.int$, clojure.test.check.generators.large_integer, clojure.test.check.generators.double$, clojure.test.check.generators.char$, clojure.test.check.generators.string, clojure.test.check.generators.ratio, clojure.test.check.generators.boolean$, clojure.test.check.generators.keyword, clojure.test.check.generators.keyword_ns, 
clojure.test.check.generators.symbol, clojure.test.check.generators.symbol_ns, clojure.test.check.generators.uuid], null));
clojure.test.check.generators.simple_type_printable = clojure.test.check.generators.one_of.call(null, new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.int$, clojure.test.check.generators.large_integer, clojure.test.check.generators.double$, clojure.test.check.generators.char_ascii, clojure.test.check.generators.string_ascii, clojure.test.check.generators.ratio, clojure.test.check.generators.boolean$, clojure.test.check.generators.keyword, 
clojure.test.check.generators.keyword_ns, clojure.test.check.generators.symbol, clojure.test.check.generators.symbol_ns, clojure.test.check.generators.uuid], null));
clojure.test.check.generators.container_type = function clojure$test$check$generators$container_type(inner_type) {
  return clojure.test.check.generators.one_of.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.vector.call(null, inner_type), clojure.test.check.generators.list.call(null, inner_type), clojure.test.check.generators.map.call(null, inner_type, inner_type)], null));
};
clojure.test.check.generators.recursive_helper = function clojure$test$check$generators$recursive_helper(container_gen_fn, scalar_gen, scalar_size, children_size, height) {
  if (height === 0) {
    return clojure.test.check.generators.resize.call(null, scalar_size, scalar_gen);
  } else {
    return clojure.test.check.generators.resize.call(null, children_size, container_gen_fn.call(null, clojure$test$check$generators$recursive_helper.call(null, container_gen_fn, scalar_gen, scalar_size, children_size, height - 1)));
  }
};
clojure.test.check.generators.recursive_gen = function clojure$test$check$generators$recursive_gen(container_gen_fn, scalar_gen) {
  if (cljs.core.truth_(clojure.test.check.generators.generator_QMARK_.call(null, scalar_gen))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Second arg to recursive-gen must be a generator"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "generator?", "generator?", 522926188, null), new cljs.core.Symbol(null, "scalar-gen", "scalar-gen", -503972759, null))))].join(""));
  }
  return clojure.test.check.generators.sized.call(null, function(size) {
    return clojure.test.check.generators.bind.call(null, clojure.test.check.generators.choose.call(null, 1, 5), function(height) {
      var children_size = Math.pow(size, 1 / height);
      return clojure.test.check.generators.recursive_helper.call(null, container_gen_fn, scalar_gen, size, children_size, height);
    });
  });
};
clojure.test.check.generators.any = clojure.test.check.generators.recursive_gen.call(null, clojure.test.check.generators.container_type, clojure.test.check.generators.simple_type);
clojure.test.check.generators.any_printable = clojure.test.check.generators.recursive_gen.call(null, clojure.test.check.generators.container_type, clojure.test.check.generators.simple_type_printable);
clojure.test.check.generators.let$ = function clojure$test$check$generators$let(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___10078 = arguments.length;
  var i__5727__auto___10079 = 0;
  while (true) {
    if (i__5727__auto___10079 < len__5726__auto___10078) {
      args__5733__auto__.push(arguments[i__5727__auto___10079]);
      var G__10080 = i__5727__auto___10079 + 1;
      i__5727__auto___10079 = G__10080;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 3 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(3), 0) : null;
  return clojure.test.check.generators.let$.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5734__auto__);
};
clojure.test.check.generators.let$.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, body) {
  if (cljs.core.vector_QMARK_.call(null, bindings)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First arg to gen/let must be a vector of bindings."), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Symbol(null, "bindings", "bindings", -1383038577, null))))].join(""));
  }
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, bindings))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("gen/let requires an even number of forms in binding vector"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "bindings", "bindings", -1383038577, null)))))].join(""));
  }
  if (cljs.core.empty_QMARK_.call(null, bindings)) {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("core", "let", "core/let", 352953613, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "val__10072__auto__", "val__10072__auto__", 1934003943, null)), 
    cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), body))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("clojure.test.check.generators", "generator?", "clojure.test.check.generators/generator?", -1378210460, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "val__10072__auto__", "val__10072__auto__", 1934003943, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
    "val__10072__auto__", "val__10072__auto__", 1934003943, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("clojure.test.check.generators", "return", "clojure.test.check.generators/return", 1744522038, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "val__10072__auto__", "val__10072__auto__", 1934003943, 
    null)))))))))))));
  } else {
    var vec__10077 = bindings;
    var binding = cljs.core.nth.call(null, vec__10077, 0, null);
    var gen = cljs.core.nth.call(null, vec__10077, 1, null);
    var more = cljs.core.nthnext.call(null, vec__10077, 2);
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("clojure.test.check.generators", "bind", "clojure.test.check.generators/bind", -361313906, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gen), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
    "fn", "cljs.core/fn", -1065745098, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, binding)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("clojure.test.check.generators", 
    "let", "clojure.test.check.generators/let", -2079390126, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, more))))), body)))))))))));
  }
};
clojure.test.check.generators.let$.cljs$lang$maxFixedArity = 3;
clojure.test.check.generators.let$.cljs$lang$applyTo = function(seq10073) {
  var G__10074 = cljs.core.first.call(null, seq10073);
  var seq10073__$1 = cljs.core.next.call(null, seq10073);
  var G__10075 = cljs.core.first.call(null, seq10073__$1);
  var seq10073__$2 = cljs.core.next.call(null, seq10073__$1);
  var G__10076 = cljs.core.first.call(null, seq10073__$2);
  var seq10073__$3 = cljs.core.next.call(null, seq10073__$2);
  return clojure.test.check.generators.let$.cljs$core$IFn$_invoke$arity$variadic(G__10074, G__10075, G__10076, seq10073__$3);
};
clojure.test.check.generators.let$.cljs$lang$macro = true;
goog.provide("cljs.pprint");
goog.require("cljs.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.pprint.print = function cljs$pprint$print(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___10237 = arguments.length;
  var i__5727__auto___10238 = 0;
  while (true) {
    if (i__5727__auto___10238 < len__5726__auto___10237) {
      args__5733__auto__.push(arguments[i__5727__auto___10238]);
      var G__10239 = i__5727__auto___10238 + 1;
      i__5727__auto___10238 = G__10239;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.pprint.print.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.pprint.print.cljs$core$IFn$_invoke$arity$variadic = function(more) {
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, cljs.core.apply.call(null, cljs.core.print_str, more));
};
cljs.pprint.print.cljs$lang$maxFixedArity = 0;
cljs.pprint.print.cljs$lang$applyTo = function(seq10236) {
  return cljs.pprint.print.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq10236));
};
cljs.pprint.println = function cljs$pprint$println(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___10241 = arguments.length;
  var i__5727__auto___10242 = 0;
  while (true) {
    if (i__5727__auto___10242 < len__5726__auto___10241) {
      args__5733__auto__.push(arguments[i__5727__auto___10242]);
      var G__10243 = i__5727__auto___10242 + 1;
      i__5727__auto___10242 = G__10243;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.pprint.println.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.pprint.println.cljs$core$IFn$_invoke$arity$variadic = function(more) {
  cljs.core.apply.call(null, cljs.pprint.print, more);
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "\n");
};
cljs.pprint.println.cljs$lang$maxFixedArity = 0;
cljs.pprint.println.cljs$lang$applyTo = function(seq10240) {
  return cljs.pprint.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq10240));
};
cljs.pprint.print_char = function cljs$pprint$print_char(c) {
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, function() {
    var pred__10247 = cljs.core._EQ_;
    var expr__10248 = c;
    if (cljs.core.truth_(pred__10247.call(null, "\b", expr__10248))) {
      return "\\backspace";
    } else {
      if (cljs.core.truth_(pred__10247.call(null, "\t", expr__10248))) {
        return "\\tab";
      } else {
        if (cljs.core.truth_(pred__10247.call(null, "\n", expr__10248))) {
          return "\\newline";
        } else {
          if (cljs.core.truth_(pred__10247.call(null, "\f", expr__10248))) {
            return "\\formfeed";
          } else {
            if (cljs.core.truth_(pred__10247.call(null, "\r", expr__10248))) {
              return "\\return";
            } else {
              if (cljs.core.truth_(pred__10247.call(null, '"', expr__10248))) {
                return '\\"';
              } else {
                if (cljs.core.truth_(pred__10247.call(null, "\\", expr__10248))) {
                  return "\\\\";
                } else {
                  return [cljs.core.str("\\"), cljs.core.str(c)].join("");
                }
              }
            }
          }
        }
      }
    }
  }());
};
cljs.pprint.pr = function cljs$pprint$pr(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___10251 = arguments.length;
  var i__5727__auto___10252 = 0;
  while (true) {
    if (i__5727__auto___10252 < len__5726__auto___10251) {
      args__5733__auto__.push(arguments[i__5727__auto___10252]);
      var G__10253 = i__5727__auto___10252 + 1;
      i__5727__auto___10252 = G__10253;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.pprint.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.pprint.pr.cljs$core$IFn$_invoke$arity$variadic = function(more) {
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, cljs.core.apply.call(null, cljs.core.pr_str, more));
};
cljs.pprint.pr.cljs$lang$maxFixedArity = 0;
cljs.pprint.pr.cljs$lang$applyTo = function(seq10250) {
  return cljs.pprint.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq10250));
};
cljs.pprint.prn = function cljs$pprint$prn(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___10255 = arguments.length;
  var i__5727__auto___10256 = 0;
  while (true) {
    if (i__5727__auto___10256 < len__5726__auto___10255) {
      args__5733__auto__.push(arguments[i__5727__auto___10256]);
      var G__10257 = i__5727__auto___10256 + 1;
      i__5727__auto___10256 = G__10257;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 0 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(0), 0) : null;
  return cljs.pprint.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__5734__auto__);
};
cljs.pprint.prn.cljs$core$IFn$_invoke$arity$variadic = function(more) {
  cljs.core.apply.call(null, cljs.pprint.pr, more);
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "\n");
};
cljs.pprint.prn.cljs$lang$maxFixedArity = 0;
cljs.pprint.prn.cljs$lang$applyTo = function(seq10254) {
  return cljs.pprint.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq10254));
};
cljs.pprint.float_QMARK_ = function cljs$pprint$float_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && !(parseFloat(n) === parseInt(n, 10));
};
cljs.pprint.char_code = function cljs$pprint$char_code(c) {
  if (typeof c === "number") {
    return c;
  } else {
    if (typeof c === "string" && c.length === 1) {
      return c.charCodeAt(0);
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.pprint.map_passing_context = function cljs$pprint$map_passing_context(func, initial_context, lis) {
  var context = initial_context;
  var lis__$1 = lis;
  var acc = cljs.core.PersistentVector.EMPTY;
  while (true) {
    if (cljs.core.empty_QMARK_.call(null, lis__$1)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [acc, context], null);
    } else {
      var this$ = cljs.core.first.call(null, lis__$1);
      var remainder = cljs.core.next.call(null, lis__$1);
      var vec__10259 = cljs.core.apply.call(null, func, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$, context], null));
      var result = cljs.core.nth.call(null, vec__10259, 0, null);
      var new_context = cljs.core.nth.call(null, vec__10259, 1, null);
      var G__10260 = new_context;
      var G__10261 = remainder;
      var G__10262 = cljs.core.conj.call(null, acc, result);
      context = G__10260;
      lis__$1 = G__10261;
      acc = G__10262;
      continue;
    }
    break;
  }
};
cljs.pprint.consume = function cljs$pprint$consume(func, initial_context) {
  var context = initial_context;
  var acc = cljs.core.PersistentVector.EMPTY;
  while (true) {
    var vec__10264 = cljs.core.apply.call(null, func, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [context], null));
    var result = cljs.core.nth.call(null, vec__10264, 0, null);
    var new_context = cljs.core.nth.call(null, vec__10264, 1, null);
    if (cljs.core.not.call(null, result)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [acc, new_context], null);
    } else {
      var G__10265 = new_context;
      var G__10266 = cljs.core.conj.call(null, acc, result);
      context = G__10265;
      acc = G__10266;
      continue;
    }
    break;
  }
};
cljs.pprint.consume_while = function cljs$pprint$consume_while(func, initial_context) {
  var context = initial_context;
  var acc = cljs.core.PersistentVector.EMPTY;
  while (true) {
    var vec__10268 = cljs.core.apply.call(null, func, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [context], null));
    var result = cljs.core.nth.call(null, vec__10268, 0, null);
    var continue$ = cljs.core.nth.call(null, vec__10268, 1, null);
    var new_context = cljs.core.nth.call(null, vec__10268, 2, null);
    if (cljs.core.not.call(null, continue$)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [acc, context], null);
    } else {
      var G__10269 = new_context;
      var G__10270 = cljs.core.conj.call(null, acc, result);
      context = G__10269;
      acc = G__10270;
      continue;
    }
    break;
  }
};
cljs.pprint.unzip_map = function cljs$pprint$unzip_map(m) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__5440__auto__ = function cljs$pprint$unzip_map_$_iter__10295(s__10296) {
      return new cljs.core.LazySeq(null, function() {
        var s__10296__$1 = s__10296;
        while (true) {
          var temp__4425__auto__ = cljs.core.seq.call(null, s__10296__$1);
          if (temp__4425__auto__) {
            var s__10296__$2 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__10296__$2)) {
              var c__5438__auto__ = cljs.core.chunk_first.call(null, s__10296__$2);
              var size__5439__auto__ = cljs.core.count.call(null, c__5438__auto__);
              var b__10298 = cljs.core.chunk_buffer.call(null, size__5439__auto__);
              if (function() {
                var i__10297 = 0;
                while (true) {
                  if (i__10297 < size__5439__auto__) {
                    var vec__10303 = cljs.core._nth.call(null, c__5438__auto__, i__10297);
                    var k = cljs.core.nth.call(null, vec__10303, 0, null);
                    var vec__10304 = cljs.core.nth.call(null, vec__10303, 1, null);
                    var v1 = cljs.core.nth.call(null, vec__10304, 0, null);
                    var v2 = cljs.core.nth.call(null, vec__10304, 1, null);
                    cljs.core.chunk_append.call(null, b__10298, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v1], null));
                    var G__10319 = i__10297 + 1;
                    i__10297 = G__10319;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10298), cljs$pprint$unzip_map_$_iter__10295.call(null, cljs.core.chunk_rest.call(null, s__10296__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10298), null);
              }
            } else {
              var vec__10305 = cljs.core.first.call(null, s__10296__$2);
              var k = cljs.core.nth.call(null, vec__10305, 0, null);
              var vec__10306 = cljs.core.nth.call(null, vec__10305, 1, null);
              var v1 = cljs.core.nth.call(null, vec__10306, 0, null);
              var v2 = cljs.core.nth.call(null, vec__10306, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v1], null), cljs$pprint$unzip_map_$_iter__10295.call(null, cljs.core.rest.call(null, s__10296__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5440__auto__.call(null, m);
  }()), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__5440__auto__ = function cljs$pprint$unzip_map_$_iter__10307(s__10308) {
      return new cljs.core.LazySeq(null, function() {
        var s__10308__$1 = s__10308;
        while (true) {
          var temp__4425__auto__ = cljs.core.seq.call(null, s__10308__$1);
          if (temp__4425__auto__) {
            var s__10308__$2 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__10308__$2)) {
              var c__5438__auto__ = cljs.core.chunk_first.call(null, s__10308__$2);
              var size__5439__auto__ = cljs.core.count.call(null, c__5438__auto__);
              var b__10310 = cljs.core.chunk_buffer.call(null, size__5439__auto__);
              if (function() {
                var i__10309 = 0;
                while (true) {
                  if (i__10309 < size__5439__auto__) {
                    var vec__10315 = cljs.core._nth.call(null, c__5438__auto__, i__10309);
                    var k = cljs.core.nth.call(null, vec__10315, 0, null);
                    var vec__10316 = cljs.core.nth.call(null, vec__10315, 1, null);
                    var v1 = cljs.core.nth.call(null, vec__10316, 0, null);
                    var v2 = cljs.core.nth.call(null, vec__10316, 1, null);
                    cljs.core.chunk_append.call(null, b__10310, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v2], null));
                    var G__10320 = i__10309 + 1;
                    i__10309 = G__10320;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10310), cljs$pprint$unzip_map_$_iter__10307.call(null, cljs.core.chunk_rest.call(null, s__10308__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10310), null);
              }
            } else {
              var vec__10317 = cljs.core.first.call(null, s__10308__$2);
              var k = cljs.core.nth.call(null, vec__10317, 0, null);
              var vec__10318 = cljs.core.nth.call(null, vec__10317, 1, null);
              var v1 = cljs.core.nth.call(null, vec__10318, 0, null);
              var v2 = cljs.core.nth.call(null, vec__10318, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v2], null), cljs$pprint$unzip_map_$_iter__10307.call(null, cljs.core.rest.call(null, s__10308__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5440__auto__.call(null, m);
  }())], null);
};
cljs.pprint.tuple_map = function cljs$pprint$tuple_map(m, v1) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__5440__auto__ = function cljs$pprint$tuple_map_$_iter__10329(s__10330) {
      return new cljs.core.LazySeq(null, function() {
        var s__10330__$1 = s__10330;
        while (true) {
          var temp__4425__auto__ = cljs.core.seq.call(null, s__10330__$1);
          if (temp__4425__auto__) {
            var s__10330__$2 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__10330__$2)) {
              var c__5438__auto__ = cljs.core.chunk_first.call(null, s__10330__$2);
              var size__5439__auto__ = cljs.core.count.call(null, c__5438__auto__);
              var b__10332 = cljs.core.chunk_buffer.call(null, size__5439__auto__);
              if (function() {
                var i__10331 = 0;
                while (true) {
                  if (i__10331 < size__5439__auto__) {
                    var vec__10335 = cljs.core._nth.call(null, c__5438__auto__, i__10331);
                    var k = cljs.core.nth.call(null, vec__10335, 0, null);
                    var v = cljs.core.nth.call(null, vec__10335, 1, null);
                    cljs.core.chunk_append.call(null, b__10332, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, v1], null)], null));
                    var G__10337 = i__10331 + 1;
                    i__10331 = G__10337;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10332), cljs$pprint$tuple_map_$_iter__10329.call(null, cljs.core.chunk_rest.call(null, s__10330__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10332), null);
              }
            } else {
              var vec__10336 = cljs.core.first.call(null, s__10330__$2);
              var k = cljs.core.nth.call(null, vec__10336, 0, null);
              var v = cljs.core.nth.call(null, vec__10336, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, v1], null)], null), cljs$pprint$tuple_map_$_iter__10329.call(null, cljs.core.rest.call(null, s__10330__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5440__auto__.call(null, m);
  }());
};
cljs.pprint.rtrim = function cljs$pprint$rtrim(s, c) {
  var len = cljs.core.count.call(null, s);
  if (len > 0 && cljs.core._EQ_.call(null, cljs.core.nth.call(null, s, cljs.core.count.call(null, s) - 1), c)) {
    var n = len - 1;
    while (true) {
      if (n < 0) {
        return "";
      } else {
        if (!cljs.core._EQ_.call(null, cljs.core.nth.call(null, s, n), c)) {
          return cljs.core.subs.call(null, s, 0, n + 1);
        } else {
          var G__10338 = n - 1;
          n = G__10338;
          continue;
        }
      }
      break;
    }
  } else {
    return s;
  }
};
cljs.pprint.ltrim = function cljs$pprint$ltrim(s, c) {
  var len = cljs.core.count.call(null, s);
  if (len > 0 && cljs.core._EQ_.call(null, cljs.core.nth.call(null, s, 0), c)) {
    var n = 0;
    while (true) {
      if (cljs.core._EQ_.call(null, n, len) || !cljs.core._EQ_.call(null, cljs.core.nth.call(null, s, n), c)) {
        return cljs.core.subs.call(null, s, n);
      } else {
        var G__10339 = n + 1;
        n = G__10339;
        continue;
      }
      break;
    }
  } else {
    return s;
  }
};
cljs.pprint.prefix_count = function cljs$pprint$prefix_count(aseq, val) {
  var test = cljs.core.coll_QMARK_.call(null, val) ? cljs.core.set.call(null, val) : cljs.core.PersistentHashSet.fromArray([val], true);
  var pos = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, pos, cljs.core.count.call(null, aseq)) || cljs.core.not.call(null, test.call(null, cljs.core.nth.call(null, aseq, pos)))) {
      return pos;
    } else {
      var G__10340 = pos + 1;
      pos = G__10340;
      continue;
    }
    break;
  }
};
cljs.pprint.IPrettyFlush = function() {
};
cljs.pprint._ppflush = function cljs$pprint$_ppflush(pp) {
  if (!(pp == null) && !(pp.cljs$pprint$IPrettyFlush$_ppflush$arity$1 == null)) {
    return pp.cljs$pprint$IPrettyFlush$_ppflush$arity$1(pp);
  } else {
    var x__5323__auto__ = pp == null ? null : pp;
    var m__5324__auto__ = cljs.pprint._ppflush[goog.typeOf(x__5323__auto__)];
    if (!(m__5324__auto__ == null)) {
      return m__5324__auto__.call(null, pp);
    } else {
      var m__5324__auto____$1 = cljs.pprint._ppflush["_"];
      if (!(m__5324__auto____$1 == null)) {
        return m__5324__auto____$1.call(null, pp);
      } else {
        throw cljs.core.missing_protocol.call(null, "IPrettyFlush.-ppflush", pp);
      }
    }
  }
};
cljs.pprint._STAR_default_page_width_STAR_ = 72;
cljs.pprint.get_field = function cljs$pprint$get_field(this$, sym) {
  return sym.call(null, cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
};
cljs.pprint.set_field = function cljs$pprint$set_field(this$, sym, new_val) {
  return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, sym, new_val);
};
cljs.pprint.get_column = function cljs$pprint$get_column(this$) {
  return cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "cur", "cur", 1153190599));
};
cljs.pprint.get_line = function cljs$pprint$get_line(this$) {
  return cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "line", "line", 212345235));
};
cljs.pprint.get_max_column = function cljs$pprint$get_max_column(this$) {
  return cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "max", "max", 61366548));
};
cljs.pprint.set_max_column = function cljs$pprint$set_max_column(this$, new_max) {
  cljs.pprint.set_field.call(null, this$, new cljs.core.Keyword(null, "max", "max", 61366548), new_max);
  return null;
};
cljs.pprint.get_writer = function cljs$pprint$get_writer(this$) {
  return cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "base", "base", 185279322));
};
cljs.pprint.c_write_char = function cljs$pprint$c_write_char(this$, c) {
  if (cljs.core._EQ_.call(null, c, "\n")) {
    cljs.pprint.set_field.call(null, this$, new cljs.core.Keyword(null, "cur", "cur", 1153190599), 0);
    cljs.pprint.set_field.call(null, this$, new cljs.core.Keyword(null, "line", "line", 212345235), cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "line", "line", 212345235)) + 1);
  } else {
    cljs.pprint.set_field.call(null, this$, new cljs.core.Keyword(null, "cur", "cur", 1153190599), cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "cur", "cur", 1153190599)) + 1);
  }
  return cljs.core._write.call(null, cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "base", "base", 185279322)), c);
};
cljs.pprint.column_writer = function cljs$pprint$column_writer(var_args) {
  var args10342 = [];
  var len__5726__auto___10351 = arguments.length;
  var i__5727__auto___10352 = 0;
  while (true) {
    if (i__5727__auto___10352 < len__5726__auto___10351) {
      args10342.push(arguments[i__5727__auto___10352]);
      var G__10353 = i__5727__auto___10352 + 1;
      i__5727__auto___10352 = G__10353;
      continue;
    } else {
    }
    break;
  }
  var G__10344 = args10342.length;
  switch(G__10344) {
    case 1:
      return cljs.pprint.column_writer.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.pprint.column_writer.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10342.length)].join(""));;
  }
};
cljs.pprint.column_writer.cljs$core$IFn$_invoke$arity$1 = function(writer) {
  return cljs.pprint.column_writer.call(null, writer, cljs.pprint._STAR_default_page_width_STAR_);
};
cljs.pprint.column_writer.cljs$core$IFn$_invoke$arity$2 = function(writer, max_columns) {
  var fields = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "max", "max", 61366548), max_columns, new cljs.core.Keyword(null, "cur", "cur", 1153190599), 0, new cljs.core.Keyword(null, "line", "line", 212345235), 0, new cljs.core.Keyword(null, "base", "base", 185279322), writer], null));
  if (typeof cljs.pprint.t_cljs$pprint10345 !== "undefined") {
  } else {
    cljs.pprint.t_cljs$pprint10345 = function(writer, max_columns, fields, meta10346) {
      this.writer = writer;
      this.max_columns = max_columns;
      this.fields = fields;
      this.meta10346 = meta10346;
      this.cljs$lang$protocol_mask$partition0$ = 1074167808;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.pprint.t_cljs$pprint10345.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(fields) {
      return function(_10347, meta10346__$1) {
        var self__ = this;
        var _10347__$1 = this;
        return new cljs.pprint.t_cljs$pprint10345(self__.writer, self__.max_columns, self__.fields, meta10346__$1);
      };
    }(fields);
    cljs.pprint.t_cljs$pprint10345.prototype.cljs$core$IMeta$_meta$arity$1 = function(fields) {
      return function(_10347) {
        var self__ = this;
        var _10347__$1 = this;
        return self__.meta10346;
      };
    }(fields);
    cljs.pprint.t_cljs$pprint10345.prototype.cljs$core$IDeref$_deref$arity$1 = function(fields) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return self__.fields;
      };
    }(fields);
    cljs.pprint.t_cljs$pprint10345.prototype.cljs$core$IWriter$_flush$arity$1 = function(fields) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core._flush.call(null, self__.writer);
      };
    }(fields);
    cljs.pprint.t_cljs$pprint10345.prototype.cljs$core$IWriter$_write$arity$2 = function(fields) {
      return function(this$, x) {
        var self__ = this;
        var this$__$1 = this;
        var pred__10348 = cljs.core._EQ_;
        var expr__10349 = cljs.core.type.call(null, x);
        if (cljs.core.truth_(pred__10348.call(null, String, expr__10349))) {
          var s = x;
          var nl = s.lastIndexOf("\n");
          if (nl < 0) {
            cljs.pprint.set_field.call(null, this$__$1, new cljs.core.Keyword(null, "cur", "cur", 1153190599), cljs.pprint.get_field.call(null, this$__$1, new cljs.core.Keyword(null, "cur", "cur", 1153190599)) + cljs.core.count.call(null, s));
          } else {
            cljs.pprint.set_field.call(null, this$__$1, new cljs.core.Keyword(null, "cur", "cur", 1153190599), cljs.core.count.call(null, s) - nl - 1);
            cljs.pprint.set_field.call(null, this$__$1, new cljs.core.Keyword(null, "line", "line", 212345235), cljs.pprint.get_field.call(null, this$__$1, new cljs.core.Keyword(null, "line", "line", 212345235)) + cljs.core.count.call(null, cljs.core.filter.call(null, function(s, nl, pred__10348, expr__10349, this$__$1, fields) {
              return function(p1__10341_SHARP_) {
                return cljs.core._EQ_.call(null, p1__10341_SHARP_, "\n");
              };
            }(s, nl, pred__10348, expr__10349, this$__$1, fields), s)));
          }
          return cljs.core._write.call(null, cljs.pprint.get_field.call(null, this$__$1, new cljs.core.Keyword(null, "base", "base", 185279322)), s);
        } else {
          if (cljs.core.truth_(pred__10348.call(null, Number, expr__10349))) {
            return cljs.pprint.c_write_char.call(null, this$__$1, x);
          } else {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__10349)].join(""));
          }
        }
      };
    }(fields);
    cljs.pprint.t_cljs$pprint10345.getBasis = function(fields) {
      return function() {
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "max-columns", "max-columns", -912112507, null), new cljs.core.Symbol(null, "fields", "fields", -291534703, null), new cljs.core.Symbol(null, "meta10346", "meta10346", -1354002353, null)], null);
      };
    }(fields);
    cljs.pprint.t_cljs$pprint10345.cljs$lang$type = true;
    cljs.pprint.t_cljs$pprint10345.cljs$lang$ctorStr = "cljs.pprint/t_cljs$pprint10345";
    cljs.pprint.t_cljs$pprint10345.cljs$lang$ctorPrWriter = function(fields) {
      return function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
        return cljs.core._write.call(null, writer__5267__auto__, "cljs.pprint/t_cljs$pprint10345");
      };
    }(fields);
    cljs.pprint.__GT_t_cljs$pprint10345 = function(fields) {
      return function cljs$pprint$__GT_t_cljs$pprint10345(writer__$1, max_columns__$1, fields__$1, meta10346) {
        return new cljs.pprint.t_cljs$pprint10345(writer__$1, max_columns__$1, fields__$1, meta10346);
      };
    }(fields);
  }
  return new cljs.pprint.t_cljs$pprint10345(writer, max_columns, fields, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.pprint.column_writer.cljs$lang$maxFixedArity = 2;
cljs.pprint.get_miser_width;
cljs.pprint.logical_block = function(parent, section, start_col, indent, done_nl, intra_block_nl, prefix, per_line_prefix, suffix, logical_block_callback, __meta, __extmap, __hash) {
  this.parent = parent;
  this.section = section;
  this.start_col = start_col;
  this.indent = indent;
  this.done_nl = done_nl;
  this.intra_block_nl = intra_block_nl;
  this.prefix = prefix;
  this.per_line_prefix = per_line_prefix;
  this.suffix = suffix;
  this.logical_block_callback = logical_block_callback;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.logical_block.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__5282__auto__, k__5283__auto__) {
  var self__ = this;
  var this__5282__auto____$1 = this;
  return cljs.core._lookup.call(null, this__5282__auto____$1, k__5283__auto__, null);
};
cljs.pprint.logical_block.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__5284__auto__, k10356, else__5285__auto__) {
  var self__ = this;
  var this__5284__auto____$1 = this;
  var G__10358 = k10356 instanceof cljs.core.Keyword ? k10356.fqn : null;
  switch(G__10358) {
    case "suffix":
      return self__.suffix;
      break;
    case "indent":
      return self__.indent;
      break;
    case "parent":
      return self__.parent;
      break;
    case "section":
      return self__.section;
      break;
    case "done-nl":
      return self__.done_nl;
      break;
    case "start-col":
      return self__.start_col;
      break;
    case "prefix":
      return self__.prefix;
      break;
    case "per-line-prefix":
      return self__.per_line_prefix;
      break;
    case "logical-block-callback":
      return self__.logical_block_callback;
      break;
    case "intra-block-nl":
      return self__.intra_block_nl;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k10356, else__5285__auto__);
  }
};
cljs.pprint.logical_block.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__5296__auto__, writer__5297__auto__, opts__5298__auto__) {
  var self__ = this;
  var this__5296__auto____$1 = this;
  var pr_pair__5299__auto__ = function(this__5296__auto____$1) {
    return function(keyval__5300__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, cljs.core.pr_writer, "", " ", "", opts__5298__auto__, keyval__5300__auto__);
    };
  }(this__5296__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, pr_pair__5299__auto__, "#cljs.pprint.logical-block{", ", ", "}", opts__5298__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parent", "parent", -878878779), self__.parent], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "section", "section", -300141526), self__.section], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-col", "start-col", 668080143), self__.start_col], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "indent", "indent", -148200125), self__.indent], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340), self__.done_nl], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875), self__.intra_block_nl], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465), self__.prefix], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813), self__.per_line_prefix], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "suffix", "suffix", 367373057), self__.suffix], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194), self__.logical_block_callback], null)], null), 
  self__.__extmap));
};
cljs.pprint.logical_block.prototype.cljs$core$IIterable$ = true;
cljs.pprint.logical_block.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__10355) {
  var self__ = this;
  var G__10355__$1 = this;
  return new cljs.core.RecordIter(0, G__10355__$1, 10, new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parent", "parent", -878878779), new cljs.core.Keyword(null, "section", "section", -300141526), new cljs.core.Keyword(null, "start-col", "start-col", 668080143), new cljs.core.Keyword(null, "indent", "indent", -148200125), new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340), new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 
  1808826875), new cljs.core.Keyword(null, "prefix", "prefix", -265908465), new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813), new cljs.core.Keyword(null, "suffix", "suffix", 367373057), new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs.pprint.logical_block.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__5280__auto__) {
  var self__ = this;
  var this__5280__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.logical_block.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__5276__auto__) {
  var self__ = this;
  var this__5276__auto____$1 = this;
  return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.logical_block.prototype.cljs$core$ICounted$_count$arity$1 = function(this__5286__auto__) {
  var self__ = this;
  var this__5286__auto____$1 = this;
  return 10 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.logical_block.prototype.cljs$core$IHash$_hash$arity$1 = function(this__5277__auto__) {
  var self__ = this;
  var this__5277__auto____$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_imap.call(null, this__5277__auto____$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.pprint.logical_block.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__5278__auto__, other__5279__auto__) {
  var self__ = this;
  var this__5278__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = other__5279__auto__;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = this__5278__auto____$1.constructor === other__5279__auto__.constructor;
      if (and__4656__auto____$1) {
        return cljs.core.equiv_map.call(null, this__5278__auto____$1, other__5279__auto__);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.logical_block.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__5291__auto__, k__5292__auto__) {
  var self__ = this;
  var this__5291__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [new cljs.core.Keyword(null, "suffix", "suffix", 367373057), null, new cljs.core.Keyword(null, "indent", "indent", -148200125), null, new cljs.core.Keyword(null, "parent", "parent", -878878779), null, new cljs.core.Keyword(null, "section", "section", -300141526), null, new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340), null, new cljs.core.Keyword(null, "start-col", 
  "start-col", 668080143), null, new cljs.core.Keyword(null, "prefix", "prefix", -265908465), null, new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813), null, new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194), null, new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875), null], null), null), k__5292__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__5291__auto____$1), self__.__meta), k__5292__auto__);
  } else {
    return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__5292__auto__)), null);
  }
};
cljs.pprint.logical_block.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__5289__auto__, k__5290__auto__, G__10355) {
  var self__ = this;
  var this__5289__auto____$1 = this;
  var pred__10359 = cljs.core.keyword_identical_QMARK_;
  var expr__10360 = k__5290__auto__;
  if (cljs.core.truth_(pred__10359.call(null, new cljs.core.Keyword(null, "parent", "parent", -878878779), expr__10360))) {
    return new cljs.pprint.logical_block(G__10355, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__10359.call(null, new cljs.core.Keyword(null, "section", "section", -300141526), expr__10360))) {
      return new cljs.pprint.logical_block(self__.parent, G__10355, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__10359.call(null, new cljs.core.Keyword(null, "start-col", "start-col", 668080143), expr__10360))) {
        return new cljs.pprint.logical_block(self__.parent, self__.section, G__10355, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__10359.call(null, new cljs.core.Keyword(null, "indent", "indent", -148200125), expr__10360))) {
          return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, G__10355, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__10359.call(null, new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340), expr__10360))) {
            return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, G__10355, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__10359.call(null, new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875), expr__10360))) {
              return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, G__10355, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__10359.call(null, new cljs.core.Keyword(null, "prefix", "prefix", -265908465), expr__10360))) {
                return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, G__10355, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
              } else {
                if (cljs.core.truth_(pred__10359.call(null, new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813), expr__10360))) {
                  return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, G__10355, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
                } else {
                  if (cljs.core.truth_(pred__10359.call(null, new cljs.core.Keyword(null, "suffix", "suffix", 367373057), expr__10360))) {
                    return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, G__10355, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
                  } else {
                    if (cljs.core.truth_(pred__10359.call(null, new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194), expr__10360))) {
                      return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, G__10355, self__.__meta, self__.__extmap, null);
                    } else {
                      return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__5290__auto__, G__10355), null);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.pprint.logical_block.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__5294__auto__) {
  var self__ = this;
  var this__5294__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parent", "parent", -878878779), self__.parent], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "section", "section", -300141526), self__.section], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-col", "start-col", 668080143), self__.start_col], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "indent", "indent", -148200125), self__.indent], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340), self__.done_nl], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875), self__.intra_block_nl], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465), self__.prefix], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813), self__.per_line_prefix], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "suffix", "suffix", 367373057), self__.suffix], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194), self__.logical_block_callback], null)], null), self__.__extmap));
};
cljs.pprint.logical_block.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__5281__auto__, G__10355) {
  var self__ = this;
  var this__5281__auto____$1 = this;
  return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, G__10355, self__.__extmap, self__.__hash);
};
cljs.pprint.logical_block.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__5287__auto__, entry__5288__auto__) {
  var self__ = this;
  var this__5287__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__5288__auto__)) {
    return cljs.core._assoc.call(null, this__5287__auto____$1, cljs.core._nth.call(null, entry__5288__auto__, 0), cljs.core._nth.call(null, entry__5288__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__5287__auto____$1, entry__5288__auto__);
  }
};
cljs.pprint.logical_block.getBasis = function() {
  return new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "parent", "parent", 761652748, null), new cljs.core.Symbol(null, "section", "section", 1340390001, null), new cljs.core.Symbol(null, "start-col", "start-col", -1986355626, null), new cljs.core.Symbol(null, "indent", "indent", 1492331402, null), new cljs.core.Symbol(null, "done-nl", "done-nl", 1259507187, null), new cljs.core.Symbol(null, "intra-block-nl", "intra-block-nl", -845608894, 
  null), new cljs.core.Symbol(null, "prefix", "prefix", 1374623062, null), new cljs.core.Symbol(null, "per-line-prefix", "per-line-prefix", -1807493956, null), new cljs.core.Symbol(null, "suffix", "suffix", 2007904584, null), new cljs.core.Symbol(null, "logical-block-callback", "logical-block-callback", -1041744575, null)], null);
};
cljs.pprint.logical_block.cljs$lang$type = true;
cljs.pprint.logical_block.cljs$lang$ctorPrSeq = function(this__5316__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/logical-block");
};
cljs.pprint.logical_block.cljs$lang$ctorPrWriter = function(this__5316__auto__, writer__5317__auto__) {
  return cljs.core._write.call(null, writer__5317__auto__, "cljs.pprint/logical-block");
};
cljs.pprint.__GT_logical_block = function cljs$pprint$__GT_logical_block(parent, section, start_col, indent, done_nl, intra_block_nl, prefix, per_line_prefix, suffix, logical_block_callback) {
  return new cljs.pprint.logical_block(parent, section, start_col, indent, done_nl, intra_block_nl, prefix, per_line_prefix, suffix, logical_block_callback, null, null, null);
};
cljs.pprint.map__GT_logical_block = function cljs$pprint$map__GT_logical_block(G__10357) {
  return new cljs.pprint.logical_block((new cljs.core.Keyword(null, "parent", "parent", -878878779)).cljs$core$IFn$_invoke$arity$1(G__10357), (new cljs.core.Keyword(null, "section", "section", -300141526)).cljs$core$IFn$_invoke$arity$1(G__10357), (new cljs.core.Keyword(null, "start-col", "start-col", 668080143)).cljs$core$IFn$_invoke$arity$1(G__10357), (new cljs.core.Keyword(null, "indent", "indent", -148200125)).cljs$core$IFn$_invoke$arity$1(G__10357), (new cljs.core.Keyword(null, "done-nl", "done-nl", 
  -381024340)).cljs$core$IFn$_invoke$arity$1(G__10357), (new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875)).cljs$core$IFn$_invoke$arity$1(G__10357), (new cljs.core.Keyword(null, "prefix", "prefix", -265908465)).cljs$core$IFn$_invoke$arity$1(G__10357), (new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813)).cljs$core$IFn$_invoke$arity$1(G__10357), (new cljs.core.Keyword(null, "suffix", "suffix", 367373057)).cljs$core$IFn$_invoke$arity$1(G__10357), (new cljs.core.Keyword(null, 
  "logical-block-callback", "logical-block-callback", 1612691194)).cljs$core$IFn$_invoke$arity$1(G__10357), null, cljs.core.dissoc.call(null, G__10357, new cljs.core.Keyword(null, "parent", "parent", -878878779), new cljs.core.Keyword(null, "section", "section", -300141526), new cljs.core.Keyword(null, "start-col", "start-col", 668080143), new cljs.core.Keyword(null, "indent", "indent", -148200125), new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340), new cljs.core.Keyword(null, "intra-block-nl", 
  "intra-block-nl", 1808826875), new cljs.core.Keyword(null, "prefix", "prefix", -265908465), new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813), new cljs.core.Keyword(null, "suffix", "suffix", 367373057), new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194)), null);
};
cljs.pprint.ancestor_QMARK_ = function cljs$pprint$ancestor_QMARK_(parent, child) {
  var child__$1 = (new cljs.core.Keyword(null, "parent", "parent", -878878779)).cljs$core$IFn$_invoke$arity$1(child);
  while (true) {
    if (child__$1 == null) {
      return false;
    } else {
      if (parent === child__$1) {
        return true;
      } else {
        var G__10363 = (new cljs.core.Keyword(null, "parent", "parent", -878878779)).cljs$core$IFn$_invoke$arity$1(child__$1);
        child__$1 = G__10363;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.buffer_length = function cljs$pprint$buffer_length(l) {
  var l__$1 = cljs.core.seq.call(null, l);
  if (l__$1) {
    return (new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)).cljs$core$IFn$_invoke$arity$1(cljs.core.last.call(null, l__$1)) - (new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, l__$1));
  } else {
    return 0;
  }
};
cljs.pprint.buffer_blob = function(type_tag, data, trailing_white_space, start_pos, end_pos, __meta, __extmap, __hash) {
  this.type_tag = type_tag;
  this.data = data;
  this.trailing_white_space = trailing_white_space;
  this.start_pos = start_pos;
  this.end_pos = end_pos;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.buffer_blob.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__5282__auto__, k__5283__auto__) {
  var self__ = this;
  var this__5282__auto____$1 = this;
  return cljs.core._lookup.call(null, this__5282__auto____$1, k__5283__auto__, null);
};
cljs.pprint.buffer_blob.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__5284__auto__, k10365, else__5285__auto__) {
  var self__ = this;
  var this__5284__auto____$1 = this;
  var G__10367 = k10365 instanceof cljs.core.Keyword ? k10365.fqn : null;
  switch(G__10367) {
    case "type-tag":
      return self__.type_tag;
      break;
    case "data":
      return self__.data;
      break;
    case "trailing-white-space":
      return self__.trailing_white_space;
      break;
    case "start-pos":
      return self__.start_pos;
      break;
    case "end-pos":
      return self__.end_pos;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k10365, else__5285__auto__);
  }
};
cljs.pprint.buffer_blob.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__5296__auto__, writer__5297__auto__, opts__5298__auto__) {
  var self__ = this;
  var this__5296__auto____$1 = this;
  var pr_pair__5299__auto__ = function(this__5296__auto____$1) {
    return function(keyval__5300__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, cljs.core.pr_writer, "", " ", "", opts__5298__auto__, keyval__5300__auto__);
    };
  }(this__5296__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, pr_pair__5299__auto__, "#cljs.pprint.buffer-blob{", ", ", "}", opts__5298__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "data", "data", -232669377), self__.data], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), self__.trailing_white_space], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.buffer_blob.prototype.cljs$core$IIterable$ = true;
cljs.pprint.buffer_blob.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__10364) {
  var self__ = this;
  var G__10364__$1 = this;
  return new cljs.core.RecordIter(0, G__10364__$1, 5, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "data", "data", -232669377), new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)], null), cljs.core._iterator.call(null, 
  self__.__extmap));
};
cljs.pprint.buffer_blob.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__5280__auto__) {
  var self__ = this;
  var this__5280__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.buffer_blob.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__5276__auto__) {
  var self__ = this;
  var this__5276__auto____$1 = this;
  return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, self__.trailing_white_space, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.buffer_blob.prototype.cljs$core$ICounted$_count$arity$1 = function(this__5286__auto__) {
  var self__ = this;
  var this__5286__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.buffer_blob.prototype.cljs$core$IHash$_hash$arity$1 = function(this__5277__auto__) {
  var self__ = this;
  var this__5277__auto____$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_imap.call(null, this__5277__auto____$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.pprint.buffer_blob.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__5278__auto__, other__5279__auto__) {
  var self__ = this;
  var this__5278__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = other__5279__auto__;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = this__5278__auto____$1.constructor === other__5279__auto__.constructor;
      if (and__4656__auto____$1) {
        return cljs.core.equiv_map.call(null, this__5278__auto____$1, other__5279__auto__);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.buffer_blob.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__5291__auto__, k__5292__auto__) {
  var self__ = this;
  var this__5291__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), null, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), null, new cljs.core.Keyword(null, "data", "data", -232669377), null], null), 
  null), k__5292__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__5291__auto____$1), self__.__meta), k__5292__auto__);
  } else {
    return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, self__.trailing_white_space, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__5292__auto__)), null);
  }
};
cljs.pprint.buffer_blob.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__5289__auto__, k__5290__auto__, G__10364) {
  var self__ = this;
  var this__5289__auto____$1 = this;
  var pred__10368 = cljs.core.keyword_identical_QMARK_;
  var expr__10369 = k__5290__auto__;
  if (cljs.core.truth_(pred__10368.call(null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), expr__10369))) {
    return new cljs.pprint.buffer_blob(G__10364, self__.data, self__.trailing_white_space, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__10368.call(null, new cljs.core.Keyword(null, "data", "data", -232669377), expr__10369))) {
      return new cljs.pprint.buffer_blob(self__.type_tag, G__10364, self__.trailing_white_space, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__10368.call(null, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), expr__10369))) {
        return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, G__10364, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__10368.call(null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), expr__10369))) {
          return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, self__.trailing_white_space, G__10364, self__.end_pos, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__10368.call(null, new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), expr__10369))) {
            return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, self__.trailing_white_space, self__.start_pos, G__10364, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, self__.trailing_white_space, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__5290__auto__, G__10364), null);
          }
        }
      }
    }
  }
};
cljs.pprint.buffer_blob.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__5294__auto__) {
  var self__ = this;
  var this__5294__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", -232669377), self__.data], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), self__.trailing_white_space], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], 
  null)], null), self__.__extmap));
};
cljs.pprint.buffer_blob.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__5281__auto__, G__10364) {
  var self__ = this;
  var this__5281__auto____$1 = this;
  return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, self__.trailing_white_space, self__.start_pos, self__.end_pos, G__10364, self__.__extmap, self__.__hash);
};
cljs.pprint.buffer_blob.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__5287__auto__, entry__5288__auto__) {
  var self__ = this;
  var this__5287__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__5288__auto__)) {
    return cljs.core._assoc.call(null, this__5287__auto____$1, cljs.core._nth.call(null, entry__5288__auto__, 0), cljs.core._nth.call(null, entry__5288__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__5287__auto____$1, entry__5288__auto__);
  }
};
cljs.pprint.buffer_blob.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "type-tag", "type-tag", -233331740, null), new cljs.core.Symbol(null, "data", "data", 1407862150, null), new cljs.core.Symbol(null, "trailing-white-space", "trailing-white-space", -1158428773, null), new cljs.core.Symbol(null, "start-pos", "start-pos", -1985646683, null), new cljs.core.Symbol(null, "end-pos", "end-pos", -3352399, null)], null);
};
cljs.pprint.buffer_blob.cljs$lang$type = true;
cljs.pprint.buffer_blob.cljs$lang$ctorPrSeq = function(this__5316__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/buffer-blob");
};
cljs.pprint.buffer_blob.cljs$lang$ctorPrWriter = function(this__5316__auto__, writer__5317__auto__) {
  return cljs.core._write.call(null, writer__5317__auto__, "cljs.pprint/buffer-blob");
};
cljs.pprint.__GT_buffer_blob = function cljs$pprint$__GT_buffer_blob(type_tag, data, trailing_white_space, start_pos, end_pos) {
  return new cljs.pprint.buffer_blob(type_tag, data, trailing_white_space, start_pos, end_pos, null, null, null);
};
cljs.pprint.map__GT_buffer_blob = function cljs$pprint$map__GT_buffer_blob(G__10366) {
  return new cljs.pprint.buffer_blob((new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(G__10366), (new cljs.core.Keyword(null, "data", "data", -232669377)).cljs$core$IFn$_invoke$arity$1(G__10366), (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(G__10366), (new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086)).cljs$core$IFn$_invoke$arity$1(G__10366), (new cljs.core.Keyword(null, 
  "end-pos", "end-pos", -1643883926)).cljs$core$IFn$_invoke$arity$1(G__10366), null, cljs.core.dissoc.call(null, G__10366, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "data", "data", -232669377), new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)), null);
};
cljs.pprint.make_buffer_blob = function cljs$pprint$make_buffer_blob(data, trailing_white_space, start_pos, end_pos) {
  return new cljs.pprint.buffer_blob(new cljs.core.Keyword(null, "buffer-blob", "buffer-blob", -1830112173), data, trailing_white_space, start_pos, end_pos, null, null, null);
};
cljs.pprint.buffer_blob_QMARK_ = function cljs$pprint$buffer_blob_QMARK_(x__10170__auto__) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(x__10170__auto__), new cljs.core.Keyword(null, "buffer-blob", "buffer-blob", -1830112173));
};
cljs.pprint.nl_t = function(type_tag, type, logical_block, start_pos, end_pos, __meta, __extmap, __hash) {
  this.type_tag = type_tag;
  this.type = type;
  this.logical_block = logical_block;
  this.start_pos = start_pos;
  this.end_pos = end_pos;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.nl_t.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__5282__auto__, k__5283__auto__) {
  var self__ = this;
  var this__5282__auto____$1 = this;
  return cljs.core._lookup.call(null, this__5282__auto____$1, k__5283__auto__, null);
};
cljs.pprint.nl_t.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__5284__auto__, k10373, else__5285__auto__) {
  var self__ = this;
  var this__5284__auto____$1 = this;
  var G__10375 = k10373 instanceof cljs.core.Keyword ? k10373.fqn : null;
  switch(G__10375) {
    case "type-tag":
      return self__.type_tag;
      break;
    case "type":
      return self__.type;
      break;
    case "logical-block":
      return self__.logical_block;
      break;
    case "start-pos":
      return self__.start_pos;
      break;
    case "end-pos":
      return self__.end_pos;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k10373, else__5285__auto__);
  }
};
cljs.pprint.nl_t.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__5296__auto__, writer__5297__auto__, opts__5298__auto__) {
  var self__ = this;
  var this__5296__auto____$1 = this;
  var pr_pair__5299__auto__ = function(this__5296__auto____$1) {
    return function(keyval__5300__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, cljs.core.pr_writer, "", " ", "", opts__5298__auto__, keyval__5300__auto__);
    };
  }(this__5296__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, pr_pair__5299__auto__, "#cljs.pprint.nl-t{", ", ", "}", opts__5298__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "type", "type", 1174270348), self__.type], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.nl_t.prototype.cljs$core$IIterable$ = true;
cljs.pprint.nl_t.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__10372) {
  var self__ = this;
  var G__10372__$1 = this;
  return new cljs.core.RecordIter(0, G__10372__$1, 5, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)], null), cljs.core._iterator.call(null, 
  self__.__extmap));
};
cljs.pprint.nl_t.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__5280__auto__) {
  var self__ = this;
  var this__5280__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.nl_t.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__5276__auto__) {
  var self__ = this;
  var this__5276__auto____$1 = this;
  return new cljs.pprint.nl_t(self__.type_tag, self__.type, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.nl_t.prototype.cljs$core$ICounted$_count$arity$1 = function(this__5286__auto__) {
  var self__ = this;
  var this__5286__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.nl_t.prototype.cljs$core$IHash$_hash$arity$1 = function(this__5277__auto__) {
  var self__ = this;
  var this__5277__auto____$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_imap.call(null, this__5277__auto____$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.pprint.nl_t.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__5278__auto__, other__5279__auto__) {
  var self__ = this;
  var this__5278__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = other__5279__auto__;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = this__5278__auto____$1.constructor === other__5279__auto__.constructor;
      if (and__4656__auto____$1) {
        return cljs.core.equiv_map.call(null, this__5278__auto____$1, other__5279__auto__);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.nl_t.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__5291__auto__, k__5292__auto__) {
  var self__ = this;
  var this__5291__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), null, new cljs.core.Keyword(null, "type", "type", 1174270348), null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), null], null), null), k__5292__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__5291__auto____$1), self__.__meta), k__5292__auto__);
  } else {
    return new cljs.pprint.nl_t(self__.type_tag, self__.type, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__5292__auto__)), null);
  }
};
cljs.pprint.nl_t.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__5289__auto__, k__5290__auto__, G__10372) {
  var self__ = this;
  var this__5289__auto____$1 = this;
  var pred__10376 = cljs.core.keyword_identical_QMARK_;
  var expr__10377 = k__5290__auto__;
  if (cljs.core.truth_(pred__10376.call(null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), expr__10377))) {
    return new cljs.pprint.nl_t(G__10372, self__.type, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__10376.call(null, new cljs.core.Keyword(null, "type", "type", 1174270348), expr__10377))) {
      return new cljs.pprint.nl_t(self__.type_tag, G__10372, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__10376.call(null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), expr__10377))) {
        return new cljs.pprint.nl_t(self__.type_tag, self__.type, G__10372, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__10376.call(null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), expr__10377))) {
          return new cljs.pprint.nl_t(self__.type_tag, self__.type, self__.logical_block, G__10372, self__.end_pos, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__10376.call(null, new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), expr__10377))) {
            return new cljs.pprint.nl_t(self__.type_tag, self__.type, self__.logical_block, self__.start_pos, G__10372, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.pprint.nl_t(self__.type_tag, self__.type, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__5290__auto__, G__10372), null);
          }
        }
      }
    }
  }
};
cljs.pprint.nl_t.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__5294__auto__) {
  var self__ = this;
  var this__5294__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type", "type", 1174270348), self__.type], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), 
  self__.__extmap));
};
cljs.pprint.nl_t.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__5281__auto__, G__10372) {
  var self__ = this;
  var this__5281__auto____$1 = this;
  return new cljs.pprint.nl_t(self__.type_tag, self__.type, self__.logical_block, self__.start_pos, self__.end_pos, G__10372, self__.__extmap, self__.__hash);
};
cljs.pprint.nl_t.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__5287__auto__, entry__5288__auto__) {
  var self__ = this;
  var this__5287__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__5288__auto__)) {
    return cljs.core._assoc.call(null, this__5287__auto____$1, cljs.core._nth.call(null, entry__5288__auto__, 0), cljs.core._nth.call(null, entry__5288__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__5287__auto____$1, entry__5288__auto__);
  }
};
cljs.pprint.nl_t.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "type-tag", "type-tag", -233331740, null), new cljs.core.Symbol(null, "type", "type", -1480165421, null), new cljs.core.Symbol(null, "logical-block", "logical-block", 1059508963, null), new cljs.core.Symbol(null, "start-pos", "start-pos", -1985646683, null), new cljs.core.Symbol(null, "end-pos", "end-pos", -3352399, null)], null);
};
cljs.pprint.nl_t.cljs$lang$type = true;
cljs.pprint.nl_t.cljs$lang$ctorPrSeq = function(this__5316__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/nl-t");
};
cljs.pprint.nl_t.cljs$lang$ctorPrWriter = function(this__5316__auto__, writer__5317__auto__) {
  return cljs.core._write.call(null, writer__5317__auto__, "cljs.pprint/nl-t");
};
cljs.pprint.__GT_nl_t = function cljs$pprint$__GT_nl_t(type_tag, type, logical_block, start_pos, end_pos) {
  return new cljs.pprint.nl_t(type_tag, type, logical_block, start_pos, end_pos, null, null, null);
};
cljs.pprint.map__GT_nl_t = function cljs$pprint$map__GT_nl_t(G__10374) {
  return new cljs.pprint.nl_t((new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(G__10374), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(G__10374), (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(G__10374), (new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086)).cljs$core$IFn$_invoke$arity$1(G__10374), (new cljs.core.Keyword(null, "end-pos", 
  "end-pos", -1643883926)).cljs$core$IFn$_invoke$arity$1(G__10374), null, cljs.core.dissoc.call(null, G__10374, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)), null);
};
cljs.pprint.make_nl_t = function cljs$pprint$make_nl_t(type, logical_block, start_pos, end_pos) {
  return new cljs.pprint.nl_t(new cljs.core.Keyword(null, "nl-t", "nl-t", -1608382114), type, logical_block, start_pos, end_pos, null, null, null);
};
cljs.pprint.nl_t_QMARK_ = function cljs$pprint$nl_t_QMARK_(x__10170__auto__) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(x__10170__auto__), new cljs.core.Keyword(null, "nl-t", "nl-t", -1608382114));
};
cljs.pprint.start_block_t = function(type_tag, logical_block, start_pos, end_pos, __meta, __extmap, __hash) {
  this.type_tag = type_tag;
  this.logical_block = logical_block;
  this.start_pos = start_pos;
  this.end_pos = end_pos;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.start_block_t.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__5282__auto__, k__5283__auto__) {
  var self__ = this;
  var this__5282__auto____$1 = this;
  return cljs.core._lookup.call(null, this__5282__auto____$1, k__5283__auto__, null);
};
cljs.pprint.start_block_t.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__5284__auto__, k10381, else__5285__auto__) {
  var self__ = this;
  var this__5284__auto____$1 = this;
  var G__10383 = k10381 instanceof cljs.core.Keyword ? k10381.fqn : null;
  switch(G__10383) {
    case "type-tag":
      return self__.type_tag;
      break;
    case "logical-block":
      return self__.logical_block;
      break;
    case "start-pos":
      return self__.start_pos;
      break;
    case "end-pos":
      return self__.end_pos;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k10381, else__5285__auto__);
  }
};
cljs.pprint.start_block_t.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__5296__auto__, writer__5297__auto__, opts__5298__auto__) {
  var self__ = this;
  var this__5296__auto____$1 = this;
  var pr_pair__5299__auto__ = function(this__5296__auto____$1) {
    return function(keyval__5300__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, cljs.core.pr_writer, "", " ", "", opts__5298__auto__, keyval__5300__auto__);
    };
  }(this__5296__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, pr_pair__5299__auto__, "#cljs.pprint.start-block-t{", ", ", "}", opts__5298__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.start_block_t.prototype.cljs$core$IIterable$ = true;
cljs.pprint.start_block_t.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__10380) {
  var self__ = this;
  var G__10380__$1 = this;
  return new cljs.core.RecordIter(0, G__10380__$1, 4, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs.pprint.start_block_t.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__5280__auto__) {
  var self__ = this;
  var this__5280__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.start_block_t.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__5276__auto__) {
  var self__ = this;
  var this__5276__auto____$1 = this;
  return new cljs.pprint.start_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.start_block_t.prototype.cljs$core$ICounted$_count$arity$1 = function(this__5286__auto__) {
  var self__ = this;
  var this__5286__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.start_block_t.prototype.cljs$core$IHash$_hash$arity$1 = function(this__5277__auto__) {
  var self__ = this;
  var this__5277__auto____$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_imap.call(null, this__5277__auto____$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.pprint.start_block_t.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__5278__auto__, other__5279__auto__) {
  var self__ = this;
  var this__5278__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = other__5279__auto__;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = this__5278__auto____$1.constructor === other__5279__auto__.constructor;
      if (and__4656__auto____$1) {
        return cljs.core.equiv_map.call(null, this__5278__auto____$1, other__5279__auto__);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.start_block_t.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__5291__auto__, k__5292__auto__) {
  var self__ = this;
  var this__5291__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), null], null), null), k__5292__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__5291__auto____$1), self__.__meta), k__5292__auto__);
  } else {
    return new cljs.pprint.start_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__5292__auto__)), null);
  }
};
cljs.pprint.start_block_t.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__5289__auto__, k__5290__auto__, G__10380) {
  var self__ = this;
  var this__5289__auto____$1 = this;
  var pred__10384 = cljs.core.keyword_identical_QMARK_;
  var expr__10385 = k__5290__auto__;
  if (cljs.core.truth_(pred__10384.call(null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), expr__10385))) {
    return new cljs.pprint.start_block_t(G__10380, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__10384.call(null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), expr__10385))) {
      return new cljs.pprint.start_block_t(self__.type_tag, G__10380, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__10384.call(null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), expr__10385))) {
        return new cljs.pprint.start_block_t(self__.type_tag, self__.logical_block, G__10380, self__.end_pos, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__10384.call(null, new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), expr__10385))) {
          return new cljs.pprint.start_block_t(self__.type_tag, self__.logical_block, self__.start_pos, G__10380, self__.__meta, self__.__extmap, null);
        } else {
          return new cljs.pprint.start_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__5290__auto__, G__10380), null);
        }
      }
    }
  }
};
cljs.pprint.start_block_t.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__5294__auto__) {
  var self__ = this;
  var this__5294__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.start_block_t.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__5281__auto__, G__10380) {
  var self__ = this;
  var this__5281__auto____$1 = this;
  return new cljs.pprint.start_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, G__10380, self__.__extmap, self__.__hash);
};
cljs.pprint.start_block_t.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__5287__auto__, entry__5288__auto__) {
  var self__ = this;
  var this__5287__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__5288__auto__)) {
    return cljs.core._assoc.call(null, this__5287__auto____$1, cljs.core._nth.call(null, entry__5288__auto__, 0), cljs.core._nth.call(null, entry__5288__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__5287__auto____$1, entry__5288__auto__);
  }
};
cljs.pprint.start_block_t.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "type-tag", "type-tag", -233331740, null), new cljs.core.Symbol(null, "logical-block", "logical-block", 1059508963, null), new cljs.core.Symbol(null, "start-pos", "start-pos", -1985646683, null), new cljs.core.Symbol(null, "end-pos", "end-pos", -3352399, null)], null);
};
cljs.pprint.start_block_t.cljs$lang$type = true;
cljs.pprint.start_block_t.cljs$lang$ctorPrSeq = function(this__5316__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/start-block-t");
};
cljs.pprint.start_block_t.cljs$lang$ctorPrWriter = function(this__5316__auto__, writer__5317__auto__) {
  return cljs.core._write.call(null, writer__5317__auto__, "cljs.pprint/start-block-t");
};
cljs.pprint.__GT_start_block_t = function cljs$pprint$__GT_start_block_t(type_tag, logical_block, start_pos, end_pos) {
  return new cljs.pprint.start_block_t(type_tag, logical_block, start_pos, end_pos, null, null, null);
};
cljs.pprint.map__GT_start_block_t = function cljs$pprint$map__GT_start_block_t(G__10382) {
  return new cljs.pprint.start_block_t((new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(G__10382), (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(G__10382), (new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086)).cljs$core$IFn$_invoke$arity$1(G__10382), (new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)).cljs$core$IFn$_invoke$arity$1(G__10382), null, cljs.core.dissoc.call(null, 
  G__10382, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)), null);
};
cljs.pprint.make_start_block_t = function cljs$pprint$make_start_block_t(logical_block, start_pos, end_pos) {
  return new cljs.pprint.start_block_t(new cljs.core.Keyword(null, "start-block-t", "start-block-t", -373430594), logical_block, start_pos, end_pos, null, null, null);
};
cljs.pprint.start_block_t_QMARK_ = function cljs$pprint$start_block_t_QMARK_(x__10170__auto__) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(x__10170__auto__), new cljs.core.Keyword(null, "start-block-t", "start-block-t", -373430594));
};
cljs.pprint.end_block_t = function(type_tag, logical_block, start_pos, end_pos, __meta, __extmap, __hash) {
  this.type_tag = type_tag;
  this.logical_block = logical_block;
  this.start_pos = start_pos;
  this.end_pos = end_pos;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.end_block_t.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__5282__auto__, k__5283__auto__) {
  var self__ = this;
  var this__5282__auto____$1 = this;
  return cljs.core._lookup.call(null, this__5282__auto____$1, k__5283__auto__, null);
};
cljs.pprint.end_block_t.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__5284__auto__, k10389, else__5285__auto__) {
  var self__ = this;
  var this__5284__auto____$1 = this;
  var G__10391 = k10389 instanceof cljs.core.Keyword ? k10389.fqn : null;
  switch(G__10391) {
    case "type-tag":
      return self__.type_tag;
      break;
    case "logical-block":
      return self__.logical_block;
      break;
    case "start-pos":
      return self__.start_pos;
      break;
    case "end-pos":
      return self__.end_pos;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k10389, else__5285__auto__);
  }
};
cljs.pprint.end_block_t.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__5296__auto__, writer__5297__auto__, opts__5298__auto__) {
  var self__ = this;
  var this__5296__auto____$1 = this;
  var pr_pair__5299__auto__ = function(this__5296__auto____$1) {
    return function(keyval__5300__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, cljs.core.pr_writer, "", " ", "", opts__5298__auto__, keyval__5300__auto__);
    };
  }(this__5296__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, pr_pair__5299__auto__, "#cljs.pprint.end-block-t{", ", ", "}", opts__5298__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.end_block_t.prototype.cljs$core$IIterable$ = true;
cljs.pprint.end_block_t.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__10388) {
  var self__ = this;
  var G__10388__$1 = this;
  return new cljs.core.RecordIter(0, G__10388__$1, 4, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs.pprint.end_block_t.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__5280__auto__) {
  var self__ = this;
  var this__5280__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.end_block_t.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__5276__auto__) {
  var self__ = this;
  var this__5276__auto____$1 = this;
  return new cljs.pprint.end_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.end_block_t.prototype.cljs$core$ICounted$_count$arity$1 = function(this__5286__auto__) {
  var self__ = this;
  var this__5286__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.end_block_t.prototype.cljs$core$IHash$_hash$arity$1 = function(this__5277__auto__) {
  var self__ = this;
  var this__5277__auto____$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_imap.call(null, this__5277__auto____$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.pprint.end_block_t.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__5278__auto__, other__5279__auto__) {
  var self__ = this;
  var this__5278__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = other__5279__auto__;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = this__5278__auto____$1.constructor === other__5279__auto__.constructor;
      if (and__4656__auto____$1) {
        return cljs.core.equiv_map.call(null, this__5278__auto____$1, other__5279__auto__);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.end_block_t.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__5291__auto__, k__5292__auto__) {
  var self__ = this;
  var this__5291__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), null], null), null), k__5292__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__5291__auto____$1), self__.__meta), k__5292__auto__);
  } else {
    return new cljs.pprint.end_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__5292__auto__)), null);
  }
};
cljs.pprint.end_block_t.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__5289__auto__, k__5290__auto__, G__10388) {
  var self__ = this;
  var this__5289__auto____$1 = this;
  var pred__10392 = cljs.core.keyword_identical_QMARK_;
  var expr__10393 = k__5290__auto__;
  if (cljs.core.truth_(pred__10392.call(null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), expr__10393))) {
    return new cljs.pprint.end_block_t(G__10388, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__10392.call(null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), expr__10393))) {
      return new cljs.pprint.end_block_t(self__.type_tag, G__10388, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__10392.call(null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), expr__10393))) {
        return new cljs.pprint.end_block_t(self__.type_tag, self__.logical_block, G__10388, self__.end_pos, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__10392.call(null, new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), expr__10393))) {
          return new cljs.pprint.end_block_t(self__.type_tag, self__.logical_block, self__.start_pos, G__10388, self__.__meta, self__.__extmap, null);
        } else {
          return new cljs.pprint.end_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__5290__auto__, G__10388), null);
        }
      }
    }
  }
};
cljs.pprint.end_block_t.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__5294__auto__) {
  var self__ = this;
  var this__5294__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.end_block_t.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__5281__auto__, G__10388) {
  var self__ = this;
  var this__5281__auto____$1 = this;
  return new cljs.pprint.end_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, G__10388, self__.__extmap, self__.__hash);
};
cljs.pprint.end_block_t.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__5287__auto__, entry__5288__auto__) {
  var self__ = this;
  var this__5287__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__5288__auto__)) {
    return cljs.core._assoc.call(null, this__5287__auto____$1, cljs.core._nth.call(null, entry__5288__auto__, 0), cljs.core._nth.call(null, entry__5288__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__5287__auto____$1, entry__5288__auto__);
  }
};
cljs.pprint.end_block_t.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "type-tag", "type-tag", -233331740, null), new cljs.core.Symbol(null, "logical-block", "logical-block", 1059508963, null), new cljs.core.Symbol(null, "start-pos", "start-pos", -1985646683, null), new cljs.core.Symbol(null, "end-pos", "end-pos", -3352399, null)], null);
};
cljs.pprint.end_block_t.cljs$lang$type = true;
cljs.pprint.end_block_t.cljs$lang$ctorPrSeq = function(this__5316__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/end-block-t");
};
cljs.pprint.end_block_t.cljs$lang$ctorPrWriter = function(this__5316__auto__, writer__5317__auto__) {
  return cljs.core._write.call(null, writer__5317__auto__, "cljs.pprint/end-block-t");
};
cljs.pprint.__GT_end_block_t = function cljs$pprint$__GT_end_block_t(type_tag, logical_block, start_pos, end_pos) {
  return new cljs.pprint.end_block_t(type_tag, logical_block, start_pos, end_pos, null, null, null);
};
cljs.pprint.map__GT_end_block_t = function cljs$pprint$map__GT_end_block_t(G__10390) {
  return new cljs.pprint.end_block_t((new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(G__10390), (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(G__10390), (new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086)).cljs$core$IFn$_invoke$arity$1(G__10390), (new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)).cljs$core$IFn$_invoke$arity$1(G__10390), null, cljs.core.dissoc.call(null, 
  G__10390, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)), null);
};
cljs.pprint.make_end_block_t = function cljs$pprint$make_end_block_t(logical_block, start_pos, end_pos) {
  return new cljs.pprint.end_block_t(new cljs.core.Keyword(null, "end-block-t", "end-block-t", 1544648735), logical_block, start_pos, end_pos, null, null, null);
};
cljs.pprint.end_block_t_QMARK_ = function cljs$pprint$end_block_t_QMARK_(x__10170__auto__) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(x__10170__auto__), new cljs.core.Keyword(null, "end-block-t", "end-block-t", 1544648735));
};
cljs.pprint.indent_t = function(type_tag, logical_block, relative_to, offset, start_pos, end_pos, __meta, __extmap, __hash) {
  this.type_tag = type_tag;
  this.logical_block = logical_block;
  this.relative_to = relative_to;
  this.offset = offset;
  this.start_pos = start_pos;
  this.end_pos = end_pos;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.indent_t.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__5282__auto__, k__5283__auto__) {
  var self__ = this;
  var this__5282__auto____$1 = this;
  return cljs.core._lookup.call(null, this__5282__auto____$1, k__5283__auto__, null);
};
cljs.pprint.indent_t.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__5284__auto__, k10397, else__5285__auto__) {
  var self__ = this;
  var this__5284__auto____$1 = this;
  var G__10399 = k10397 instanceof cljs.core.Keyword ? k10397.fqn : null;
  switch(G__10399) {
    case "type-tag":
      return self__.type_tag;
      break;
    case "logical-block":
      return self__.logical_block;
      break;
    case "relative-to":
      return self__.relative_to;
      break;
    case "offset":
      return self__.offset;
      break;
    case "start-pos":
      return self__.start_pos;
      break;
    case "end-pos":
      return self__.end_pos;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k10397, else__5285__auto__);
  }
};
cljs.pprint.indent_t.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__5296__auto__, writer__5297__auto__, opts__5298__auto__) {
  var self__ = this;
  var this__5296__auto____$1 = this;
  var pr_pair__5299__auto__ = function(this__5296__auto____$1) {
    return function(keyval__5300__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, cljs.core.pr_writer, "", " ", "", opts__5298__auto__, keyval__5300__auto__);
    };
  }(this__5296__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, pr_pair__5299__auto__, "#cljs.pprint.indent-t{", ", ", "}", opts__5298__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051), self__.relative_to], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311), self__.offset], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.indent_t.prototype.cljs$core$IIterable$ = true;
cljs.pprint.indent_t.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__10396) {
  var self__ = this;
  var G__10396__$1 = this;
  return new cljs.core.RecordIter(0, G__10396__$1, 6, new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051), new cljs.core.Keyword(null, "offset", "offset", 296498311), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, 
  "end-pos", "end-pos", -1643883926)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs.pprint.indent_t.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__5280__auto__) {
  var self__ = this;
  var this__5280__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.indent_t.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__5276__auto__) {
  var self__ = this;
  var this__5276__auto____$1 = this;
  return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, self__.offset, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.indent_t.prototype.cljs$core$ICounted$_count$arity$1 = function(this__5286__auto__) {
  var self__ = this;
  var this__5286__auto____$1 = this;
  return 6 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.indent_t.prototype.cljs$core$IHash$_hash$arity$1 = function(this__5277__auto__) {
  var self__ = this;
  var this__5277__auto____$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_imap.call(null, this__5277__auto____$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.pprint.indent_t.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__5278__auto__, other__5279__auto__) {
  var self__ = this;
  var this__5278__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = other__5279__auto__;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = this__5278__auto____$1.constructor === other__5279__auto__.constructor;
      if (and__4656__auto____$1) {
        return cljs.core.equiv_map.call(null, this__5278__auto____$1, other__5279__auto__);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.indent_t.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__5291__auto__, k__5292__auto__) {
  var self__ = this;
  var this__5291__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "offset", "offset", 296498311), null, new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), null, new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051), null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), null, new cljs.core.Keyword(null, 
  "start-pos", "start-pos", 668789086), null], null), null), k__5292__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__5291__auto____$1), self__.__meta), k__5292__auto__);
  } else {
    return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, self__.offset, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__5292__auto__)), null);
  }
};
cljs.pprint.indent_t.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__5289__auto__, k__5290__auto__, G__10396) {
  var self__ = this;
  var this__5289__auto____$1 = this;
  var pred__10400 = cljs.core.keyword_identical_QMARK_;
  var expr__10401 = k__5290__auto__;
  if (cljs.core.truth_(pred__10400.call(null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), expr__10401))) {
    return new cljs.pprint.indent_t(G__10396, self__.logical_block, self__.relative_to, self__.offset, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__10400.call(null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), expr__10401))) {
      return new cljs.pprint.indent_t(self__.type_tag, G__10396, self__.relative_to, self__.offset, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__10400.call(null, new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051), expr__10401))) {
        return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, G__10396, self__.offset, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__10400.call(null, new cljs.core.Keyword(null, "offset", "offset", 296498311), expr__10401))) {
          return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, G__10396, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__10400.call(null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), expr__10401))) {
            return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, self__.offset, G__10396, self__.end_pos, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__10400.call(null, new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), expr__10401))) {
              return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, self__.offset, self__.start_pos, G__10396, self__.__meta, self__.__extmap, null);
            } else {
              return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, self__.offset, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__5290__auto__, G__10396), null);
            }
          }
        }
      }
    }
  }
};
cljs.pprint.indent_t.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__5294__auto__) {
  var self__ = this;
  var this__5294__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051), self__.relative_to], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311), self__.offset], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.indent_t.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__5281__auto__, G__10396) {
  var self__ = this;
  var this__5281__auto____$1 = this;
  return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, self__.offset, self__.start_pos, self__.end_pos, G__10396, self__.__extmap, self__.__hash);
};
cljs.pprint.indent_t.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__5287__auto__, entry__5288__auto__) {
  var self__ = this;
  var this__5287__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__5288__auto__)) {
    return cljs.core._assoc.call(null, this__5287__auto____$1, cljs.core._nth.call(null, entry__5288__auto__, 0), cljs.core._nth.call(null, entry__5288__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__5287__auto____$1, entry__5288__auto__);
  }
};
cljs.pprint.indent_t.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "type-tag", "type-tag", -233331740, null), new cljs.core.Symbol(null, "logical-block", "logical-block", 1059508963, null), new cljs.core.Symbol(null, "relative-to", "relative-to", 1170431476, null), new cljs.core.Symbol(null, "offset", "offset", 1937029838, null), new cljs.core.Symbol(null, "start-pos", "start-pos", -1985646683, null), new cljs.core.Symbol(null, "end-pos", "end-pos", 
  -3352399, null)], null);
};
cljs.pprint.indent_t.cljs$lang$type = true;
cljs.pprint.indent_t.cljs$lang$ctorPrSeq = function(this__5316__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/indent-t");
};
cljs.pprint.indent_t.cljs$lang$ctorPrWriter = function(this__5316__auto__, writer__5317__auto__) {
  return cljs.core._write.call(null, writer__5317__auto__, "cljs.pprint/indent-t");
};
cljs.pprint.__GT_indent_t = function cljs$pprint$__GT_indent_t(type_tag, logical_block, relative_to, offset, start_pos, end_pos) {
  return new cljs.pprint.indent_t(type_tag, logical_block, relative_to, offset, start_pos, end_pos, null, null, null);
};
cljs.pprint.map__GT_indent_t = function cljs$pprint$map__GT_indent_t(G__10398) {
  return new cljs.pprint.indent_t((new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(G__10398), (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(G__10398), (new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051)).cljs$core$IFn$_invoke$arity$1(G__10398), (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(G__10398), (new cljs.core.Keyword(null, 
  "start-pos", "start-pos", 668789086)).cljs$core$IFn$_invoke$arity$1(G__10398), (new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)).cljs$core$IFn$_invoke$arity$1(G__10398), null, cljs.core.dissoc.call(null, G__10398, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051), new cljs.core.Keyword(null, "offset", "offset", 296498311), 
  new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)), null);
};
cljs.pprint.make_indent_t = function cljs$pprint$make_indent_t(logical_block, relative_to, offset, start_pos, end_pos) {
  return new cljs.pprint.indent_t(new cljs.core.Keyword(null, "indent-t", "indent-t", 528318969), logical_block, relative_to, offset, start_pos, end_pos, null, null, null);
};
cljs.pprint.indent_t_QMARK_ = function cljs$pprint$indent_t_QMARK_(x__10170__auto__) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(x__10170__auto__), new cljs.core.Keyword(null, "indent-t", "indent-t", 528318969));
};
cljs.pprint.pp_newline = function cljs$pprint$pp_newline() {
  return "\n";
};
cljs.pprint.emit_nl;
if (typeof cljs.pprint.write_token !== "undefined") {
} else {
  cljs.pprint.write_token = function() {
    var method_table__5581__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5582__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5583__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5584__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5585__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.pprint", "write-token"), function(method_table__5581__auto__, prefer_table__5582__auto__, method_cache__5583__auto__, cached_hierarchy__5584__auto__, hierarchy__5585__auto__) {
      return function(p1__10405_SHARP_, p2__10404_SHARP_) {
        return (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(p2__10404_SHARP_);
      };
    }(method_table__5581__auto__, prefer_table__5582__auto__, method_cache__5583__auto__, cached_hierarchy__5584__auto__, hierarchy__5585__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5585__auto__, method_table__5581__auto__, prefer_table__5582__auto__, method_cache__5583__auto__, cached_hierarchy__5584__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.pprint.write_token, new cljs.core.Keyword(null, "start-block-t", "start-block-t", -373430594), function(this$, token) {
  var temp__4425__auto___10406 = (new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  if (cljs.core.truth_(temp__4425__auto___10406)) {
    var cb_10407 = temp__4425__auto___10406;
    cb_10407.call(null, new cljs.core.Keyword(null, "start", "start", -355208981));
  } else {
  }
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(token);
  var temp__4425__auto___10408 = (new cljs.core.Keyword(null, "prefix", "prefix", -265908465)).cljs$core$IFn$_invoke$arity$1(lb);
  if (cljs.core.truth_(temp__4425__auto___10408)) {
    var prefix_10409 = temp__4425__auto___10408;
    cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), prefix_10409);
  } else {
  }
  var col = cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))));
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "start-col", "start-col", 668080143)).cljs$core$IFn$_invoke$arity$1(lb), col);
  return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "indent", "indent", -148200125)).cljs$core$IFn$_invoke$arity$1(lb), col);
});
cljs.core._add_method.call(null, cljs.pprint.write_token, new cljs.core.Keyword(null, "end-block-t", "end-block-t", 1544648735), function(this$, token) {
  var temp__4425__auto___10410 = (new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  if (cljs.core.truth_(temp__4425__auto___10410)) {
    var cb_10411 = temp__4425__auto___10410;
    cb_10411.call(null, new cljs.core.Keyword(null, "end", "end", -268185958));
  } else {
  }
  var temp__4425__auto__ = (new cljs.core.Keyword(null, "suffix", "suffix", 367373057)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(token));
  if (cljs.core.truth_(temp__4425__auto__)) {
    var suffix = temp__4425__auto__;
    return cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), suffix);
  } else {
    return null;
  }
});
cljs.core._add_method.call(null, cljs.pprint.write_token, new cljs.core.Keyword(null, "indent-t", "indent-t", 528318969), function(this$, token) {
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(token);
  return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "indent", "indent", -148200125)).cljs$core$IFn$_invoke$arity$1(lb), (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(token) + function() {
    var pred__10412 = cljs.core._EQ_;
    var expr__10413 = (new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051)).cljs$core$IFn$_invoke$arity$1(token);
    if (cljs.core.truth_(pred__10412.call(null, new cljs.core.Keyword(null, "block", "block", 664686210), expr__10413))) {
      return cljs.core.deref.call(null, (new cljs.core.Keyword(null, "start-col", "start-col", 668080143)).cljs$core$IFn$_invoke$arity$1(lb));
    } else {
      if (cljs.core.truth_(pred__10412.call(null, new cljs.core.Keyword(null, "current", "current", -1088038603), expr__10413))) {
        return cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))));
      } else {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__10413)].join(""));
      }
    }
  }());
});
cljs.core._add_method.call(null, cljs.pprint.write_token, new cljs.core.Keyword(null, "buffer-blob", "buffer-blob", -1830112173), function(this$, token) {
  return cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), (new cljs.core.Keyword(null, "data", "data", -232669377)).cljs$core$IFn$_invoke$arity$1(token));
});
cljs.core._add_method.call(null, cljs.pprint.write_token, new cljs.core.Keyword(null, "nl-t", "nl-t", -1608382114), function(this$, token) {
  if (cljs.core.truth_(function() {
    var or__4668__auto__ = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(token), new cljs.core.Keyword(null, "mandatory", "mandatory", 542802336));
    if (or__4668__auto__) {
      return or__4668__auto__;
    } else {
      var and__4656__auto__ = !cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(token), new cljs.core.Keyword(null, "fill", "fill", 883462889));
      if (and__4656__auto__) {
        return cljs.core.deref.call(null, (new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(token)));
      } else {
        return and__4656__auto__;
      }
    }
  }())) {
    cljs.pprint.emit_nl.call(null, this$, token);
  } else {
    var temp__4423__auto___10415 = (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
    if (cljs.core.truth_(temp__4423__auto___10415)) {
      var tws_10416 = temp__4423__auto___10415;
      cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), tws_10416);
    } else {
    }
  }
  return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), null);
});
cljs.pprint.write_tokens = function cljs$pprint$write_tokens(this$, tokens, force_trailing_whitespace) {
  var seq__10421 = cljs.core.seq.call(null, tokens);
  var chunk__10422 = null;
  var count__10423 = 0;
  var i__10424 = 0;
  while (true) {
    if (i__10424 < count__10423) {
      var token = cljs.core._nth.call(null, chunk__10422, i__10424);
      if (!cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(token), new cljs.core.Keyword(null, "nl-t", "nl-t", -1608382114))) {
        var temp__4423__auto___10425 = (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
        if (cljs.core.truth_(temp__4423__auto___10425)) {
          var tws_10426 = temp__4423__auto___10425;
          cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), tws_10426);
        } else {
        }
      } else {
      }
      cljs.pprint.write_token.call(null, this$, token);
      cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(token));
      var tws_10427 = (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
      if (cljs.core.truth_(function() {
        var and__4656__auto__ = force_trailing_whitespace;
        if (cljs.core.truth_(and__4656__auto__)) {
          return tws_10427;
        } else {
          return and__4656__auto__;
        }
      }())) {
        cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), tws_10427);
        cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), null);
      } else {
      }
      var G__10428 = seq__10421;
      var G__10429 = chunk__10422;
      var G__10430 = count__10423;
      var G__10431 = i__10424 + 1;
      seq__10421 = G__10428;
      chunk__10422 = G__10429;
      count__10423 = G__10430;
      i__10424 = G__10431;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__10421);
      if (temp__4425__auto__) {
        var seq__10421__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10421__$1)) {
          var c__5471__auto__ = cljs.core.chunk_first.call(null, seq__10421__$1);
          var G__10432 = cljs.core.chunk_rest.call(null, seq__10421__$1);
          var G__10433 = c__5471__auto__;
          var G__10434 = cljs.core.count.call(null, c__5471__auto__);
          var G__10435 = 0;
          seq__10421 = G__10432;
          chunk__10422 = G__10433;
          count__10423 = G__10434;
          i__10424 = G__10435;
          continue;
        } else {
          var token = cljs.core.first.call(null, seq__10421__$1);
          if (!cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(token), new cljs.core.Keyword(null, "nl-t", "nl-t", -1608382114))) {
            var temp__4423__auto___10436 = (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
            if (cljs.core.truth_(temp__4423__auto___10436)) {
              var tws_10437 = temp__4423__auto___10436;
              cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), tws_10437);
            } else {
            }
          } else {
          }
          cljs.pprint.write_token.call(null, this$, token);
          cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(token));
          var tws_10438 = (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
          if (cljs.core.truth_(function() {
            var and__4656__auto__ = force_trailing_whitespace;
            if (cljs.core.truth_(and__4656__auto__)) {
              return tws_10438;
            } else {
              return and__4656__auto__;
            }
          }())) {
            cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), tws_10438);
            cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), null);
          } else {
          }
          var G__10439 = cljs.core.next.call(null, seq__10421__$1);
          var G__10440 = null;
          var G__10441 = 0;
          var G__10442 = 0;
          seq__10421 = G__10439;
          chunk__10422 = G__10440;
          count__10423 = G__10441;
          i__10424 = G__10442;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.pprint.tokens_fit_QMARK_ = function cljs$pprint$tokens_fit_QMARK_(this$, tokens) {
  var maxcol = cljs.pprint.get_max_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))));
  return maxcol == null || cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)))) + cljs.pprint.buffer_length.call(null, tokens) < maxcol;
};
cljs.pprint.linear_nl_QMARK_ = function cljs$pprint$linear_nl_QMARK_(this$, lb, section) {
  var or__4668__auto__ = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340)).cljs$core$IFn$_invoke$arity$1(lb));
  if (cljs.core.truth_(or__4668__auto__)) {
    return or__4668__auto__;
  } else {
    return cljs.core.not.call(null, cljs.pprint.tokens_fit_QMARK_.call(null, this$, section));
  }
};
cljs.pprint.miser_nl_QMARK_ = function cljs$pprint$miser_nl_QMARK_(this$, lb, section) {
  var miser_width = cljs.pprint.get_miser_width.call(null, this$);
  var maxcol = cljs.pprint.get_max_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))));
  var and__4656__auto__ = miser_width;
  if (cljs.core.truth_(and__4656__auto__)) {
    var and__4656__auto____$1 = maxcol;
    if (cljs.core.truth_(and__4656__auto____$1)) {
      var and__4656__auto____$2 = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "start-col", "start-col", 668080143)).cljs$core$IFn$_invoke$arity$1(lb)) >= maxcol - miser_width;
      if (and__4656__auto____$2) {
        return cljs.pprint.linear_nl_QMARK_.call(null, this$, lb, section);
      } else {
        return and__4656__auto____$2;
      }
    } else {
      return and__4656__auto____$1;
    }
  } else {
    return and__4656__auto__;
  }
};
if (typeof cljs.pprint.emit_nl_QMARK_ !== "undefined") {
} else {
  cljs.pprint.emit_nl_QMARK_ = function() {
    var method_table__5581__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5582__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5583__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5584__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5585__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.pprint", "emit-nl?"), function(method_table__5581__auto__, prefer_table__5582__auto__, method_cache__5583__auto__, cached_hierarchy__5584__auto__, hierarchy__5585__auto__) {
      return function(t, _, ___$1, ___$2) {
        return (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(t);
      };
    }(method_table__5581__auto__, prefer_table__5582__auto__, method_cache__5583__auto__, cached_hierarchy__5584__auto__, hierarchy__5585__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5585__auto__, method_table__5581__auto__, prefer_table__5582__auto__, method_cache__5583__auto__, cached_hierarchy__5584__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.pprint.emit_nl_QMARK_, new cljs.core.Keyword(null, "linear", "linear", 872268697), function(newl, this$, section, _) {
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(newl);
  return cljs.pprint.linear_nl_QMARK_.call(null, this$, lb, section);
});
cljs.core._add_method.call(null, cljs.pprint.emit_nl_QMARK_, new cljs.core.Keyword(null, "miser", "miser", -556060186), function(newl, this$, section, _) {
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(newl);
  return cljs.pprint.miser_nl_QMARK_.call(null, this$, lb, section);
});
cljs.core._add_method.call(null, cljs.pprint.emit_nl_QMARK_, new cljs.core.Keyword(null, "fill", "fill", 883462889), function(newl, this$, section, subsection) {
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(newl);
  var or__4668__auto__ = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875)).cljs$core$IFn$_invoke$arity$1(lb));
  if (cljs.core.truth_(or__4668__auto__)) {
    return or__4668__auto__;
  } else {
    var or__4668__auto____$1 = cljs.core.not.call(null, cljs.pprint.tokens_fit_QMARK_.call(null, this$, subsection));
    if (or__4668__auto____$1) {
      return or__4668__auto____$1;
    } else {
      return cljs.pprint.miser_nl_QMARK_.call(null, this$, lb, section);
    }
  }
});
cljs.core._add_method.call(null, cljs.pprint.emit_nl_QMARK_, new cljs.core.Keyword(null, "mandatory", "mandatory", 542802336), function(_, ___$1, ___$2, ___$3) {
  return true;
});
cljs.pprint.get_section = function cljs$pprint$get_section(buffer) {
  var nl = cljs.core.first.call(null, buffer);
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(nl);
  var section = cljs.core.seq.call(null, cljs.core.take_while.call(null, function(nl, lb) {
    return function(p1__10443_SHARP_) {
      return cljs.core.not.call(null, function() {
        var and__4656__auto__ = cljs.pprint.nl_t_QMARK_.call(null, p1__10443_SHARP_);
        if (cljs.core.truth_(and__4656__auto__)) {
          return cljs.pprint.ancestor_QMARK_.call(null, (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(p1__10443_SHARP_), lb);
        } else {
          return and__4656__auto__;
        }
      }());
    };
  }(nl, lb), cljs.core.next.call(null, buffer)));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [section, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, section) + 1, buffer))], null);
};
cljs.pprint.get_sub_section = function cljs$pprint$get_sub_section(buffer) {
  var nl = cljs.core.first.call(null, buffer);
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(nl);
  var section = cljs.core.seq.call(null, cljs.core.take_while.call(null, function(nl, lb) {
    return function(p1__10444_SHARP_) {
      var nl_lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(p1__10444_SHARP_);
      return cljs.core.not.call(null, function() {
        var and__4656__auto__ = cljs.pprint.nl_t_QMARK_.call(null, p1__10444_SHARP_);
        if (cljs.core.truth_(and__4656__auto__)) {
          var or__4668__auto__ = cljs.core._EQ_.call(null, nl_lb, lb);
          if (or__4668__auto__) {
            return or__4668__auto__;
          } else {
            return cljs.pprint.ancestor_QMARK_.call(null, nl_lb, lb);
          }
        } else {
          return and__4656__auto__;
        }
      }());
    };
  }(nl, lb), cljs.core.next.call(null, buffer)));
  return section;
};
cljs.pprint.update_nl_state = function cljs$pprint$update_nl_state(lb) {
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875)).cljs$core$IFn$_invoke$arity$1(lb), true);
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340)).cljs$core$IFn$_invoke$arity$1(lb), true);
  var lb__$1 = (new cljs.core.Keyword(null, "parent", "parent", -878878779)).cljs$core$IFn$_invoke$arity$1(lb);
  while (true) {
    if (cljs.core.truth_(lb__$1)) {
      cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340)).cljs$core$IFn$_invoke$arity$1(lb__$1), true);
      cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875)).cljs$core$IFn$_invoke$arity$1(lb__$1), true);
      var G__10445 = (new cljs.core.Keyword(null, "parent", "parent", -878878779)).cljs$core$IFn$_invoke$arity$1(lb__$1);
      lb__$1 = G__10445;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.pprint.emit_nl = function cljs$pprint$emit_nl(this$, nl) {
  cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), cljs.pprint.pp_newline.call(null));
  cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), null);
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(nl);
  var prefix = (new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813)).cljs$core$IFn$_invoke$arity$1(lb);
  if (cljs.core.truth_(prefix)) {
    cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), prefix);
  } else {
  }
  var istr_10446 = cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "indent", "indent", -148200125)).cljs$core$IFn$_invoke$arity$1(lb)) - cljs.core.count.call(null, prefix), " "));
  cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), istr_10446);
  return cljs.pprint.update_nl_state.call(null, lb);
};
cljs.pprint.split_at_newline = function cljs$pprint$split_at_newline(tokens) {
  var pre = cljs.core.seq.call(null, cljs.core.take_while.call(null, function(p1__10447_SHARP_) {
    return cljs.core.not.call(null, cljs.pprint.nl_t_QMARK_.call(null, p1__10447_SHARP_));
  }, tokens));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pre, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, pre), tokens))], null);
};
cljs.pprint.write_token_string = function cljs$pprint$write_token_string(this$, tokens) {
  var vec__10450 = cljs.pprint.split_at_newline.call(null, tokens);
  var a = cljs.core.nth.call(null, vec__10450, 0, null);
  var b = cljs.core.nth.call(null, vec__10450, 1, null);
  if (cljs.core.truth_(a)) {
    cljs.pprint.write_tokens.call(null, this$, a, false);
  } else {
  }
  if (cljs.core.truth_(b)) {
    var vec__10451 = cljs.pprint.get_section.call(null, b);
    var section = cljs.core.nth.call(null, vec__10451, 0, null);
    var remainder = cljs.core.nth.call(null, vec__10451, 1, null);
    var newl = cljs.core.first.call(null, b);
    var do_nl = cljs.pprint.emit_nl_QMARK_.call(null, newl, this$, section, cljs.pprint.get_sub_section.call(null, b));
    var result = cljs.core.truth_(do_nl) ? function() {
      cljs.pprint.emit_nl.call(null, this$, newl);
      return cljs.core.next.call(null, b);
    }() : b;
    var long_section = cljs.core.not.call(null, cljs.pprint.tokens_fit_QMARK_.call(null, this$, result));
    var result__$1 = long_section ? function() {
      var rem2 = cljs$pprint$write_token_string.call(null, this$, section);
      if (cljs.core._EQ_.call(null, rem2, section)) {
        cljs.pprint.write_tokens.call(null, this$, section, false);
        return remainder;
      } else {
        return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.concat.call(null, rem2, remainder));
      }
    }() : result;
    return result__$1;
  } else {
    return null;
  }
};
cljs.pprint.write_line = function cljs$pprint$write_line(this$) {
  var buffer = (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  while (true) {
    cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "buffer", "buffer", 617295198), cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, buffer));
    if (cljs.core.not.call(null, cljs.pprint.tokens_fit_QMARK_.call(null, this$, buffer))) {
      var new_buffer = cljs.pprint.write_token_string.call(null, this$, buffer);
      if (!(buffer === new_buffer)) {
        var G__10452 = new_buffer;
        buffer = G__10452;
        continue;
      } else {
        return null;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.pprint.add_to_buffer = function cljs$pprint$add_to_buffer(this$, token) {
  cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "buffer", "buffer", 617295198), cljs.core.conj.call(null, (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), token));
  if (cljs.core.not.call(null, cljs.pprint.tokens_fit_QMARK_.call(null, this$, (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)))))) {
    return cljs.pprint.write_line.call(null, this$);
  } else {
    return null;
  }
};
cljs.pprint.write_buffered_output = function cljs$pprint$write_buffered_output(this$) {
  cljs.pprint.write_line.call(null, this$);
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var buf = temp__4423__auto__;
    cljs.pprint.write_tokens.call(null, this$, buf, true);
    return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "buffer", "buffer", 617295198), cljs.core.PersistentVector.EMPTY);
  } else {
    return null;
  }
};
cljs.pprint.write_white_space = function cljs$pprint$write_white_space(this$) {
  var temp__4425__auto__ = (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  if (cljs.core.truth_(temp__4425__auto__)) {
    var tws = temp__4425__auto__;
    cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), tws);
    return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), null);
  } else {
    return null;
  }
};
cljs.pprint.write_initial_lines = function cljs$pprint$write_initial_lines(this$, s) {
  var lines = clojure.string.split.call(null, s, "\n", -1);
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, lines), 1)) {
    return s;
  } else {
    var prefix = (new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, (new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)))));
    var l = cljs.core.first.call(null, lines);
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "buffering", "buffering", -876713613), (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))))) {
      var oldpos_10461 = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
      var newpos_10462 = oldpos_10461 + cljs.core.count.call(null, l);
      cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "pos", "pos", -864607220), newpos_10462);
      cljs.pprint.add_to_buffer.call(null, this$, cljs.pprint.make_buffer_blob.call(null, l, null, oldpos_10461, newpos_10462));
      cljs.pprint.write_buffered_output.call(null, this$);
    } else {
      cljs.pprint.write_white_space.call(null, this$);
      cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), l);
    }
    cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), "\n");
    var seq__10457_10463 = cljs.core.seq.call(null, cljs.core.next.call(null, cljs.core.butlast.call(null, lines)));
    var chunk__10458_10464 = null;
    var count__10459_10465 = 0;
    var i__10460_10466 = 0;
    while (true) {
      if (i__10460_10466 < count__10459_10465) {
        var l_10467__$1 = cljs.core._nth.call(null, chunk__10458_10464, i__10460_10466);
        cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), l_10467__$1);
        cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), cljs.pprint.pp_newline.call(null));
        if (cljs.core.truth_(prefix)) {
          cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), prefix);
        } else {
        }
        var G__10468 = seq__10457_10463;
        var G__10469 = chunk__10458_10464;
        var G__10470 = count__10459_10465;
        var G__10471 = i__10460_10466 + 1;
        seq__10457_10463 = G__10468;
        chunk__10458_10464 = G__10469;
        count__10459_10465 = G__10470;
        i__10460_10466 = G__10471;
        continue;
      } else {
        var temp__4425__auto___10472 = cljs.core.seq.call(null, seq__10457_10463);
        if (temp__4425__auto___10472) {
          var seq__10457_10473__$1 = temp__4425__auto___10472;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10457_10473__$1)) {
            var c__5471__auto___10474 = cljs.core.chunk_first.call(null, seq__10457_10473__$1);
            var G__10475 = cljs.core.chunk_rest.call(null, seq__10457_10473__$1);
            var G__10476 = c__5471__auto___10474;
            var G__10477 = cljs.core.count.call(null, c__5471__auto___10474);
            var G__10478 = 0;
            seq__10457_10463 = G__10475;
            chunk__10458_10464 = G__10476;
            count__10459_10465 = G__10477;
            i__10460_10466 = G__10478;
            continue;
          } else {
            var l_10479__$1 = cljs.core.first.call(null, seq__10457_10473__$1);
            cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), l_10479__$1);
            cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), cljs.pprint.pp_newline.call(null));
            if (cljs.core.truth_(prefix)) {
              cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), prefix);
            } else {
            }
            var G__10480 = cljs.core.next.call(null, seq__10457_10473__$1);
            var G__10481 = null;
            var G__10482 = 0;
            var G__10483 = 0;
            seq__10457_10463 = G__10480;
            chunk__10458_10464 = G__10481;
            count__10459_10465 = G__10482;
            i__10460_10466 = G__10483;
            continue;
          }
        } else {
        }
      }
      break;
    }
    cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "buffering", "buffering", -876713613), new cljs.core.Keyword(null, "writing", "writing", -1486865108));
    return cljs.core.last.call(null, lines);
  }
};
cljs.pprint.p_write_char = function cljs$pprint$p_write_char(this$, c) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), new cljs.core.Keyword(null, "writing", "writing", -1486865108))) {
    cljs.pprint.write_white_space.call(null, this$);
    return cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), c);
  } else {
    if (cljs.core._EQ_.call(null, c, "\n")) {
      return cljs.pprint.write_initial_lines.call(null, this$, "\n");
    } else {
      var oldpos = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
      var newpos = oldpos + 1;
      cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "pos", "pos", -864607220), newpos);
      return cljs.pprint.add_to_buffer.call(null, this$, cljs.pprint.make_buffer_blob.call(null, cljs.core.char$.call(null, c), null, oldpos, newpos));
    }
  }
};
cljs.pprint.pretty_writer = function cljs$pprint$pretty_writer(writer, max_columns, miser_width) {
  var lb = new cljs.pprint.logical_block(null, null, cljs.core.atom.call(null, 0), cljs.core.atom.call(null, 0), cljs.core.atom.call(null, false), cljs.core.atom.call(null, false), null, null, null, null, null, null, null);
  var fields = cljs.core.atom.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776), new cljs.core.Keyword(null, "miser-width", "miser-width", -1310049437), new cljs.core.Keyword(null, "buffer-block", "buffer-block", -10937307), new cljs.core.Keyword(null, "pretty-writer", "pretty-writer", -1222834267), new cljs.core.Keyword(null, "sections", "sections", -886710106), new cljs.core.Keyword(null, "mode", "mode", 654403691), new cljs.core.Keyword(null, 
  "pos", "pos", -864607220), new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), new cljs.core.Keyword(null, "base", "base", 185279322), new cljs.core.Keyword(null, "buffer-level", "buffer-level", 928864731), new cljs.core.Keyword(null, "buffer", "buffer", 617295198)], [lb, miser_width, lb, true, null, new cljs.core.Keyword(null, "writing", "writing", -1486865108), 0, null, cljs.pprint.column_writer.call(null, writer, max_columns), 1, cljs.core.PersistentVector.EMPTY]));
  if (typeof cljs.pprint.t_cljs$pprint10490 !== "undefined") {
  } else {
    cljs.pprint.t_cljs$pprint10490 = function(pretty_writer, writer, max_columns, miser_width, lb, fields, meta10491) {
      this.pretty_writer = pretty_writer;
      this.writer = writer;
      this.max_columns = max_columns;
      this.miser_width = miser_width;
      this.lb = lb;
      this.fields = fields;
      this.meta10491 = meta10491;
      this.cljs$lang$protocol_mask$partition0$ = 1074167808;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.pprint.t_cljs$pprint10490.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(lb, fields) {
      return function(_10492, meta10491__$1) {
        var self__ = this;
        var _10492__$1 = this;
        return new cljs.pprint.t_cljs$pprint10490(self__.pretty_writer, self__.writer, self__.max_columns, self__.miser_width, self__.lb, self__.fields, meta10491__$1);
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint10490.prototype.cljs$core$IMeta$_meta$arity$1 = function(lb, fields) {
      return function(_10492) {
        var self__ = this;
        var _10492__$1 = this;
        return self__.meta10491;
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint10490.prototype.cljs$core$IDeref$_deref$arity$1 = function(lb, fields) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return self__.fields;
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint10490.prototype.cljs$core$IWriter$_write$arity$2 = function(lb, fields) {
      return function(this$, x) {
        var self__ = this;
        var this$__$1 = this;
        var pred__10493 = cljs.core._EQ_;
        var expr__10494 = cljs.core.type.call(null, x);
        if (cljs.core.truth_(pred__10493.call(null, String, expr__10494))) {
          var s0 = cljs.pprint.write_initial_lines.call(null, this$__$1, x);
          var s = clojure.string.replace_first.call(null, s0, /\s+$/, "");
          var white_space = cljs.core.subs.call(null, s0, cljs.core.count.call(null, s));
          var mode = (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$__$1)));
          if (cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "writing", "writing", -1486865108))) {
            cljs.pprint.write_white_space.call(null, this$__$1);
            cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$__$1))), s);
            return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$__$1), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), white_space);
          } else {
            var oldpos = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$__$1)));
            var newpos = oldpos + cljs.core.count.call(null, s0);
            cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$__$1), cljs.core.assoc, new cljs.core.Keyword(null, "pos", "pos", -864607220), newpos);
            return cljs.pprint.add_to_buffer.call(null, this$__$1, cljs.pprint.make_buffer_blob.call(null, s, white_space, oldpos, newpos));
          }
        } else {
          if (cljs.core.truth_(pred__10493.call(null, Number, expr__10494))) {
            return cljs.pprint.p_write_char.call(null, this$__$1, x);
          } else {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__10494)].join(""));
          }
        }
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint10490.prototype.cljs$core$IWriter$_flush$arity$1 = function(lb, fields) {
      return function(this$) {
        var self__ = this;
        var this$__$1 = this;
        cljs.pprint._ppflush.call(null, this$__$1);
        return cljs.core._flush.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$__$1))));
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint10490.prototype.cljs$pprint$IPrettyFlush$ = true;
    cljs.pprint.t_cljs$pprint10490.prototype.cljs$pprint$IPrettyFlush$_ppflush$arity$1 = function(lb, fields) {
      return function(this$) {
        var self__ = this;
        var this$__$1 = this;
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$__$1))), new cljs.core.Keyword(null, "buffering", "buffering", -876713613))) {
          cljs.pprint.write_tokens.call(null, this$__$1, (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$__$1))), true);
          return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$__$1), cljs.core.assoc, new cljs.core.Keyword(null, "buffer", "buffer", 617295198), cljs.core.PersistentVector.EMPTY);
        } else {
          return cljs.pprint.write_white_space.call(null, this$__$1);
        }
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint10490.getBasis = function(lb, fields) {
      return function() {
        return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "pretty-writer", "pretty-writer", 417697260, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 
        3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "max-columns", "max-columns", -912112507, null), new cljs.core.Symbol(null, "miser-width", "miser-width", 330482090, null)], null)))], null)), new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "max-columns", "max-columns", -912112507, null), new cljs.core.Symbol(null, "miser-width", "miser-width", 330482090, null), 
        new cljs.core.Symbol(null, "lb", "lb", 950310490, null), new cljs.core.Symbol(null, "fields", "fields", -291534703, null), new cljs.core.Symbol(null, "meta10491", "meta10491", 1703630592, null)], null);
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint10490.cljs$lang$type = true;
    cljs.pprint.t_cljs$pprint10490.cljs$lang$ctorStr = "cljs.pprint/t_cljs$pprint10490";
    cljs.pprint.t_cljs$pprint10490.cljs$lang$ctorPrWriter = function(lb, fields) {
      return function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
        return cljs.core._write.call(null, writer__5267__auto__, "cljs.pprint/t_cljs$pprint10490");
      };
    }(lb, fields);
    cljs.pprint.__GT_t_cljs$pprint10490 = function(lb, fields) {
      return function cljs$pprint$pretty_writer_$___GT_t_cljs$pprint10490(pretty_writer__$1, writer__$1, max_columns__$1, miser_width__$1, lb__$1, fields__$1, meta10491) {
        return new cljs.pprint.t_cljs$pprint10490(pretty_writer__$1, writer__$1, max_columns__$1, miser_width__$1, lb__$1, fields__$1, meta10491);
      };
    }(lb, fields);
  }
  return new cljs.pprint.t_cljs$pprint10490(cljs$pprint$pretty_writer, writer, max_columns, miser_width, lb, fields, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.pprint.start_block = function cljs$pprint$start_block(this$, prefix, per_line_prefix, suffix) {
  var lb = new cljs.pprint.logical_block((new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), null, cljs.core.atom.call(null, 0), cljs.core.atom.call(null, 0), cljs.core.atom.call(null, false), cljs.core.atom.call(null, false), prefix, per_line_prefix, suffix, null, null, null, null);
  cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776), lb);
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), new cljs.core.Keyword(null, "writing", "writing", -1486865108))) {
    cljs.pprint.write_white_space.call(null, this$);
    var temp__4425__auto___10496 = (new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
    if (cljs.core.truth_(temp__4425__auto___10496)) {
      var cb_10497 = temp__4425__auto___10496;
      cb_10497.call(null, new cljs.core.Keyword(null, "start", "start", -355208981));
    } else {
    }
    if (cljs.core.truth_(prefix)) {
      cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), prefix);
    } else {
    }
    var col = cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))));
    cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "start-col", "start-col", 668080143)).cljs$core$IFn$_invoke$arity$1(lb), col);
    return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "indent", "indent", -148200125)).cljs$core$IFn$_invoke$arity$1(lb), col);
  } else {
    var oldpos = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
    var newpos = oldpos + (cljs.core.truth_(prefix) ? cljs.core.count.call(null, prefix) : 0);
    cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "pos", "pos", -864607220), newpos);
    return cljs.pprint.add_to_buffer.call(null, this$, cljs.pprint.make_start_block_t.call(null, lb, oldpos, newpos));
  }
};
cljs.pprint.end_block = function cljs$pprint$end_block(this$) {
  var lb = (new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  var suffix = (new cljs.core.Keyword(null, "suffix", "suffix", 367373057)).cljs$core$IFn$_invoke$arity$1(lb);
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), new cljs.core.Keyword(null, "writing", "writing", -1486865108))) {
    cljs.pprint.write_white_space.call(null, this$);
    if (cljs.core.truth_(suffix)) {
      cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), suffix);
    } else {
    }
    var temp__4425__auto___10498 = (new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
    if (cljs.core.truth_(temp__4425__auto___10498)) {
      var cb_10499 = temp__4425__auto___10498;
      cb_10499.call(null, new cljs.core.Keyword(null, "end", "end", -268185958));
    } else {
    }
  } else {
    var oldpos_10500 = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
    var newpos_10501 = oldpos_10500 + (cljs.core.truth_(suffix) ? cljs.core.count.call(null, suffix) : 0);
    cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "pos", "pos", -864607220), newpos_10501);
    cljs.pprint.add_to_buffer.call(null, this$, cljs.pprint.make_end_block_t.call(null, lb, oldpos_10500, newpos_10501));
  }
  return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776), (new cljs.core.Keyword(null, "parent", "parent", -878878779)).cljs$core$IFn$_invoke$arity$1(lb));
};
cljs.pprint.nl = function cljs$pprint$nl(this$, type) {
  cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "mode", "mode", 654403691), new cljs.core.Keyword(null, "buffering", "buffering", -876713613));
  var pos = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  return cljs.pprint.add_to_buffer.call(null, this$, cljs.pprint.make_nl_t.call(null, type, (new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), pos, pos));
};
cljs.pprint.indent = function cljs$pprint$indent(this$, relative_to, offset) {
  var lb = (new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), new cljs.core.Keyword(null, "writing", "writing", -1486865108))) {
    cljs.pprint.write_white_space.call(null, this$);
    return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "indent", "indent", -148200125)).cljs$core$IFn$_invoke$arity$1(lb), offset + function() {
      var pred__10505 = cljs.core._EQ_;
      var expr__10506 = relative_to;
      if (cljs.core.truth_(pred__10505.call(null, new cljs.core.Keyword(null, "block", "block", 664686210), expr__10506))) {
        return cljs.core.deref.call(null, (new cljs.core.Keyword(null, "start-col", "start-col", 668080143)).cljs$core$IFn$_invoke$arity$1(lb));
      } else {
        if (cljs.core.truth_(pred__10505.call(null, new cljs.core.Keyword(null, "current", "current", -1088038603), expr__10506))) {
          return cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))));
        } else {
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__10506)].join(""));
        }
      }
    }());
  } else {
    var pos = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
    return cljs.pprint.add_to_buffer.call(null, this$, cljs.pprint.make_indent_t.call(null, lb, relative_to, offset, pos, pos));
  }
};
cljs.pprint.get_miser_width = function cljs$pprint$get_miser_width(this$) {
  return (new cljs.core.Keyword(null, "miser-width", "miser-width", -1310049437)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
};
cljs.pprint._STAR_print_pretty_STAR_ = true;
if (typeof cljs.pprint._STAR_print_pprint_dispatch_STAR_ !== "undefined") {
} else {
  cljs.pprint._STAR_print_pprint_dispatch_STAR_ = null;
}
cljs.pprint._STAR_print_right_margin_STAR_ = 72;
cljs.pprint._STAR_print_miser_width_STAR_ = 40;
cljs.pprint._STAR_print_lines_STAR_ = null;
cljs.pprint._STAR_print_circle_STAR_ = null;
cljs.pprint._STAR_print_shared_STAR_ = null;
cljs.pprint._STAR_print_suppress_namespaces_STAR_ = null;
cljs.pprint._STAR_print_radix_STAR_ = null;
cljs.pprint._STAR_print_base_STAR_ = 10;
cljs.pprint._STAR_current_level_STAR_ = 0;
cljs.pprint._STAR_current_length_STAR_ = null;
cljs.pprint.format_simple_number;
cljs.pprint.write_option_table = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "miser-width", "miser-width", -1310049437), new cljs.core.Keyword(null, "right-margin", "right-margin", -810413306), new cljs.core.Keyword(null, "circle", "circle", 1903212362), new cljs.core.Keyword(null, "lines", "lines", -700165781), new cljs.core.Keyword(null, "suppress-namespaces", "suppress-namespaces", 2130686956), new cljs.core.Keyword(null, "radix", "radix", 857016463), new cljs.core.Keyword(null, 
"level", "level", 1290497552), new cljs.core.Keyword(null, "readably", "readably", 1129599760), new cljs.core.Keyword(null, "dispatch", "dispatch", 1319337009), new cljs.core.Keyword(null, "length", "length", 588987862), new cljs.core.Keyword(null, "pretty", "pretty", -1916372486), new cljs.core.Keyword(null, "base", "base", 185279322)], [new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_miser_width_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-miser-width*", "cljs.pprint/*print-miser-width*", 1588913450, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "added", "added", 2057651688), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), 
new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], ["1.2", new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-miser-width*", "*print-miser-width*", 
1206624211, null), "/Users/anthony/Documents/Development/Libraries/vdom-signals/target/cljsbuild-compiler-1/cljs/pprint.cljs", 21, 1, true, 632, 637, cljs.core.List.EMPTY, "The column at which to enter miser style. Depending on the dispatch table,\nmiser style add newlines in more places to try to keep lines short allowing for further\nlevels of nesting.", cljs.core.truth_(cljs.pprint._STAR_print_miser_width_STAR_) ? cljs.pprint._STAR_print_miser_width_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_right_margin_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-right-margin*", "cljs.pprint/*print-right-margin*", -56183119, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "added", "added", 2057651688), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), 
new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], ["1.2", new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-right-margin*", "*print-right-margin*", 
-437272454, null), "/Users/anthony/Documents/Development/Libraries/vdom-signals/target/cljsbuild-compiler-1/cljs/pprint.cljs", 22, 1, true, 625, 630, cljs.core.List.EMPTY, "Pretty printing will try to avoid anything going beyond this column.\nSet it to nil to have pprint let the line be arbitrarily long. This will ignore all\nnon-mandatory newlines.", cljs.core.truth_(cljs.pprint._STAR_print_right_margin_STAR_) ? cljs.pprint._STAR_print_right_margin_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_circle_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-circle*", "cljs.pprint/*print-circle*", 1606185849, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "private", "private", -558947994), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), 
new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [true, new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-circle*", "*print-circle*", 
1148404994, null), "/Users/anthony/Documents/Development/Libraries/vdom-signals/target/cljsbuild-compiler-1/cljs/pprint.cljs", 15, 1, true, 646, 649, cljs.core.List.EMPTY, "Mark circular structures (N.B. This is not yet used)", cljs.core.truth_(cljs.pprint._STAR_print_circle_STAR_) ? cljs.pprint._STAR_print_circle_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_lines_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-lines*", "cljs.pprint/*print-lines*", 534683484, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "private", "private", -558947994), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), 
new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [true, new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-lines*", "*print-lines*", 
75920659, null), "/Users/anthony/Documents/Development/Libraries/vdom-signals/target/cljsbuild-compiler-1/cljs/pprint.cljs", 14, 1, true, 640, 643, cljs.core.List.EMPTY, "Maximum number of lines to print in a pretty print instance (N.B. This is not yet used)", cljs.core.truth_(cljs.pprint._STAR_print_lines_STAR_) ? cljs.pprint._STAR_print_lines_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_suppress_namespaces_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-suppress-namespaces*", "cljs.pprint/*print-suppress-namespaces*", 1649488204, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "added", "added", 2057651688), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", 
"column", 2078222095), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], ["1.2", new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-suppress-namespaces*", 
"*print-suppress-namespaces*", 1795828355, null), "/Users/anthony/Documents/Development/Libraries/vdom-signals/target/cljsbuild-compiler-1/cljs/pprint.cljs", 28, 1, true, 657, 661, cljs.core.List.EMPTY, "Don't print namespaces with symbols. This is particularly useful when\npretty printing the results of macro expansions", cljs.core.truth_(cljs.pprint._STAR_print_suppress_namespaces_STAR_) ? cljs.pprint._STAR_print_suppress_namespaces_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_radix_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-radix*", "cljs.pprint/*print-radix*", 1558253641, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "added", "added", 2057651688), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, 
"dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], ["1.2", new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-radix*", "*print-radix*", 1168517744, null), "/Users/anthony/Documents/Development/Libraries/vdom-signals/target/cljsbuild-compiler-1/cljs/pprint.cljs", 
14, 1, true, 665, 670, cljs.core.List.EMPTY, "Print a radix specifier in front of integers and rationals. If *print-base* is 2, 8,\nor 16, then the radix specifier used is #b, #o, or #x, respectively. Otherwise the\nradix specifier is in the form #XXr where XX is the decimal value of *print-base* ", cljs.core.truth_(cljs.pprint._STAR_print_radix_STAR_) ? cljs.pprint._STAR_print_radix_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.core._STAR_print_level_STAR_;
}, new cljs.core.Symbol("cljs.core", "*print-level*", "cljs.core/*print-level*", 65848482, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, 
"line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "jsdoc", "jsdoc", 1745183516), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), new cljs.core.Symbol(null, "*print-level*", "*print-level*", -634488505, null), "cljs/core.cljs", 16, 
1, true, 114, 125, cljs.core.List.EMPTY, "*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.", 
new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null), cljs.core.truth_(cljs.core._STAR_print_level_STAR_) ? cljs.core._STAR_print_level_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.core._STAR_print_readably_STAR_;
}, new cljs.core.Symbol("cljs.core", "*print-readably*", "cljs.core/*print-readably*", -354670250, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), 
new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), new cljs.core.Symbol(null, "*print-readably*", "*print-readably*", -761361221, null), "cljs/core.cljs", 19, 1, true, 81, 87, cljs.core.List.EMPTY, 
"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true", cljs.core.truth_(cljs.core._STAR_print_readably_STAR_) ? cljs.core._STAR_print_readably_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_pprint_dispatch_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-pprint-dispatch*", "cljs.pprint/*print-pprint-dispatch*", -1820734013, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "added", "added", 2057651688), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 
2078222095), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], ["1.2", new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-pprint-dispatch*", 
"*print-pprint-dispatch*", -1709114492, null), "/Users/anthony/Documents/Development/Libraries/vdom-signals/target/cljsbuild-compiler-1/cljs/pprint.cljs", 25, 1, true, 619, 623, cljs.core.List.EMPTY, "The pretty print dispatch function. Use with-pprint-dispatch or\nset-pprint-dispatch to modify.", cljs.core.truth_(cljs.pprint._STAR_print_pprint_dispatch_STAR_) ? cljs.pprint._STAR_print_pprint_dispatch_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.core._STAR_print_length_STAR_;
}, new cljs.core.Symbol("cljs.core", "*print-length*", "cljs.core/*print-length*", -20766927, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, 
"line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "jsdoc", "jsdoc", 1745183516), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), new cljs.core.Symbol(null, "*print-length*", "*print-length*", -687693654, null), "cljs/core.cljs", 
17, 1, true, 105, 112, cljs.core.List.EMPTY, "When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false.", new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null), cljs.core.truth_(cljs.core._STAR_print_length_STAR_) ? cljs.core._STAR_print_length_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_pretty_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-pretty*", "cljs.pprint/*print-pretty*", -762636861, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), 
new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-pretty*", "*print-pretty*", 726795140, null), "/Users/anthony/Documents/Development/Libraries/vdom-signals/target/cljsbuild-compiler-1/cljs/pprint.cljs", 
16, 1, true, 615, 617, cljs.core.List.EMPTY, "Bind to true if you want write to use pretty printing", cljs.core.truth_(cljs.pprint._STAR_print_pretty_STAR_) ? cljs.pprint._STAR_print_pretty_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_base_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-base*", "cljs.pprint/*print-base*", 1887526790, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "added", "added", 2057651688), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, 
"dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], ["1.2", new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-base*", "*print-base*", 2037937791, null), "/Users/anthony/Documents/Development/Libraries/vdom-signals/target/cljsbuild-compiler-1/cljs/pprint.cljs", 
13, 1, true, 672, 675, cljs.core.List.EMPTY, "The base to use for printing integers and rationals.", cljs.core.truth_(cljs.pprint._STAR_print_base_STAR_) ? cljs.pprint._STAR_print_base_STAR_.cljs$lang$test : null]))]);
cljs.pprint.table_ize = function cljs$pprint$table_ize(t, m) {
  return cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.mapcat.call(null, function(p1__10508_SHARP_) {
    var temp__4425__auto__ = cljs.core.get.call(null, t, cljs.core.key.call(null, p1__10508_SHARP_));
    if (cljs.core.truth_(temp__4425__auto__)) {
      var v = temp__4425__auto__;
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, cljs.core.val.call(null, p1__10508_SHARP_)], null);
    } else {
      return null;
    }
  }, m));
};
cljs.pprint.pretty_writer_QMARK_ = function cljs$pprint$pretty_writer_QMARK_(x) {
  var and__4656__auto__ = !(x == null) ? x.cljs$lang$protocol_mask$partition0$ & 32768 || x.cljs$core$IDeref$ ? true : !x.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, x) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, x);
  if (and__4656__auto__) {
    return (new cljs.core.Keyword(null, "pretty-writer", "pretty-writer", -1222834267)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, x)));
  } else {
    return and__4656__auto__;
  }
};
cljs.pprint.make_pretty_writer = function cljs$pprint$make_pretty_writer(base_writer, right_margin, miser_width) {
  return cljs.pprint.pretty_writer.call(null, base_writer, right_margin, miser_width);
};
cljs.pprint.write_out = function cljs$pprint$write_out(object) {
  var length_reached = function() {
    var and__4656__auto__ = cljs.pprint._STAR_current_length_STAR_;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = cljs.core._STAR_print_length_STAR_;
      if (cljs.core.truth_(and__4656__auto____$1)) {
        return cljs.pprint._STAR_current_length_STAR_ >= cljs.core._STAR_print_length_STAR_;
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }();
  if (cljs.core.not.call(null, cljs.pprint._STAR_print_pretty_STAR_)) {
    cljs.pprint.pr.call(null, object);
  } else {
    if (cljs.core.truth_(length_reached)) {
      cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
    } else {
      if (cljs.core.truth_(cljs.pprint._STAR_current_length_STAR_)) {
        cljs.pprint._STAR_current_length_STAR_ = cljs.pprint._STAR_current_length_STAR_ + 1;
      } else {
      }
      cljs.pprint._STAR_print_pprint_dispatch_STAR_.call(null, object);
    }
  }
  return length_reached;
};
cljs.pprint.write = function cljs$pprint$write(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___10529 = arguments.length;
  var i__5727__auto___10530 = 0;
  while (true) {
    if (i__5727__auto___10530 < len__5726__auto___10529) {
      args__5733__auto__.push(arguments[i__5727__auto___10530]);
      var G__10531 = i__5727__auto___10530 + 1;
      i__5727__auto___10530 = G__10531;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 1 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(1), 0) : null;
  return cljs.pprint.write.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5734__auto__);
};
cljs.pprint.write.cljs$core$IFn$_invoke$arity$variadic = function(object, kw_args) {
  var options = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "stream", "stream", 1534941648), true], null), cljs.core.apply.call(null, cljs.core.hash_map, kw_args));
  var _STAR_print_base_STAR_10515 = cljs.pprint._STAR_print_base_STAR_;
  var _STAR_print_circle_STAR_10516 = cljs.pprint._STAR_print_circle_STAR_;
  var _STAR_print_length_STAR_10517 = cljs.core._STAR_print_length_STAR_;
  var _STAR_print_level_STAR_10518 = cljs.core._STAR_print_level_STAR_;
  var _STAR_print_lines_STAR_10519 = cljs.pprint._STAR_print_lines_STAR_;
  var _STAR_print_miser_width_STAR_10520 = cljs.pprint._STAR_print_miser_width_STAR_;
  var _STAR_print_pprint_dispatch_STAR_10521 = cljs.pprint._STAR_print_pprint_dispatch_STAR_;
  var _STAR_print_pretty_STAR_10522 = cljs.pprint._STAR_print_pretty_STAR_;
  var _STAR_print_radix_STAR_10523 = cljs.pprint._STAR_print_radix_STAR_;
  var _STAR_print_readably_STAR_10524 = cljs.core._STAR_print_readably_STAR_;
  var _STAR_print_right_margin_STAR_10525 = cljs.pprint._STAR_print_right_margin_STAR_;
  var _STAR_print_suppress_namespaces_STAR_10526 = cljs.pprint._STAR_print_suppress_namespaces_STAR_;
  cljs.pprint._STAR_print_base_STAR_ = (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_base_STAR_);
  cljs.pprint._STAR_print_circle_STAR_ = (new cljs.core.Keyword(null, "circle", "circle", 1903212362)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_circle_STAR_);
  cljs.core._STAR_print_length_STAR_ = (new cljs.core.Keyword(null, "length", "length", 588987862)).cljs$core$IFn$_invoke$arity$2(options, cljs.core._STAR_print_length_STAR_);
  cljs.core._STAR_print_level_STAR_ = (new cljs.core.Keyword(null, "level", "level", 1290497552)).cljs$core$IFn$_invoke$arity$2(options, cljs.core._STAR_print_level_STAR_);
  cljs.pprint._STAR_print_lines_STAR_ = (new cljs.core.Keyword(null, "lines", "lines", -700165781)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_lines_STAR_);
  cljs.pprint._STAR_print_miser_width_STAR_ = (new cljs.core.Keyword(null, "miser-width", "miser-width", -1310049437)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_miser_width_STAR_);
  cljs.pprint._STAR_print_pprint_dispatch_STAR_ = (new cljs.core.Keyword(null, "dispatch", "dispatch", 1319337009)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_pprint_dispatch_STAR_);
  cljs.pprint._STAR_print_pretty_STAR_ = (new cljs.core.Keyword(null, "pretty", "pretty", -1916372486)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_pretty_STAR_);
  cljs.pprint._STAR_print_radix_STAR_ = (new cljs.core.Keyword(null, "radix", "radix", 857016463)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_radix_STAR_);
  cljs.core._STAR_print_readably_STAR_ = (new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$2(options, cljs.core._STAR_print_readably_STAR_);
  cljs.pprint._STAR_print_right_margin_STAR_ = (new cljs.core.Keyword(null, "right-margin", "right-margin", -810413306)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_right_margin_STAR_);
  cljs.pprint._STAR_print_suppress_namespaces_STAR_ = (new cljs.core.Keyword(null, "suppress-namespaces", "suppress-namespaces", 2130686956)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_suppress_namespaces_STAR_);
  try {
    try {
      var sb = new goog.string.StringBuffer;
      var optval = cljs.core.contains_QMARK_.call(null, options, new cljs.core.Keyword(null, "stream", "stream", 1534941648)) ? (new cljs.core.Keyword(null, "stream", "stream", 1534941648)).cljs$core$IFn$_invoke$arity$1(options) : true;
      var base_writer = optval === true || optval == null ? new cljs.core.StringBufferWriter(sb) : optval;
      if (cljs.core.truth_(cljs.pprint._STAR_print_pretty_STAR_)) {
        var base_writer__10153__auto___10532 = base_writer;
        var new_writer__10154__auto___10533 = cljs.core.not.call(null, cljs.pprint.pretty_writer_QMARK_.call(null, base_writer__10153__auto___10532));
        var _STAR_out_STAR_10527_10534 = cljs.core._STAR_out_STAR_;
        cljs.core._STAR_out_STAR_ = new_writer__10154__auto___10533 ? cljs.pprint.make_pretty_writer.call(null, base_writer__10153__auto___10532, cljs.pprint._STAR_print_right_margin_STAR_, cljs.pprint._STAR_print_miser_width_STAR_) : base_writer__10153__auto___10532;
        try {
          cljs.pprint.write_out.call(null, object);
          cljs.pprint._ppflush.call(null, cljs.core._STAR_out_STAR_);
        } finally {
          cljs.core._STAR_out_STAR_ = _STAR_out_STAR_10527_10534;
        }
      } else {
        var _STAR_out_STAR_10528_10535 = cljs.core._STAR_out_STAR_;
        cljs.core._STAR_out_STAR_ = base_writer;
        try {
          cljs.pprint.pr.call(null, object);
        } finally {
          cljs.core._STAR_out_STAR_ = _STAR_out_STAR_10528_10535;
        }
      }
      if (optval === true) {
        cljs.core._STAR_print_fn_STAR_.call(null, [cljs.core.str(sb)].join(""));
      } else {
      }
      if (optval == null) {
        return [cljs.core.str(sb)].join("");
      } else {
        return null;
      }
    } finally {
    }
  } finally {
    cljs.pprint._STAR_print_suppress_namespaces_STAR_ = _STAR_print_suppress_namespaces_STAR_10526;
    cljs.pprint._STAR_print_right_margin_STAR_ = _STAR_print_right_margin_STAR_10525;
    cljs.core._STAR_print_readably_STAR_ = _STAR_print_readably_STAR_10524;
    cljs.pprint._STAR_print_radix_STAR_ = _STAR_print_radix_STAR_10523;
    cljs.pprint._STAR_print_pretty_STAR_ = _STAR_print_pretty_STAR_10522;
    cljs.pprint._STAR_print_pprint_dispatch_STAR_ = _STAR_print_pprint_dispatch_STAR_10521;
    cljs.pprint._STAR_print_miser_width_STAR_ = _STAR_print_miser_width_STAR_10520;
    cljs.pprint._STAR_print_lines_STAR_ = _STAR_print_lines_STAR_10519;
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_10518;
    cljs.core._STAR_print_length_STAR_ = _STAR_print_length_STAR_10517;
    cljs.pprint._STAR_print_circle_STAR_ = _STAR_print_circle_STAR_10516;
    cljs.pprint._STAR_print_base_STAR_ = _STAR_print_base_STAR_10515;
  }
};
cljs.pprint.write.cljs$lang$maxFixedArity = 1;
cljs.pprint.write.cljs$lang$applyTo = function(seq10513) {
  var G__10514 = cljs.core.first.call(null, seq10513);
  var seq10513__$1 = cljs.core.next.call(null, seq10513);
  return cljs.pprint.write.cljs$core$IFn$_invoke$arity$variadic(G__10514, seq10513__$1);
};
cljs.pprint.pprint = function cljs$pprint$pprint(var_args) {
  var args10536 = [];
  var len__5726__auto___10542 = arguments.length;
  var i__5727__auto___10543 = 0;
  while (true) {
    if (i__5727__auto___10543 < len__5726__auto___10542) {
      args10536.push(arguments[i__5727__auto___10543]);
      var G__10544 = i__5727__auto___10543 + 1;
      i__5727__auto___10543 = G__10544;
      continue;
    } else {
    }
    break;
  }
  var G__10538 = args10536.length;
  switch(G__10538) {
    case 1:
      return cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10536.length)].join(""));;
  }
};
cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1 = function(object) {
  var sb = new goog.string.StringBuffer;
  var _STAR_out_STAR_10539 = cljs.core._STAR_out_STAR_;
  cljs.core._STAR_out_STAR_ = new cljs.core.StringBufferWriter(sb);
  try {
    cljs.pprint.pprint.call(null, object, cljs.core._STAR_out_STAR_);
    return cljs.core._STAR_print_fn_STAR_.call(null, [cljs.core.str(sb)].join(""));
  } finally {
    cljs.core._STAR_out_STAR_ = _STAR_out_STAR_10539;
  }
};
cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$2 = function(object, writer) {
  var base_writer__10153__auto__ = writer;
  var new_writer__10154__auto__ = cljs.core.not.call(null, cljs.pprint.pretty_writer_QMARK_.call(null, base_writer__10153__auto__));
  var _STAR_out_STAR_10540 = cljs.core._STAR_out_STAR_;
  cljs.core._STAR_out_STAR_ = new_writer__10154__auto__ ? cljs.pprint.make_pretty_writer.call(null, base_writer__10153__auto__, cljs.pprint._STAR_print_right_margin_STAR_, cljs.pprint._STAR_print_miser_width_STAR_) : base_writer__10153__auto__;
  try {
    var _STAR_print_pretty_STAR_10541_10546 = cljs.pprint._STAR_print_pretty_STAR_;
    cljs.pprint._STAR_print_pretty_STAR_ = true;
    try {
      cljs.pprint.write_out.call(null, object);
    } finally {
      cljs.pprint._STAR_print_pretty_STAR_ = _STAR_print_pretty_STAR_10541_10546;
    }
    if (!cljs.core._EQ_.call(null, 0, cljs.pprint.get_column.call(null, cljs.core._STAR_out_STAR_))) {
      cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "\n");
    } else {
    }
    return cljs.pprint._ppflush.call(null, cljs.core._STAR_out_STAR_);
  } finally {
    cljs.core._STAR_out_STAR_ = _STAR_out_STAR_10540;
  }
};
cljs.pprint.pprint.cljs$lang$maxFixedArity = 2;
cljs.pprint.set_pprint_dispatch = function cljs$pprint$set_pprint_dispatch(function$) {
  cljs.pprint._STAR_print_pprint_dispatch_STAR_ = function$;
  return null;
};
cljs.pprint.check_enumerated_arg = function cljs$pprint$check_enumerated_arg(arg, choices) {
  if (cljs.core.not.call(null, choices.call(null, arg))) {
    throw new Error([cljs.core.str("Bad argument: "), cljs.core.str(arg), cljs.core.str(". It must be one of "), cljs.core.str(choices)].join(""));
  } else {
    return null;
  }
};
cljs.pprint.level_exceeded = function cljs$pprint$level_exceeded() {
  var and__4656__auto__ = cljs.core._STAR_print_level_STAR_;
  if (cljs.core.truth_(and__4656__auto__)) {
    return cljs.pprint._STAR_current_level_STAR_ >= cljs.core._STAR_print_level_STAR_;
  } else {
    return and__4656__auto__;
  }
};
cljs.pprint.pprint_newline = function cljs$pprint$pprint_newline(kind) {
  cljs.pprint.check_enumerated_arg.call(null, kind, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mandatory", "mandatory", 542802336), null, new cljs.core.Keyword(null, "miser", "miser", -556060186), null, new cljs.core.Keyword(null, "fill", "fill", 883462889), null, new cljs.core.Keyword(null, "linear", "linear", 872268697), null], null), null));
  return cljs.pprint.nl.call(null, cljs.core._STAR_out_STAR_, kind);
};
cljs.pprint.pprint_indent = function cljs$pprint$pprint_indent(relative_to, n) {
  cljs.pprint.check_enumerated_arg.call(null, relative_to, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "block", "block", 664686210), null, new cljs.core.Keyword(null, "current", "current", -1088038603), null], null), null));
  return cljs.pprint.indent.call(null, cljs.core._STAR_out_STAR_, relative_to, n);
};
cljs.pprint.pprint_tab = function cljs$pprint$pprint_tab(kind, colnum, colinc) {
  cljs.pprint.check_enumerated_arg.call(null, kind, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "section", "section", -300141526), null, new cljs.core.Keyword(null, "line", "line", 212345235), null, new cljs.core.Keyword(null, "line-relative", "line-relative", 1149548219), null, new cljs.core.Keyword(null, "section-relative", "section-relative", -658298724), null], null), null));
  throw new Error("pprint-tab is not yet implemented");
};
cljs.pprint.compile_format;
cljs.pprint.execute_format;
cljs.pprint.init_navigator;
cljs.pprint.cl_format = function cljs$pprint$cl_format(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___10550 = arguments.length;
  var i__5727__auto___10551 = 0;
  while (true) {
    if (i__5727__auto___10551 < len__5726__auto___10550) {
      args__5733__auto__.push(arguments[i__5727__auto___10551]);
      var G__10552 = i__5727__auto___10551 + 1;
      i__5727__auto___10551 = G__10552;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 2 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(2), 0) : null;
  return cljs.pprint.cl_format.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5734__auto__);
};
cljs.pprint.cl_format.cljs$core$IFn$_invoke$arity$variadic = function(writer, format_in, args) {
  var compiled_format = typeof format_in === "string" ? cljs.pprint.compile_format.call(null, format_in) : format_in;
  var navigator = cljs.pprint.init_navigator.call(null, args);
  return cljs.pprint.execute_format.call(null, writer, compiled_format, navigator);
};
cljs.pprint.cl_format.cljs$lang$maxFixedArity = 2;
cljs.pprint.cl_format.cljs$lang$applyTo = function(seq10547) {
  var G__10548 = cljs.core.first.call(null, seq10547);
  var seq10547__$1 = cljs.core.next.call(null, seq10547);
  var G__10549 = cljs.core.first.call(null, seq10547__$1);
  var seq10547__$2 = cljs.core.next.call(null, seq10547__$1);
  return cljs.pprint.cl_format.cljs$core$IFn$_invoke$arity$variadic(G__10548, G__10549, seq10547__$2);
};
cljs.pprint._STAR_format_str_STAR_ = null;
cljs.pprint.format_error = function cljs$pprint$format_error(message, offset) {
  var full_message = [cljs.core.str(message), cljs.core.str("\n"), cljs.core.str(cljs.pprint._STAR_format_str_STAR_), cljs.core.str("\n"), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, offset, " "))), cljs.core.str("^"), cljs.core.str("\n")].join("");
  throw Error(full_message);
};
cljs.pprint.arg_navigator = function(seq, rest, pos, __meta, __extmap, __hash) {
  this.seq = seq;
  this.rest = rest;
  this.pos = pos;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.arg_navigator.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__5282__auto__, k__5283__auto__) {
  var self__ = this;
  var this__5282__auto____$1 = this;
  return cljs.core._lookup.call(null, this__5282__auto____$1, k__5283__auto__, null);
};
cljs.pprint.arg_navigator.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__5284__auto__, k10554, else__5285__auto__) {
  var self__ = this;
  var this__5284__auto____$1 = this;
  var G__10556 = k10554 instanceof cljs.core.Keyword ? k10554.fqn : null;
  switch(G__10556) {
    case "seq":
      return self__.seq;
      break;
    case "rest":
      return self__.rest;
      break;
    case "pos":
      return self__.pos;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k10554, else__5285__auto__);
  }
};
cljs.pprint.arg_navigator.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__5296__auto__, writer__5297__auto__, opts__5298__auto__) {
  var self__ = this;
  var this__5296__auto____$1 = this;
  var pr_pair__5299__auto__ = function(this__5296__auto____$1) {
    return function(keyval__5300__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, cljs.core.pr_writer, "", " ", "", opts__5298__auto__, keyval__5300__auto__);
    };
  }(this__5296__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, pr_pair__5299__auto__, "#cljs.pprint.arg-navigator{", ", ", "}", opts__5298__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "seq", "seq", -1817803783), self__.seq], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "rest", "rest", -1241696419), self__.rest], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pos", "pos", -864607220), self__.pos], null)], null), self__.__extmap));
};
cljs.pprint.arg_navigator.prototype.cljs$core$IIterable$ = true;
cljs.pprint.arg_navigator.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__10553) {
  var self__ = this;
  var G__10553__$1 = this;
  return new cljs.core.RecordIter(0, G__10553__$1, 3, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "seq", "seq", -1817803783), new cljs.core.Keyword(null, "rest", "rest", -1241696419), new cljs.core.Keyword(null, "pos", "pos", -864607220)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs.pprint.arg_navigator.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__5280__auto__) {
  var self__ = this;
  var this__5280__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.arg_navigator.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__5276__auto__) {
  var self__ = this;
  var this__5276__auto____$1 = this;
  return new cljs.pprint.arg_navigator(self__.seq, self__.rest, self__.pos, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.arg_navigator.prototype.cljs$core$ICounted$_count$arity$1 = function(this__5286__auto__) {
  var self__ = this;
  var this__5286__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.arg_navigator.prototype.cljs$core$IHash$_hash$arity$1 = function(this__5277__auto__) {
  var self__ = this;
  var this__5277__auto____$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_imap.call(null, this__5277__auto____$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.pprint.arg_navigator.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__5278__auto__, other__5279__auto__) {
  var self__ = this;
  var this__5278__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = other__5279__auto__;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = this__5278__auto____$1.constructor === other__5279__auto__.constructor;
      if (and__4656__auto____$1) {
        return cljs.core.equiv_map.call(null, this__5278__auto____$1, other__5279__auto__);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.arg_navigator.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__5291__auto__, k__5292__auto__) {
  var self__ = this;
  var this__5291__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "pos", "pos", -864607220), null, new cljs.core.Keyword(null, "seq", "seq", -1817803783), null, new cljs.core.Keyword(null, "rest", "rest", -1241696419), null], null), null), k__5292__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__5291__auto____$1), self__.__meta), k__5292__auto__);
  } else {
    return new cljs.pprint.arg_navigator(self__.seq, self__.rest, self__.pos, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__5292__auto__)), null);
  }
};
cljs.pprint.arg_navigator.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__5289__auto__, k__5290__auto__, G__10553) {
  var self__ = this;
  var this__5289__auto____$1 = this;
  var pred__10557 = cljs.core.keyword_identical_QMARK_;
  var expr__10558 = k__5290__auto__;
  if (cljs.core.truth_(pred__10557.call(null, new cljs.core.Keyword(null, "seq", "seq", -1817803783), expr__10558))) {
    return new cljs.pprint.arg_navigator(G__10553, self__.rest, self__.pos, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__10557.call(null, new cljs.core.Keyword(null, "rest", "rest", -1241696419), expr__10558))) {
      return new cljs.pprint.arg_navigator(self__.seq, G__10553, self__.pos, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__10557.call(null, new cljs.core.Keyword(null, "pos", "pos", -864607220), expr__10558))) {
        return new cljs.pprint.arg_navigator(self__.seq, self__.rest, G__10553, self__.__meta, self__.__extmap, null);
      } else {
        return new cljs.pprint.arg_navigator(self__.seq, self__.rest, self__.pos, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__5290__auto__, G__10553), null);
      }
    }
  }
};
cljs.pprint.arg_navigator.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__5294__auto__) {
  var self__ = this;
  var this__5294__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "seq", "seq", -1817803783), self__.seq], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "rest", "rest", -1241696419), self__.rest], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pos", "pos", -864607220), self__.pos], null)], null), self__.__extmap));
};
cljs.pprint.arg_navigator.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__5281__auto__, G__10553) {
  var self__ = this;
  var this__5281__auto____$1 = this;
  return new cljs.pprint.arg_navigator(self__.seq, self__.rest, self__.pos, G__10553, self__.__extmap, self__.__hash);
};
cljs.pprint.arg_navigator.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__5287__auto__, entry__5288__auto__) {
  var self__ = this;
  var this__5287__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__5288__auto__)) {
    return cljs.core._assoc.call(null, this__5287__auto____$1, cljs.core._nth.call(null, entry__5288__auto__, 0), cljs.core._nth.call(null, entry__5288__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__5287__auto____$1, entry__5288__auto__);
  }
};
cljs.pprint.arg_navigator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "seq", "seq", -177272256, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "pos", "pos", 775924307, null)], null);
};
cljs.pprint.arg_navigator.cljs$lang$type = true;
cljs.pprint.arg_navigator.cljs$lang$ctorPrSeq = function(this__5316__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/arg-navigator");
};
cljs.pprint.arg_navigator.cljs$lang$ctorPrWriter = function(this__5316__auto__, writer__5317__auto__) {
  return cljs.core._write.call(null, writer__5317__auto__, "cljs.pprint/arg-navigator");
};
cljs.pprint.__GT_arg_navigator = function cljs$pprint$__GT_arg_navigator(seq, rest, pos) {
  return new cljs.pprint.arg_navigator(seq, rest, pos, null, null, null);
};
cljs.pprint.map__GT_arg_navigator = function cljs$pprint$map__GT_arg_navigator(G__10555) {
  return new cljs.pprint.arg_navigator((new cljs.core.Keyword(null, "seq", "seq", -1817803783)).cljs$core$IFn$_invoke$arity$1(G__10555), (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(G__10555), (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(G__10555), null, cljs.core.dissoc.call(null, G__10555, new cljs.core.Keyword(null, "seq", "seq", -1817803783), new cljs.core.Keyword(null, "rest", "rest", -1241696419), new cljs.core.Keyword(null, 
  "pos", "pos", -864607220)), null);
};
cljs.pprint.init_navigator = function cljs$pprint$init_navigator(s) {
  var s__$1 = cljs.core.seq.call(null, s);
  return new cljs.pprint.arg_navigator(s__$1, s__$1, 0, null, null, null);
};
cljs.pprint.next_arg = function cljs$pprint$next_arg(navigator) {
  var rst = (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator);
  if (cljs.core.truth_(rst)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, rst), new cljs.pprint.arg_navigator((new cljs.core.Keyword(null, "seq", "seq", -1817803783)).cljs$core$IFn$_invoke$arity$1(navigator), cljs.core.next.call(null, rst), (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator) + 1, null, null, null)], null);
  } else {
    throw Error("Not enough arguments for format definition");
  }
};
cljs.pprint.next_arg_or_nil = function cljs$pprint$next_arg_or_nil(navigator) {
  var rst = (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator);
  if (cljs.core.truth_(rst)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, rst), new cljs.pprint.arg_navigator((new cljs.core.Keyword(null, "seq", "seq", -1817803783)).cljs$core$IFn$_invoke$arity$1(navigator), cljs.core.next.call(null, rst), (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator) + 1, null, null, null)], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, navigator], null);
  }
};
cljs.pprint.get_format_arg = function cljs$pprint$get_format_arg(navigator) {
  var vec__10562 = cljs.pprint.next_arg.call(null, navigator);
  var raw_format = cljs.core.nth.call(null, vec__10562, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10562, 1, null);
  var compiled_format = typeof raw_format === "string" ? cljs.pprint.compile_format.call(null, raw_format) : raw_format;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [compiled_format, navigator__$1], null);
};
cljs.pprint.relative_reposition;
cljs.pprint.absolute_reposition = function cljs$pprint$absolute_reposition(navigator, position) {
  if (position >= (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator)) {
    return cljs.pprint.relative_reposition.call(null, navigator, (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator) - position);
  } else {
    return new cljs.pprint.arg_navigator((new cljs.core.Keyword(null, "seq", "seq", -1817803783)).cljs$core$IFn$_invoke$arity$1(navigator), cljs.core.drop.call(null, position, (new cljs.core.Keyword(null, "seq", "seq", -1817803783)).cljs$core$IFn$_invoke$arity$1(navigator)), position, null, null, null);
  }
};
cljs.pprint.relative_reposition = function cljs$pprint$relative_reposition(navigator, position) {
  var newpos = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator) + position;
  if (position < 0) {
    return cljs.pprint.absolute_reposition.call(null, navigator, newpos);
  } else {
    return new cljs.pprint.arg_navigator((new cljs.core.Keyword(null, "seq", "seq", -1817803783)).cljs$core$IFn$_invoke$arity$1(navigator), cljs.core.drop.call(null, position, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator)), newpos, null, null, null);
  }
};
cljs.pprint.compiled_directive = function(func, def, params, offset, __meta, __extmap, __hash) {
  this.func = func;
  this.def = def;
  this.params = params;
  this.offset = offset;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.compiled_directive.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__5282__auto__, k__5283__auto__) {
  var self__ = this;
  var this__5282__auto____$1 = this;
  return cljs.core._lookup.call(null, this__5282__auto____$1, k__5283__auto__, null);
};
cljs.pprint.compiled_directive.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__5284__auto__, k10564, else__5285__auto__) {
  var self__ = this;
  var this__5284__auto____$1 = this;
  var G__10566 = k10564 instanceof cljs.core.Keyword ? k10564.fqn : null;
  switch(G__10566) {
    case "func":
      return self__.func;
      break;
    case "def":
      return self__.def;
      break;
    case "params":
      return self__.params;
      break;
    case "offset":
      return self__.offset;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k10564, else__5285__auto__);
  }
};
cljs.pprint.compiled_directive.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__5296__auto__, writer__5297__auto__, opts__5298__auto__) {
  var self__ = this;
  var this__5296__auto____$1 = this;
  var pr_pair__5299__auto__ = function(this__5296__auto____$1) {
    return function(keyval__5300__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, cljs.core.pr_writer, "", " ", "", opts__5298__auto__, keyval__5300__auto__);
    };
  }(this__5296__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__5297__auto__, pr_pair__5299__auto__, "#cljs.pprint.compiled-directive{", ", ", "}", opts__5298__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "func", "func", -238706040), self__.func], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "def", "def", -1043430536), self__.def], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "params", "params", 710516235), self__.params], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311), self__.offset], null)], null), self__.__extmap));
};
cljs.pprint.compiled_directive.prototype.cljs$core$IIterable$ = true;
cljs.pprint.compiled_directive.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__10563) {
  var self__ = this;
  var G__10563__$1 = this;
  return new cljs.core.RecordIter(0, G__10563__$1, 4, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "func", "func", -238706040), new cljs.core.Keyword(null, "def", "def", -1043430536), new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.Keyword(null, "offset", "offset", 296498311)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs.pprint.compiled_directive.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__5280__auto__) {
  var self__ = this;
  var this__5280__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.compiled_directive.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__5276__auto__) {
  var self__ = this;
  var this__5276__auto____$1 = this;
  return new cljs.pprint.compiled_directive(self__.func, self__.def, self__.params, self__.offset, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.compiled_directive.prototype.cljs$core$ICounted$_count$arity$1 = function(this__5286__auto__) {
  var self__ = this;
  var this__5286__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.compiled_directive.prototype.cljs$core$IHash$_hash$arity$1 = function(this__5277__auto__) {
  var self__ = this;
  var this__5277__auto____$1 = this;
  var h__5103__auto__ = self__.__hash;
  if (!(h__5103__auto__ == null)) {
    return h__5103__auto__;
  } else {
    var h__5103__auto____$1 = cljs.core.hash_imap.call(null, this__5277__auto____$1);
    self__.__hash = h__5103__auto____$1;
    return h__5103__auto____$1;
  }
};
cljs.pprint.compiled_directive.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__5278__auto__, other__5279__auto__) {
  var self__ = this;
  var this__5278__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = other__5279__auto__;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = this__5278__auto____$1.constructor === other__5279__auto__.constructor;
      if (and__4656__auto____$1) {
        return cljs.core.equiv_map.call(null, this__5278__auto____$1, other__5279__auto__);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.compiled_directive.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__5291__auto__, k__5292__auto__) {
  var self__ = this;
  var this__5291__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "offset", "offset", 296498311), null, new cljs.core.Keyword(null, "func", "func", -238706040), null, new cljs.core.Keyword(null, "params", "params", 710516235), null, new cljs.core.Keyword(null, "def", "def", -1043430536), null], null), null), k__5292__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__5291__auto____$1), self__.__meta), k__5292__auto__);
  } else {
    return new cljs.pprint.compiled_directive(self__.func, self__.def, self__.params, self__.offset, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__5292__auto__)), null);
  }
};
cljs.pprint.compiled_directive.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__5289__auto__, k__5290__auto__, G__10563) {
  var self__ = this;
  var this__5289__auto____$1 = this;
  var pred__10567 = cljs.core.keyword_identical_QMARK_;
  var expr__10568 = k__5290__auto__;
  if (cljs.core.truth_(pred__10567.call(null, new cljs.core.Keyword(null, "func", "func", -238706040), expr__10568))) {
    return new cljs.pprint.compiled_directive(G__10563, self__.def, self__.params, self__.offset, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__10567.call(null, new cljs.core.Keyword(null, "def", "def", -1043430536), expr__10568))) {
      return new cljs.pprint.compiled_directive(self__.func, G__10563, self__.params, self__.offset, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__10567.call(null, new cljs.core.Keyword(null, "params", "params", 710516235), expr__10568))) {
        return new cljs.pprint.compiled_directive(self__.func, self__.def, G__10563, self__.offset, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__10567.call(null, new cljs.core.Keyword(null, "offset", "offset", 296498311), expr__10568))) {
          return new cljs.pprint.compiled_directive(self__.func, self__.def, self__.params, G__10563, self__.__meta, self__.__extmap, null);
        } else {
          return new cljs.pprint.compiled_directive(self__.func, self__.def, self__.params, self__.offset, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__5290__auto__, G__10563), null);
        }
      }
    }
  }
};
cljs.pprint.compiled_directive.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__5294__auto__) {
  var self__ = this;
  var this__5294__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "func", "func", -238706040), self__.func], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "def", "def", -1043430536), self__.def], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "params", "params", 710516235), self__.params], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311), self__.offset], null)], null), self__.__extmap));
};
cljs.pprint.compiled_directive.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__5281__auto__, G__10563) {
  var self__ = this;
  var this__5281__auto____$1 = this;
  return new cljs.pprint.compiled_directive(self__.func, self__.def, self__.params, self__.offset, G__10563, self__.__extmap, self__.__hash);
};
cljs.pprint.compiled_directive.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__5287__auto__, entry__5288__auto__) {
  var self__ = this;
  var this__5287__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__5288__auto__)) {
    return cljs.core._assoc.call(null, this__5287__auto____$1, cljs.core._nth.call(null, entry__5288__auto__, 0), cljs.core._nth.call(null, entry__5288__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__5287__auto____$1, entry__5288__auto__);
  }
};
cljs.pprint.compiled_directive.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "func", "func", 1401825487, null), new cljs.core.Symbol(null, "def", "def", 597100991, null), new cljs.core.Symbol(null, "params", "params", -1943919534, null), new cljs.core.Symbol(null, "offset", "offset", 1937029838, null)], null);
};
cljs.pprint.compiled_directive.cljs$lang$type = true;
cljs.pprint.compiled_directive.cljs$lang$ctorPrSeq = function(this__5316__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/compiled-directive");
};
cljs.pprint.compiled_directive.cljs$lang$ctorPrWriter = function(this__5316__auto__, writer__5317__auto__) {
  return cljs.core._write.call(null, writer__5317__auto__, "cljs.pprint/compiled-directive");
};
cljs.pprint.__GT_compiled_directive = function cljs$pprint$__GT_compiled_directive(func, def, params, offset) {
  return new cljs.pprint.compiled_directive(func, def, params, offset, null, null, null);
};
cljs.pprint.map__GT_compiled_directive = function cljs$pprint$map__GT_compiled_directive(G__10565) {
  return new cljs.pprint.compiled_directive((new cljs.core.Keyword(null, "func", "func", -238706040)).cljs$core$IFn$_invoke$arity$1(G__10565), (new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(G__10565), (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(G__10565), (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(G__10565), null, cljs.core.dissoc.call(null, G__10565, new cljs.core.Keyword(null, 
  "func", "func", -238706040), new cljs.core.Keyword(null, "def", "def", -1043430536), new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.Keyword(null, "offset", "offset", 296498311)), null);
};
cljs.pprint.realize_parameter = function cljs$pprint$realize_parameter(p__10571, navigator) {
  var vec__10575 = p__10571;
  var param = cljs.core.nth.call(null, vec__10575, 0, null);
  var vec__10576 = cljs.core.nth.call(null, vec__10575, 1, null);
  var raw_val = cljs.core.nth.call(null, vec__10576, 0, null);
  var offset = cljs.core.nth.call(null, vec__10576, 1, null);
  var vec__10577 = cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null], null), null), param) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [raw_val, navigator], null) : cljs.core._EQ_.call(null, raw_val, new cljs.core.Keyword(null, "parameter-from-args", "parameter-from-args", 
  -758446196)) ? cljs.pprint.next_arg.call(null, navigator) : cljs.core._EQ_.call(null, raw_val, new cljs.core.Keyword(null, "remaining-arg-count", "remaining-arg-count", -1216589335)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.count.call(null, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator)), navigator], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [raw_val, navigator], null);
  var real_param = cljs.core.nth.call(null, vec__10577, 0, null);
  var new_navigator = cljs.core.nth.call(null, vec__10577, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [param, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [real_param, offset], null)], null), new_navigator], null);
};
cljs.pprint.realize_parameter_list = function cljs$pprint$realize_parameter_list(parameter_map, navigator) {
  var vec__10579 = cljs.pprint.map_passing_context.call(null, cljs.pprint.realize_parameter, navigator, parameter_map);
  var pairs = cljs.core.nth.call(null, vec__10579, 0, null);
  var new_navigator = cljs.core.nth.call(null, vec__10579, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, pairs), new_navigator], null);
};
cljs.pprint.opt_base_str;
cljs.pprint.special_radix_markers = new cljs.core.PersistentArrayMap(null, 3, [2, "#b", 8, "#o", 16, "#x"], null);
cljs.pprint.format_simple_number = function cljs$pprint$format_simple_number(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    if (cljs.core._EQ_.call(null, cljs.pprint._STAR_print_base_STAR_, 10)) {
      return [cljs.core.str(n), cljs.core.str(cljs.core.truth_(cljs.pprint._STAR_print_radix_STAR_) ? "." : null)].join("");
    } else {
      return [cljs.core.str(cljs.core.truth_(cljs.pprint._STAR_print_radix_STAR_) ? function() {
        var or__4668__auto__ = cljs.core.get.call(null, cljs.pprint.special_radix_markers, cljs.pprint._STAR_print_base_STAR_);
        if (cljs.core.truth_(or__4668__auto__)) {
          return or__4668__auto__;
        } else {
          return [cljs.core.str("#"), cljs.core.str(cljs.pprint._STAR_print_base_STAR_), cljs.core.str("r")].join("");
        }
      }() : null), cljs.core.str(cljs.pprint.opt_base_str.call(null, cljs.pprint._STAR_print_base_STAR_, n))].join("");
    }
  } else {
    return null;
  }
};
cljs.pprint.format_ascii = function cljs$pprint$format_ascii(print_func, params, arg_navigator, offsets) {
  var vec__10581 = cljs.pprint.next_arg.call(null, arg_navigator);
  var arg = cljs.core.nth.call(null, vec__10581, 0, null);
  var arg_navigator__$1 = cljs.core.nth.call(null, vec__10581, 1, null);
  var base_output = function() {
    var or__4668__auto__ = cljs.pprint.format_simple_number.call(null, arg);
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return print_func.call(null, arg);
    }
  }();
  var base_width = base_output.length;
  var min_width = base_width + (new cljs.core.Keyword(null, "minpad", "minpad", 323570901)).cljs$core$IFn$_invoke$arity$1(params);
  var width = min_width >= (new cljs.core.Keyword(null, "mincol", "mincol", 1230695445)).cljs$core$IFn$_invoke$arity$1(params) ? min_width : min_width + (cljs.core.quot.call(null, (new cljs.core.Keyword(null, "mincol", "mincol", 1230695445)).cljs$core$IFn$_invoke$arity$1(params) - min_width - 1, (new cljs.core.Keyword(null, "colinc", "colinc", -584873385)).cljs$core$IFn$_invoke$arity$1(params)) + 1) * (new cljs.core.Keyword(null, "colinc", "colinc", -584873385)).cljs$core$IFn$_invoke$arity$1(params);
  var chars = cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, width - base_width, (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params)));
  if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
    cljs.pprint.print.call(null, [cljs.core.str(chars), cljs.core.str(base_output)].join(""));
  } else {
    cljs.pprint.print.call(null, [cljs.core.str(base_output), cljs.core.str(chars)].join(""));
  }
  return arg_navigator__$1;
};
cljs.pprint.integral_QMARK_ = function cljs$pprint$integral_QMARK_(x) {
  if (cljs.core.integer_QMARK_.call(null, x)) {
    return true;
  } else {
    if (cljs.pprint.float_QMARK_.call(null, x)) {
      return cljs.core._EQ_.call(null, x, Math.floor(x));
    } else {
      return false;
    }
  }
};
cljs.pprint.remainders = function cljs$pprint$remainders(base, val) {
  return cljs.core.reverse.call(null, cljs.core.first.call(null, cljs.pprint.consume.call(null, function(p1__10582_SHARP_) {
    if (p1__10582_SHARP_ > 0) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.rem.call(null, p1__10582_SHARP_, base), cljs.core.quot.call(null, p1__10582_SHARP_, base)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, null], null);
    }
  }, val)));
};
cljs.pprint.base_str = function cljs$pprint$base_str(base, val) {
  if (val === 0) {
    return "0";
  } else {
    var xlated_val = val;
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(xlated_val) {
      return function(p1__10583_SHARP_) {
        if (p1__10583_SHARP_ < 10) {
          return cljs.core.char$.call(null, cljs.pprint.char_code.call(null, "0") + p1__10583_SHARP_);
        } else {
          return cljs.core.char$.call(null, cljs.pprint.char_code.call(null, "a") + (p1__10583_SHARP_ - 10));
        }
      };
    }(xlated_val), cljs.pprint.remainders.call(null, base, val)));
  }
};
cljs.pprint.javascript_base_formats = new cljs.core.PersistentArrayMap(null, 3, [8, "%o", 10, "%d", 16, "%x"], null);
cljs.pprint.opt_base_str = function cljs$pprint$opt_base_str(base, val) {
  return cljs.pprint.base_str.call(null, base, val);
};
cljs.pprint.group_by_STAR_ = function cljs$pprint$group_by_STAR_(unit, lis) {
  return cljs.core.reverse.call(null, cljs.core.first.call(null, cljs.pprint.consume.call(null, function(x) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.seq.call(null, cljs.core.reverse.call(null, cljs.core.take.call(null, unit, x))), cljs.core.seq.call(null, cljs.core.drop.call(null, unit, x))], null);
  }, cljs.core.reverse.call(null, lis))));
};
cljs.pprint.format_integer = function cljs$pprint$format_integer(base, params, arg_navigator, offsets) {
  var vec__10586 = cljs.pprint.next_arg.call(null, arg_navigator);
  var arg = cljs.core.nth.call(null, vec__10586, 0, null);
  var arg_navigator__$1 = cljs.core.nth.call(null, vec__10586, 1, null);
  if (cljs.core.truth_(cljs.pprint.integral_QMARK_.call(null, arg))) {
    var neg_10587 = arg < 0;
    var pos_arg_10588 = neg_10587 ? -arg : arg;
    var raw_str_10589 = cljs.pprint.opt_base_str.call(null, base, pos_arg_10588);
    var group_str_10590 = cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? function() {
      var groups = cljs.core.map.call(null, function(neg_10587, pos_arg_10588, raw_str_10589, vec__10586, arg, arg_navigator__$1) {
        return function(p1__10584_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.str, p1__10584_SHARP_);
        };
      }(neg_10587, pos_arg_10588, raw_str_10589, vec__10586, arg, arg_navigator__$1), cljs.pprint.group_by_STAR_.call(null, (new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083)).cljs$core$IFn$_invoke$arity$1(params), raw_str_10589));
      var commas = cljs.core.repeat.call(null, cljs.core.count.call(null, groups), (new cljs.core.Keyword(null, "commachar", "commachar", 652859327)).cljs$core$IFn$_invoke$arity$1(params));
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.next.call(null, cljs.core.interleave.call(null, commas, groups)));
    }() : raw_str_10589;
    var signed_str_10591 = neg_10587 ? [cljs.core.str("-"), cljs.core.str(group_str_10590)].join("") : cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)) ? [cljs.core.str("+"), cljs.core.str(group_str_10590)].join("") : group_str_10590;
    var padded_str_10592 = signed_str_10591.length < (new cljs.core.Keyword(null, "mincol", "mincol", 1230695445)).cljs$core$IFn$_invoke$arity$1(params) ? [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, (new cljs.core.Keyword(null, "mincol", "mincol", 1230695445)).cljs$core$IFn$_invoke$arity$1(params) - signed_str_10591.length, (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params)))), cljs.core.str(signed_str_10591)].join("") : 
    signed_str_10591;
    cljs.pprint.print.call(null, padded_str_10592);
  } else {
    cljs.pprint.format_ascii.call(null, cljs.core.print_str, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), (new cljs.core.Keyword(null, "mincol", "mincol", 1230695445)).cljs$core$IFn$_invoke$arity$1(params), new cljs.core.Keyword(null, "colinc", "colinc", -584873385), 1, new cljs.core.Keyword(null, "minpad", "minpad", 323570901), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), (new cljs.core.Keyword(null, "padchar", "padchar", 
    2018584530)).cljs$core$IFn$_invoke$arity$1(params), new cljs.core.Keyword(null, "at", "at", 1476951349), true], null), cljs.pprint.init_navigator.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg], null)), null);
  }
  return arg_navigator__$1;
};
cljs.pprint.english_cardinal_units = new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"], null);
cljs.pprint.english_ordinal_units = new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, ["zeroth", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth"], null);
cljs.pprint.english_cardinal_tens = new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"], null);
cljs.pprint.english_ordinal_tens = new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", "", "twentieth", "thirtieth", "fortieth", "fiftieth", "sixtieth", "seventieth", "eightieth", "ninetieth"], null);
cljs.pprint.english_scale_numbers = new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", "thousand", "million", "billion", "trillion", "quadrillion", "quintillion", "sextillion", "septillion", "octillion", "nonillion", "decillion", "undecillion", "duodecillion", "tredecillion", "quattuordecillion", "quindecillion", "sexdecillion", "septendecillion", "octodecillion", "novemdecillion", "vigintillion"], null);
cljs.pprint.format_simple_cardinal = function cljs$pprint$format_simple_cardinal(num) {
  var hundreds = cljs.core.quot.call(null, num, 100);
  var tens = cljs.core.rem.call(null, num, 100);
  return [cljs.core.str(hundreds > 0 ? [cljs.core.str(cljs.core.nth.call(null, cljs.pprint.english_cardinal_units, hundreds)), cljs.core.str(" hundred")].join("") : null), cljs.core.str(hundreds > 0 && tens > 0 ? " " : null), cljs.core.str(tens > 0 ? tens < 20 ? cljs.core.nth.call(null, cljs.pprint.english_cardinal_units, tens) : function() {
    var ten_digit = cljs.core.quot.call(null, tens, 10);
    var unit_digit = cljs.core.rem.call(null, tens, 10);
    return [cljs.core.str(ten_digit > 0 ? cljs.core.nth.call(null, cljs.pprint.english_cardinal_tens, ten_digit) : null), cljs.core.str(ten_digit > 0 && unit_digit > 0 ? "-" : null), cljs.core.str(unit_digit > 0 ? cljs.core.nth.call(null, cljs.pprint.english_cardinal_units, unit_digit) : null)].join("");
  }() : null)].join("");
};
cljs.pprint.add_english_scales = function cljs$pprint$add_english_scales(parts, offset) {
  var cnt = cljs.core.count.call(null, parts);
  var acc = cljs.core.PersistentVector.EMPTY;
  var pos = cnt - 1;
  var this$ = cljs.core.first.call(null, parts);
  var remainder = cljs.core.next.call(null, parts);
  while (true) {
    if (remainder == null) {
      return [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, ", ", acc))), cljs.core.str(!cljs.core.empty_QMARK_.call(null, this$) && !cljs.core.empty_QMARK_.call(null, acc) ? ", " : null), cljs.core.str(this$), cljs.core.str(!cljs.core.empty_QMARK_.call(null, this$) && pos + offset > 0 ? [cljs.core.str(" "), cljs.core.str(cljs.core.nth.call(null, cljs.pprint.english_scale_numbers, pos + offset))].join("") : null)].join("");
    } else {
      var G__10593 = cljs.core.empty_QMARK_.call(null, this$) ? acc : cljs.core.conj.call(null, acc, [cljs.core.str(this$), cljs.core.str(" "), cljs.core.str(cljs.core.nth.call(null, cljs.pprint.english_scale_numbers, pos + offset))].join(""));
      var G__10594 = pos - 1;
      var G__10595 = cljs.core.first.call(null, remainder);
      var G__10596 = cljs.core.next.call(null, remainder);
      acc = G__10593;
      pos = G__10594;
      this$ = G__10595;
      remainder = G__10596;
      continue;
    }
    break;
  }
};
cljs.pprint.format_cardinal_english = function cljs$pprint$format_cardinal_english(params, navigator, offsets) {
  var vec__10598 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__10598, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10598, 1, null);
  if (cljs.core._EQ_.call(null, 0, arg)) {
    cljs.pprint.print.call(null, "zero");
  } else {
    var abs_arg_10599 = arg < 0 ? -arg : arg;
    var parts_10600 = cljs.pprint.remainders.call(null, 1E3, abs_arg_10599);
    if (cljs.core.count.call(null, parts_10600) <= cljs.core.count.call(null, cljs.pprint.english_scale_numbers)) {
      var parts_strs_10601 = cljs.core.map.call(null, cljs.pprint.format_simple_cardinal, parts_10600);
      var full_str_10602 = cljs.pprint.add_english_scales.call(null, parts_strs_10601, 0);
      cljs.pprint.print.call(null, [cljs.core.str(arg < 0 ? "minus " : null), cljs.core.str(full_str_10602)].join(""));
    } else {
      cljs.pprint.format_integer.call(null, 10, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), " ", new cljs.core.Keyword(null, "commachar", "commachar", 652859327), ",", new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), 3, new cljs.core.Keyword(null, "colon", "colon", -965200945), true], null), cljs.pprint.init_navigator.call(null, new cljs.core.PersistentVector(null, 
      1, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg], null)), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), 0, new cljs.core.Keyword(null, "commachar", "commachar", 652859327), 0, new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), 0], null));
    }
  }
  return navigator__$1;
};
cljs.pprint.format_simple_ordinal = function cljs$pprint$format_simple_ordinal(num) {
  var hundreds = cljs.core.quot.call(null, num, 100);
  var tens = cljs.core.rem.call(null, num, 100);
  return [cljs.core.str(hundreds > 0 ? [cljs.core.str(cljs.core.nth.call(null, cljs.pprint.english_cardinal_units, hundreds)), cljs.core.str(" hundred")].join("") : null), cljs.core.str(hundreds > 0 && tens > 0 ? " " : null), cljs.core.str(tens > 0 ? tens < 20 ? cljs.core.nth.call(null, cljs.pprint.english_ordinal_units, tens) : function() {
    var ten_digit = cljs.core.quot.call(null, tens, 10);
    var unit_digit = cljs.core.rem.call(null, tens, 10);
    if (ten_digit > 0 && !(unit_digit > 0)) {
      return cljs.core.nth.call(null, cljs.pprint.english_ordinal_tens, ten_digit);
    } else {
      return [cljs.core.str(ten_digit > 0 ? cljs.core.nth.call(null, cljs.pprint.english_cardinal_tens, ten_digit) : null), cljs.core.str(ten_digit > 0 && unit_digit > 0 ? "-" : null), cljs.core.str(unit_digit > 0 ? cljs.core.nth.call(null, cljs.pprint.english_ordinal_units, unit_digit) : null)].join("");
    }
  }() : hundreds > 0 ? "th" : null)].join("");
};
cljs.pprint.format_ordinal_english = function cljs$pprint$format_ordinal_english(params, navigator, offsets) {
  var vec__10604 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__10604, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10604, 1, null);
  if (cljs.core._EQ_.call(null, 0, arg)) {
    cljs.pprint.print.call(null, "zeroth");
  } else {
    var abs_arg_10605 = arg < 0 ? -arg : arg;
    var parts_10606 = cljs.pprint.remainders.call(null, 1E3, abs_arg_10605);
    if (cljs.core.count.call(null, parts_10606) <= cljs.core.count.call(null, cljs.pprint.english_scale_numbers)) {
      var parts_strs_10607 = cljs.core.map.call(null, cljs.pprint.format_simple_cardinal, cljs.core.drop_last.call(null, parts_10606));
      var head_str_10608 = cljs.pprint.add_english_scales.call(null, parts_strs_10607, 1);
      var tail_str_10609 = cljs.pprint.format_simple_ordinal.call(null, cljs.core.last.call(null, parts_10606));
      cljs.pprint.print.call(null, [cljs.core.str(arg < 0 ? "minus " : null), cljs.core.str(!cljs.core.empty_QMARK_.call(null, head_str_10608) && !cljs.core.empty_QMARK_.call(null, tail_str_10609) ? [cljs.core.str(head_str_10608), cljs.core.str(", "), cljs.core.str(tail_str_10609)].join("") : !cljs.core.empty_QMARK_.call(null, head_str_10608) ? [cljs.core.str(head_str_10608), cljs.core.str("th")].join("") : tail_str_10609)].join(""));
    } else {
      cljs.pprint.format_integer.call(null, 10, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), " ", new cljs.core.Keyword(null, "commachar", "commachar", 652859327), ",", new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), 3, new cljs.core.Keyword(null, "colon", "colon", -965200945), true], null), cljs.pprint.init_navigator.call(null, new cljs.core.PersistentVector(null, 
      1, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg], null)), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), 0, new cljs.core.Keyword(null, "commachar", "commachar", 652859327), 0, new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), 0], null));
      var low_two_digits_10610 = cljs.core.rem.call(null, arg, 100);
      var not_teens_10611 = 11 < low_two_digits_10610 || 19 > low_two_digits_10610;
      var low_digit_10612 = cljs.core.rem.call(null, low_two_digits_10610, 10);
      cljs.pprint.print.call(null, low_digit_10612 === 1 && not_teens_10611 ? "st" : low_digit_10612 === 2 && not_teens_10611 ? "nd" : low_digit_10612 === 3 && not_teens_10611 ? "rd" : "th");
    }
  }
  return navigator__$1;
};
cljs.pprint.old_roman_table = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["I", "II", "III", "IIII", "V", "VI", "VII", "VIII", "VIIII"], null), new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X", "XX", "XXX", "XXXX", "L", "LX", "LXX", "LXXX", "LXXXX"], null), new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["C", 
"CC", "CCC", "CCCC", "D", "DC", "DCC", "DCCC", "DCCCC"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["M", "MM", "MMM"], null)], null);
cljs.pprint.new_roman_table = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"], null), new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"], null), new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["C", "CC", 
"CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["M", "MM", "MMM"], null)], null);
cljs.pprint.format_roman = function cljs$pprint$format_roman(table, params, navigator, offsets) {
  var vec__10614 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__10614, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10614, 1, null);
  if (typeof arg === "number" && arg > 0 && arg < 4E3) {
    var digits_10615 = cljs.pprint.remainders.call(null, 10, arg);
    var acc_10616 = cljs.core.PersistentVector.EMPTY;
    var pos_10617 = cljs.core.count.call(null, digits_10615) - 1;
    var digits_10618__$1 = digits_10615;
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, digits_10618__$1)) {
        cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, acc_10616));
      } else {
        var digit_10619 = cljs.core.first.call(null, digits_10618__$1);
        var G__10620 = cljs.core._EQ_.call(null, 0, digit_10619) ? acc_10616 : cljs.core.conj.call(null, acc_10616, cljs.core.nth.call(null, cljs.core.nth.call(null, table, pos_10617), digit_10619 - 1));
        var G__10621 = pos_10617 - 1;
        var G__10622 = cljs.core.next.call(null, digits_10618__$1);
        acc_10616 = G__10620;
        pos_10617 = G__10621;
        digits_10618__$1 = G__10622;
        continue;
      }
      break;
    }
  } else {
    cljs.pprint.format_integer.call(null, 10, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), " ", new cljs.core.Keyword(null, "commachar", "commachar", 652859327), ",", new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), 3, new cljs.core.Keyword(null, "colon", "colon", -965200945), true], null), cljs.pprint.init_navigator.call(null, new cljs.core.PersistentVector(null, 
    1, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg], null)), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), 0, new cljs.core.Keyword(null, "commachar", "commachar", 652859327), 0, new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), 0], null));
  }
  return navigator__$1;
};
cljs.pprint.format_old_roman = function cljs$pprint$format_old_roman(params, navigator, offsets) {
  return cljs.pprint.format_roman.call(null, cljs.pprint.old_roman_table, params, navigator, offsets);
};
cljs.pprint.format_new_roman = function cljs$pprint$format_new_roman(params, navigator, offsets) {
  return cljs.pprint.format_roman.call(null, cljs.pprint.new_roman_table, params, navigator, offsets);
};
cljs.pprint.special_chars = new cljs.core.PersistentArrayMap(null, 5, [8, "Backspace", 9, "Tab", 10, "Newline", 13, "Return", 32, "Space"], null);
cljs.pprint.pretty_character = function cljs$pprint$pretty_character(params, navigator, offsets) {
  var vec__10624 = cljs.pprint.next_arg.call(null, navigator);
  var c = cljs.core.nth.call(null, vec__10624, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10624, 1, null);
  var as_int = cljs.pprint.char_code.call(null, c);
  var base_char = as_int & 127;
  var meta = as_int & 128;
  var special = cljs.core.get.call(null, cljs.pprint.special_chars, base_char);
  if (meta > 0) {
    cljs.pprint.print.call(null, "Meta-");
  } else {
  }
  cljs.pprint.print.call(null, cljs.core.truth_(special) ? special : base_char < 32 ? [cljs.core.str("Control-"), cljs.core.str(cljs.core.char$.call(null, base_char + 64))].join("") : cljs.core._EQ_.call(null, base_char, 127) ? "Control-?" : cljs.core.char$.call(null, base_char));
  return navigator__$1;
};
cljs.pprint.readable_character = function cljs$pprint$readable_character(params, navigator, offsets) {
  var vec__10629 = cljs.pprint.next_arg.call(null, navigator);
  var c = cljs.core.nth.call(null, vec__10629, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10629, 1, null);
  var pred__10630_10633 = cljs.core._EQ_;
  var expr__10631_10634 = (new cljs.core.Keyword(null, "char-format", "char-format", -1016499218)).cljs$core$IFn$_invoke$arity$1(params);
  if (cljs.core.truth_(pred__10630_10633.call(null, "o", expr__10631_10634))) {
    cljs.pprint.cl_format.call(null, true, "\\o~3, '0o", cljs.pprint.char_code.call(null, c));
  } else {
    if (cljs.core.truth_(pred__10630_10633.call(null, "u", expr__10631_10634))) {
      cljs.pprint.cl_format.call(null, true, "\\u~4, '0x", cljs.pprint.char_code.call(null, c));
    } else {
      if (cljs.core.truth_(pred__10630_10633.call(null, null, expr__10631_10634))) {
        cljs.pprint.print_char.call(null, c);
      } else {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__10631_10634)].join(""));
      }
    }
  }
  return navigator__$1;
};
cljs.pprint.plain_character = function cljs$pprint$plain_character(params, navigator, offsets) {
  var vec__10636 = cljs.pprint.next_arg.call(null, navigator);
  var char$ = cljs.core.nth.call(null, vec__10636, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10636, 1, null);
  cljs.pprint.print.call(null, char$);
  return navigator__$1;
};
cljs.pprint.abort_QMARK_ = function cljs$pprint$abort_QMARK_(context) {
  var token = cljs.core.first.call(null, context);
  return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333), token) || cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "colon-up-arrow", "colon-up-arrow", 244853007), token);
};
cljs.pprint.execute_sub_format = function cljs$pprint$execute_sub_format(format, args, base_args) {
  return cljs.core.second.call(null, cljs.pprint.map_passing_context.call(null, function(element, context) {
    if (cljs.core.truth_(cljs.pprint.abort_QMARK_.call(null, context))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, context], null);
    } else {
      var vec__10639 = cljs.pprint.realize_parameter_list.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(element), context);
      var params = cljs.core.nth.call(null, vec__10639, 0, null);
      var args__$1 = cljs.core.nth.call(null, vec__10639, 1, null);
      var vec__10640 = cljs.pprint.unzip_map.call(null, params);
      var params__$1 = cljs.core.nth.call(null, vec__10640, 0, null);
      var offsets = cljs.core.nth.call(null, vec__10640, 1, null);
      var params__$2 = cljs.core.assoc.call(null, params__$1, new cljs.core.Keyword(null, "base-args", "base-args", -1268706822), base_args);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.apply.call(null, (new cljs.core.Keyword(null, "func", "func", -238706040)).cljs$core$IFn$_invoke$arity$1(element), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [params__$2, args__$1, offsets], null))], null);
    }
  }, args, format));
};
cljs.pprint.float_parts_base = function cljs$pprint$float_parts_base(f) {
  var s = clojure.string.lower_case.call(null, [cljs.core.str(f)].join(""));
  var exploc = s.indexOf("e");
  var dotloc = s.indexOf(".");
  if (exploc < 0) {
    if (dotloc < 0) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, [cljs.core.str(cljs.core.count.call(null, s) - 1)].join("")], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(cljs.core.subs.call(null, s, 0, dotloc)), cljs.core.str(cljs.core.subs.call(null, s, dotloc + 1))].join(""), [cljs.core.str(dotloc - 1)].join("")], null);
    }
  } else {
    if (dotloc < 0) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.call(null, s, 0, exploc), cljs.core.subs.call(null, s, exploc + 1)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(cljs.core.subs.call(null, s, 0, 1)), cljs.core.str(cljs.core.subs.call(null, s, 2, exploc))].join(""), cljs.core.subs.call(null, s, exploc + 1)], null);
    }
  }
};
cljs.pprint.float_parts = function cljs$pprint$float_parts(f) {
  var vec__10642 = cljs.pprint.float_parts_base.call(null, f);
  var m = cljs.core.nth.call(null, vec__10642, 0, null);
  var e = cljs.core.nth.call(null, vec__10642, 1, null);
  var m1 = cljs.pprint.rtrim.call(null, m, "0");
  var m2 = cljs.pprint.ltrim.call(null, m1, "0");
  var delta = cljs.core.count.call(null, m1) - cljs.core.count.call(null, m2);
  var e__$1 = cljs.core.count.call(null, e) > 0 && cljs.core._EQ_.call(null, cljs.core.nth.call(null, e, 0), "+") ? cljs.core.subs.call(null, e, 1) : e;
  if (cljs.core.empty_QMARK_.call(null, m2)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["0", 0], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m2, parseInt(e__$1, 10) - delta], null);
  }
};
cljs.pprint.inc_s = function cljs$pprint$inc_s(s) {
  var len_1 = cljs.core.count.call(null, s) - 1;
  var i = len_1 | 0;
  while (true) {
    if (i < 0) {
      return cljs.core.apply.call(null, cljs.core.str, "1", cljs.core.repeat.call(null, len_1 + 1, "0"));
    } else {
      if (cljs.core._EQ_.call(null, "9", s.charAt(i))) {
        var G__10643 = i - 1;
        i = G__10643;
        continue;
      } else {
        return cljs.core.apply.call(null, cljs.core.str, cljs.core.subs.call(null, s, 0, i), cljs.core.char$.call(null, cljs.pprint.char_code.call(null, s.charAt(i)) + 1), cljs.core.repeat.call(null, len_1 - i, "0"));
      }
    }
    break;
  }
};
cljs.pprint.round_str = function cljs$pprint$round_str(m, e, d, w) {
  if (cljs.core.truth_(function() {
    var or__4668__auto__ = d;
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return w;
    }
  }())) {
    var len = cljs.core.count.call(null, m);
    var w__$1 = cljs.core.truth_(w) ? function() {
      var x__4999__auto__ = 2;
      var y__5000__auto__ = w;
      return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
    }() : 0;
    var round_pos = cljs.core.truth_(d) ? e + d + 1 : e >= 0 ? function() {
      var x__4999__auto__ = e + 1;
      var y__5000__auto__ = w__$1 - 1;
      return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
    }() : w__$1 + e;
    var vec__10645 = cljs.core._EQ_.call(null, round_pos, 0) ? new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("0"), cljs.core.str(m)].join(""), e + 1, 1, len + 1], null) : new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [m, e, round_pos, len], null);
    var m1 = cljs.core.nth.call(null, vec__10645, 0, null);
    var e1 = cljs.core.nth.call(null, vec__10645, 1, null);
    var round_pos__$1 = cljs.core.nth.call(null, vec__10645, 2, null);
    var len__$1 = cljs.core.nth.call(null, vec__10645, 3, null);
    if (cljs.core.truth_(round_pos__$1)) {
      if (round_pos__$1 < 0) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["0", 0, false], null);
      } else {
        if (len__$1 > round_pos__$1) {
          var round_char = cljs.core.nth.call(null, m1, round_pos__$1);
          var result = cljs.core.subs.call(null, m1, 0, round_pos__$1);
          if (cljs.pprint.char_code.call(null, round_char) >= cljs.pprint.char_code.call(null, "5")) {
            var round_up_result = cljs.pprint.inc_s.call(null, result);
            var expanded = cljs.core.count.call(null, round_up_result) > cljs.core.count.call(null, result);
            return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [expanded ? cljs.core.subs.call(null, round_up_result, 0, cljs.core.count.call(null, round_up_result) - 1) : round_up_result, e1, expanded], null);
          } else {
            return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [result, e1, false], null);
          }
        } else {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [m, e, false], null);
        }
      }
    } else {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [m, e, false], null);
    }
  } else {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [m, e, false], null);
  }
};
cljs.pprint.expand_fixed = function cljs$pprint$expand_fixed(m, e, d) {
  var vec__10647 = e < 0 ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, -e - 1, "0"))), cljs.core.str(m)].join(""), -1], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m, e], null);
  var m1 = cljs.core.nth.call(null, vec__10647, 0, null);
  var e1 = cljs.core.nth.call(null, vec__10647, 1, null);
  var len = cljs.core.count.call(null, m1);
  var target_len = cljs.core.truth_(d) ? e1 + d + 1 : e1 + 1;
  if (len < target_len) {
    return [cljs.core.str(m1), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, target_len - len, "0")))].join("");
  } else {
    return m1;
  }
};
cljs.pprint.insert_decimal = function cljs$pprint$insert_decimal(m, e) {
  if (e < 0) {
    return [cljs.core.str("."), cljs.core.str(m)].join("");
  } else {
    var loc = e + 1;
    return [cljs.core.str(cljs.core.subs.call(null, m, 0, loc)), cljs.core.str("."), cljs.core.str(cljs.core.subs.call(null, m, loc))].join("");
  }
};
cljs.pprint.get_fixed = function cljs$pprint$get_fixed(m, e, d) {
  return cljs.pprint.insert_decimal.call(null, cljs.pprint.expand_fixed.call(null, m, e, d), e);
};
cljs.pprint.insert_scaled_decimal = function cljs$pprint$insert_scaled_decimal(m, k) {
  if (k < 0) {
    return [cljs.core.str("."), cljs.core.str(m)].join("");
  } else {
    return [cljs.core.str(cljs.core.subs.call(null, m, 0, k)), cljs.core.str("."), cljs.core.str(cljs.core.subs.call(null, m, k))].join("");
  }
};
cljs.pprint.convert_ratio = function cljs$pprint$convert_ratio(x) {
  return x;
};
cljs.pprint.fixed_float = function cljs$pprint$fixed_float(params, navigator, offsets) {
  var w = (new cljs.core.Keyword(null, "w", "w", 354169001)).cljs$core$IFn$_invoke$arity$1(params);
  var d = (new cljs.core.Keyword(null, "d", "d", 1972142424)).cljs$core$IFn$_invoke$arity$1(params);
  var vec__10652 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__10652, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10652, 1, null);
  var vec__10653 = arg < 0 ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-", -arg], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["+", arg], null);
  var sign = cljs.core.nth.call(null, vec__10653, 0, null);
  var abs = cljs.core.nth.call(null, vec__10653, 1, null);
  var abs__$1 = cljs.pprint.convert_ratio.call(null, abs);
  var vec__10654 = cljs.pprint.float_parts.call(null, abs__$1);
  var mantissa = cljs.core.nth.call(null, vec__10654, 0, null);
  var exp = cljs.core.nth.call(null, vec__10654, 1, null);
  var scaled_exp = exp + (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(params);
  var add_sign = function() {
    var or__4668__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return arg < 0;
    }
  }();
  var append_zero = cljs.core.not.call(null, d) && cljs.core.count.call(null, mantissa) - 1 <= scaled_exp;
  var vec__10655 = cljs.pprint.round_str.call(null, mantissa, scaled_exp, d, cljs.core.truth_(w) ? w - (cljs.core.truth_(add_sign) ? 1 : 0) : null);
  var rounded_mantissa = cljs.core.nth.call(null, vec__10655, 0, null);
  var scaled_exp__$1 = cljs.core.nth.call(null, vec__10655, 1, null);
  var expanded = cljs.core.nth.call(null, vec__10655, 2, null);
  var fixed_repr = cljs.pprint.get_fixed.call(null, rounded_mantissa, cljs.core.truth_(expanded) ? scaled_exp__$1 + 1 : scaled_exp__$1, d);
  var fixed_repr__$1 = cljs.core.truth_(function() {
    var and__4656__auto__ = w;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = d;
      if (cljs.core.truth_(and__4656__auto____$1)) {
        return d >= 1 && cljs.core._EQ_.call(null, fixed_repr.charAt(0), "0") && cljs.core._EQ_.call(null, fixed_repr.charAt(1), ".") && cljs.core.count.call(null, fixed_repr) > w - (cljs.core.truth_(add_sign) ? 1 : 0);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }()) ? cljs.core.subs.call(null, fixed_repr, 1) : fixed_repr;
  var prepend_zero = cljs.core._EQ_.call(null, cljs.core.first.call(null, fixed_repr__$1), ".");
  if (cljs.core.truth_(w)) {
    var len_10656 = cljs.core.count.call(null, fixed_repr__$1);
    var signed_len_10657 = cljs.core.truth_(add_sign) ? len_10656 + 1 : len_10656;
    var prepend_zero_10658__$1 = prepend_zero && !(signed_len_10657 >= w);
    var append_zero_10659__$1 = append_zero && !(signed_len_10657 >= w);
    var full_len_10660 = prepend_zero_10658__$1 || append_zero_10659__$1 ? signed_len_10657 + 1 : signed_len_10657;
    if (cljs.core.truth_(function() {
      var and__4656__auto__ = full_len_10660 > w;
      if (and__4656__auto__) {
        return (new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106)).cljs$core$IFn$_invoke$arity$1(params);
      } else {
        return and__4656__auto__;
      }
    }())) {
      cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, w, (new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106)).cljs$core$IFn$_invoke$arity$1(params))));
    } else {
      cljs.pprint.print.call(null, [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, w - full_len_10660, (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params)))), cljs.core.str(cljs.core.truth_(add_sign) ? sign : null), cljs.core.str(prepend_zero_10658__$1 ? "0" : null), cljs.core.str(fixed_repr__$1), cljs.core.str(append_zero_10659__$1 ? "0" : null)].join(""));
    }
  } else {
    cljs.pprint.print.call(null, [cljs.core.str(cljs.core.truth_(add_sign) ? sign : null), cljs.core.str(prepend_zero ? "0" : null), cljs.core.str(fixed_repr__$1), cljs.core.str(append_zero ? "0" : null)].join(""));
  }
  return navigator__$1;
};
cljs.pprint.exponential_float = function cljs$pprint$exponential_float(params, navigator, offset) {
  var vec__10667 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__10667, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10667, 1, null);
  var arg__$1 = cljs.pprint.convert_ratio.call(null, arg);
  var G__10669_10673 = cljs.pprint.float_parts.call(null, arg__$1 < 0 ? -arg__$1 : arg__$1);
  var vec__10670_10674 = G__10669_10673;
  var mantissa_10675 = cljs.core.nth.call(null, vec__10670_10674, 0, null);
  var exp_10676 = cljs.core.nth.call(null, vec__10670_10674, 1, null);
  var G__10669_10677__$1 = G__10669_10673;
  while (true) {
    var vec__10671_10678 = G__10669_10677__$1;
    var mantissa_10679__$1 = cljs.core.nth.call(null, vec__10671_10678, 0, null);
    var exp_10680__$1 = cljs.core.nth.call(null, vec__10671_10678, 1, null);
    var w_10681 = (new cljs.core.Keyword(null, "w", "w", 354169001)).cljs$core$IFn$_invoke$arity$1(params);
    var d_10682 = (new cljs.core.Keyword(null, "d", "d", 1972142424)).cljs$core$IFn$_invoke$arity$1(params);
    var e_10683 = (new cljs.core.Keyword(null, "e", "e", 1381269198)).cljs$core$IFn$_invoke$arity$1(params);
    var k_10684 = (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(params);
    var expchar_10685 = function() {
      var or__4668__auto__ = (new cljs.core.Keyword(null, "exponentchar", "exponentchar", 1986664222)).cljs$core$IFn$_invoke$arity$1(params);
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        return "E";
      }
    }();
    var add_sign_10686 = function() {
      var or__4668__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
      if (cljs.core.truth_(or__4668__auto__)) {
        return or__4668__auto__;
      } else {
        return arg__$1 < 0;
      }
    }();
    var prepend_zero_10687 = k_10684 <= 0;
    var scaled_exp_10688 = exp_10680__$1 - (k_10684 - 1);
    var scaled_exp_str_10689 = [cljs.core.str(Math.abs(scaled_exp_10688))].join("");
    var scaled_exp_str_10690__$1 = [cljs.core.str(expchar_10685), cljs.core.str(scaled_exp_10688 < 0 ? "-" : "+"), cljs.core.str(cljs.core.truth_(e_10683) ? cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, e_10683 - cljs.core.count.call(null, scaled_exp_str_10689), "0")) : null), cljs.core.str(scaled_exp_str_10689)].join("");
    var exp_width_10691 = cljs.core.count.call(null, scaled_exp_str_10690__$1);
    var base_mantissa_width_10692 = cljs.core.count.call(null, mantissa_10679__$1);
    var scaled_mantissa_10693 = [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, -k_10684, "0"))), cljs.core.str(mantissa_10679__$1), cljs.core.str(cljs.core.truth_(d_10682) ? cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, d_10682 - (base_mantissa_width_10692 - 1) - (k_10684 < 0 ? -k_10684 : 0), "0")) : null)].join("");
    var w_mantissa_10694 = cljs.core.truth_(w_10681) ? w_10681 - exp_width_10691 : null;
    var vec__10672_10695 = cljs.pprint.round_str.call(null, scaled_mantissa_10693, 0, cljs.core._EQ_.call(null, k_10684, 0) ? d_10682 - 1 : k_10684 > 0 ? d_10682 : k_10684 < 0 ? d_10682 - 1 : null, cljs.core.truth_(w_mantissa_10694) ? w_mantissa_10694 - (cljs.core.truth_(add_sign_10686) ? 1 : 0) : null);
    var rounded_mantissa_10696 = cljs.core.nth.call(null, vec__10672_10695, 0, null);
    var __10697 = cljs.core.nth.call(null, vec__10672_10695, 1, null);
    var incr_exp_10698 = cljs.core.nth.call(null, vec__10672_10695, 2, null);
    var full_mantissa_10699 = cljs.pprint.insert_scaled_decimal.call(null, rounded_mantissa_10696, k_10684);
    var append_zero_10700 = cljs.core._EQ_.call(null, k_10684, cljs.core.count.call(null, rounded_mantissa_10696)) && d_10682 == null;
    if (cljs.core.not.call(null, incr_exp_10698)) {
      if (cljs.core.truth_(w_10681)) {
        var len_10701 = cljs.core.count.call(null, full_mantissa_10699) + exp_width_10691;
        var signed_len_10702 = cljs.core.truth_(add_sign_10686) ? len_10701 + 1 : len_10701;
        var prepend_zero_10703__$1 = prepend_zero_10687 && !cljs.core._EQ_.call(null, signed_len_10702, w_10681);
        var full_len_10704 = prepend_zero_10703__$1 ? signed_len_10702 + 1 : signed_len_10702;
        var append_zero_10705__$1 = append_zero_10700 && full_len_10704 < w_10681;
        if (cljs.core.truth_(function() {
          var and__4656__auto__ = function() {
            var or__4668__auto__ = full_len_10704 > w_10681;
            if (or__4668__auto__) {
              return or__4668__auto__;
            } else {
              var and__4656__auto__ = e_10683;
              if (cljs.core.truth_(and__4656__auto__)) {
                return exp_width_10691 - 2 > e_10683;
              } else {
                return and__4656__auto__;
              }
            }
          }();
          if (cljs.core.truth_(and__4656__auto__)) {
            return (new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106)).cljs$core$IFn$_invoke$arity$1(params);
          } else {
            return and__4656__auto__;
          }
        }())) {
          cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, w_10681, (new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106)).cljs$core$IFn$_invoke$arity$1(params))));
        } else {
          cljs.pprint.print.call(null, [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, w_10681 - full_len_10704 - (append_zero_10705__$1 ? 1 : 0), (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params)))), cljs.core.str(cljs.core.truth_(add_sign_10686) ? arg__$1 < 0 ? "-" : "+" : null), cljs.core.str(prepend_zero_10703__$1 ? "0" : null), cljs.core.str(full_mantissa_10699), cljs.core.str(append_zero_10705__$1 ? "0" : 
          null), cljs.core.str(scaled_exp_str_10690__$1)].join(""));
        }
      } else {
        cljs.pprint.print.call(null, [cljs.core.str(cljs.core.truth_(add_sign_10686) ? arg__$1 < 0 ? "-" : "+" : null), cljs.core.str(prepend_zero_10687 ? "0" : null), cljs.core.str(full_mantissa_10699), cljs.core.str(append_zero_10700 ? "0" : null), cljs.core.str(scaled_exp_str_10690__$1)].join(""));
      }
    } else {
      var G__10706 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [rounded_mantissa_10696, exp_10680__$1 + 1], null);
      G__10669_10677__$1 = G__10706;
      continue;
    }
    break;
  }
  return navigator__$1;
};
cljs.pprint.general_float = function cljs$pprint$general_float(params, navigator, offsets) {
  var vec__10709 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__10709, 0, null);
  var _ = cljs.core.nth.call(null, vec__10709, 1, null);
  var arg__$1 = cljs.pprint.convert_ratio.call(null, arg);
  var vec__10710 = cljs.pprint.float_parts.call(null, arg__$1 < 0 ? -arg__$1 : arg__$1);
  var mantissa = cljs.core.nth.call(null, vec__10710, 0, null);
  var exp = cljs.core.nth.call(null, vec__10710, 1, null);
  var w = (new cljs.core.Keyword(null, "w", "w", 354169001)).cljs$core$IFn$_invoke$arity$1(params);
  var d = (new cljs.core.Keyword(null, "d", "d", 1972142424)).cljs$core$IFn$_invoke$arity$1(params);
  var e = (new cljs.core.Keyword(null, "e", "e", 1381269198)).cljs$core$IFn$_invoke$arity$1(params);
  var n = cljs.core._EQ_.call(null, arg__$1, 0) ? 0 : exp + 1;
  var ee = cljs.core.truth_(e) ? e + 2 : 4;
  var ww = cljs.core.truth_(w) ? w - ee : null;
  var d__$1 = cljs.core.truth_(d) ? d : function() {
    var x__4999__auto__ = cljs.core.count.call(null, mantissa);
    var y__5000__auto__ = function() {
      var x__5006__auto__ = n;
      var y__5007__auto__ = 7;
      return x__5006__auto__ < y__5007__auto__ ? x__5006__auto__ : y__5007__auto__;
    }();
    return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
  }();
  var dd = d__$1 - n;
  if (0 <= dd && dd <= d__$1) {
    var navigator__$1 = cljs.pprint.fixed_float.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "w", "w", 354169001), ww, new cljs.core.Keyword(null, "d", "d", 1972142424), dd, new cljs.core.Keyword(null, "k", "k", -2146297393), 0, new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106), (new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106)).cljs$core$IFn$_invoke$arity$1(params), new cljs.core.Keyword(null, "padchar", "padchar", 
    2018584530), (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params), new cljs.core.Keyword(null, "at", "at", 1476951349), (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)], null), navigator, offsets);
    cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, ee, " ")));
    return navigator__$1;
  } else {
    return cljs.pprint.exponential_float.call(null, params, navigator, offsets);
  }
};
cljs.pprint.dollar_float = function cljs$pprint$dollar_float(params, navigator, offsets) {
  var vec__10714 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__10714, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10714, 1, null);
  var vec__10715 = cljs.pprint.float_parts.call(null, Math.abs(arg));
  var mantissa = cljs.core.nth.call(null, vec__10715, 0, null);
  var exp = cljs.core.nth.call(null, vec__10715, 1, null);
  var d = (new cljs.core.Keyword(null, "d", "d", 1972142424)).cljs$core$IFn$_invoke$arity$1(params);
  var n = (new cljs.core.Keyword(null, "n", "n", 562130025)).cljs$core$IFn$_invoke$arity$1(params);
  var w = (new cljs.core.Keyword(null, "w", "w", 354169001)).cljs$core$IFn$_invoke$arity$1(params);
  var add_sign = function() {
    var or__4668__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return arg < 0;
    }
  }();
  var vec__10716 = cljs.pprint.round_str.call(null, mantissa, exp, d, null);
  var rounded_mantissa = cljs.core.nth.call(null, vec__10716, 0, null);
  var scaled_exp = cljs.core.nth.call(null, vec__10716, 1, null);
  var expanded = cljs.core.nth.call(null, vec__10716, 2, null);
  var fixed_repr = cljs.pprint.get_fixed.call(null, rounded_mantissa, cljs.core.truth_(expanded) ? scaled_exp + 1 : scaled_exp, d);
  var full_repr = [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, n - fixed_repr.indexOf("."), "0"))), cljs.core.str(fixed_repr)].join("");
  var full_len = cljs.core.count.call(null, full_repr) + (cljs.core.truth_(add_sign) ? 1 : 0);
  cljs.pprint.print.call(null, [cljs.core.str(cljs.core.truth_(function() {
    var and__4656__auto__ = (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(and__4656__auto__)) {
      return add_sign;
    } else {
      return and__4656__auto__;
    }
  }()) ? arg < 0 ? "-" : "+" : null), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, w - full_len, (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params)))), cljs.core.str(cljs.core.truth_(function() {
    var and__4656__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params));
    if (and__4656__auto__) {
      return add_sign;
    } else {
      return and__4656__auto__;
    }
  }()) ? arg < 0 ? "-" : "+" : null), cljs.core.str(full_repr)].join(""));
  return navigator__$1;
};
cljs.pprint.choice_conditional = function cljs$pprint$choice_conditional(params, arg_navigator, offsets) {
  var arg = (new cljs.core.Keyword(null, "selector", "selector", 762528866)).cljs$core$IFn$_invoke$arity$1(params);
  var vec__10718 = cljs.core.truth_(arg) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg, arg_navigator], null) : cljs.pprint.next_arg.call(null, arg_navigator);
  var arg__$1 = cljs.core.nth.call(null, vec__10718, 0, null);
  var navigator = cljs.core.nth.call(null, vec__10718, 1, null);
  var clauses = (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params);
  var clause = arg__$1 < 0 || arg__$1 >= cljs.core.count.call(null, clauses) ? cljs.core.first.call(null, (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(params)) : cljs.core.nth.call(null, clauses, arg__$1);
  if (cljs.core.truth_(clause)) {
    return cljs.pprint.execute_sub_format.call(null, clause, navigator, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
  } else {
    return navigator;
  }
};
cljs.pprint.boolean_conditional = function cljs$pprint$boolean_conditional(params, arg_navigator, offsets) {
  var vec__10720 = cljs.pprint.next_arg.call(null, arg_navigator);
  var arg = cljs.core.nth.call(null, vec__10720, 0, null);
  var navigator = cljs.core.nth.call(null, vec__10720, 1, null);
  var clauses = (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params);
  var clause = cljs.core.truth_(arg) ? cljs.core.second.call(null, clauses) : cljs.core.first.call(null, clauses);
  if (cljs.core.truth_(clause)) {
    return cljs.pprint.execute_sub_format.call(null, clause, navigator, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
  } else {
    return navigator;
  }
};
cljs.pprint.check_arg_conditional = function cljs$pprint$check_arg_conditional(params, arg_navigator, offsets) {
  var vec__10722 = cljs.pprint.next_arg.call(null, arg_navigator);
  var arg = cljs.core.nth.call(null, vec__10722, 0, null);
  var navigator = cljs.core.nth.call(null, vec__10722, 1, null);
  var clauses = (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params);
  var clause = cljs.core.truth_(arg) ? cljs.core.first.call(null, clauses) : null;
  if (cljs.core.truth_(arg)) {
    if (cljs.core.truth_(clause)) {
      return cljs.pprint.execute_sub_format.call(null, clause, arg_navigator, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
    } else {
      return arg_navigator;
    }
  } else {
    return navigator;
  }
};
cljs.pprint.iterate_sublist = function cljs$pprint$iterate_sublist(params, navigator, offsets) {
  var max_count = (new cljs.core.Keyword(null, "max-iterations", "max-iterations", 2021275563)).cljs$core$IFn$_invoke$arity$1(params);
  var param_clause = cljs.core.first.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params));
  var vec__10725 = cljs.core.empty_QMARK_.call(null, param_clause) ? cljs.pprint.get_format_arg.call(null, navigator) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [param_clause, navigator], null);
  var clause = cljs.core.nth.call(null, vec__10725, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10725, 1, null);
  var vec__10726 = cljs.pprint.next_arg.call(null, navigator__$1);
  var arg_list = cljs.core.nth.call(null, vec__10726, 0, null);
  var navigator__$2 = cljs.core.nth.call(null, vec__10726, 1, null);
  var args = cljs.pprint.init_navigator.call(null, arg_list);
  var count = 0;
  var args__$1 = args;
  var last_pos = -1 | 0;
  while (true) {
    if (cljs.core.not.call(null, max_count) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(args__$1), last_pos) && count > 1) {
      throw Error("%{ construct not consuming any arguments: Infinite loop!");
    } else {
    }
    if (cljs.core.truth_(function() {
      var or__4668__auto__ = cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(args__$1)) && (cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "right-params", "right-params", -1790676237)).cljs$core$IFn$_invoke$arity$1(params))) || count > 0);
      if (or__4668__auto__) {
        return or__4668__auto__;
      } else {
        var and__4656__auto__ = max_count;
        if (cljs.core.truth_(and__4656__auto__)) {
          return count >= max_count;
        } else {
          return and__4656__auto__;
        }
      }
    }())) {
      return navigator__$2;
    } else {
      var iter_result = cljs.pprint.execute_sub_format.call(null, clause, args__$1, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333), cljs.core.first.call(null, iter_result))) {
        return navigator__$2;
      } else {
        var G__10727 = count + 1;
        var G__10728 = iter_result;
        var G__10729 = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(args__$1);
        count = G__10727;
        args__$1 = G__10728;
        last_pos = G__10729;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.iterate_list_of_sublists = function cljs$pprint$iterate_list_of_sublists(params, navigator, offsets) {
  var max_count = (new cljs.core.Keyword(null, "max-iterations", "max-iterations", 2021275563)).cljs$core$IFn$_invoke$arity$1(params);
  var param_clause = cljs.core.first.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params));
  var vec__10732 = cljs.core.empty_QMARK_.call(null, param_clause) ? cljs.pprint.get_format_arg.call(null, navigator) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [param_clause, navigator], null);
  var clause = cljs.core.nth.call(null, vec__10732, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10732, 1, null);
  var vec__10733 = cljs.pprint.next_arg.call(null, navigator__$1);
  var arg_list = cljs.core.nth.call(null, vec__10733, 0, null);
  var navigator__$2 = cljs.core.nth.call(null, vec__10733, 1, null);
  var count = 0;
  var arg_list__$1 = arg_list;
  while (true) {
    if (cljs.core.truth_(function() {
      var or__4668__auto__ = cljs.core.empty_QMARK_.call(null, arg_list__$1) && (cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "right-params", "right-params", -1790676237)).cljs$core$IFn$_invoke$arity$1(params))) || count > 0);
      if (or__4668__auto__) {
        return or__4668__auto__;
      } else {
        var and__4656__auto__ = max_count;
        if (cljs.core.truth_(and__4656__auto__)) {
          return count >= max_count;
        } else {
          return and__4656__auto__;
        }
      }
    }())) {
      return navigator__$2;
    } else {
      var iter_result = cljs.pprint.execute_sub_format.call(null, clause, cljs.pprint.init_navigator.call(null, cljs.core.first.call(null, arg_list__$1)), cljs.pprint.init_navigator.call(null, cljs.core.next.call(null, arg_list__$1)));
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "colon-up-arrow", "colon-up-arrow", 244853007), cljs.core.first.call(null, iter_result))) {
        return navigator__$2;
      } else {
        var G__10734 = count + 1;
        var G__10735 = cljs.core.next.call(null, arg_list__$1);
        count = G__10734;
        arg_list__$1 = G__10735;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.iterate_main_list = function cljs$pprint$iterate_main_list(params, navigator, offsets) {
  var max_count = (new cljs.core.Keyword(null, "max-iterations", "max-iterations", 2021275563)).cljs$core$IFn$_invoke$arity$1(params);
  var param_clause = cljs.core.first.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params));
  var vec__10737 = cljs.core.empty_QMARK_.call(null, param_clause) ? cljs.pprint.get_format_arg.call(null, navigator) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [param_clause, navigator], null);
  var clause = cljs.core.nth.call(null, vec__10737, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10737, 1, null);
  var count = 0;
  var navigator__$2 = navigator__$1;
  var last_pos = -1 | 0;
  while (true) {
    if (cljs.core.not.call(null, max_count) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator__$2), last_pos) && count > 1) {
      throw Error("%@{ construct not consuming any arguments: Infinite loop!");
    } else {
    }
    if (cljs.core.truth_(function() {
      var or__4668__auto__ = cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator__$2)) && (cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "right-params", "right-params", -1790676237)).cljs$core$IFn$_invoke$arity$1(params))) || count > 0);
      if (or__4668__auto__) {
        return or__4668__auto__;
      } else {
        var and__4656__auto__ = max_count;
        if (cljs.core.truth_(and__4656__auto__)) {
          return count >= max_count;
        } else {
          return and__4656__auto__;
        }
      }
    }())) {
      return navigator__$2;
    } else {
      var iter_result = cljs.pprint.execute_sub_format.call(null, clause, navigator__$2, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333), cljs.core.first.call(null, iter_result))) {
        return cljs.core.second.call(null, iter_result);
      } else {
        var G__10738 = count + 1;
        var G__10739 = iter_result;
        var G__10740 = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator__$2);
        count = G__10738;
        navigator__$2 = G__10739;
        last_pos = G__10740;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.iterate_main_sublists = function cljs$pprint$iterate_main_sublists(params, navigator, offsets) {
  var max_count = (new cljs.core.Keyword(null, "max-iterations", "max-iterations", 2021275563)).cljs$core$IFn$_invoke$arity$1(params);
  var param_clause = cljs.core.first.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params));
  var vec__10743 = cljs.core.empty_QMARK_.call(null, param_clause) ? cljs.pprint.get_format_arg.call(null, navigator) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [param_clause, navigator], null);
  var clause = cljs.core.nth.call(null, vec__10743, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10743, 1, null);
  var count = 0;
  var navigator__$2 = navigator__$1;
  while (true) {
    if (cljs.core.truth_(function() {
      var or__4668__auto__ = cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator__$2)) && (cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "right-params", "right-params", -1790676237)).cljs$core$IFn$_invoke$arity$1(params))) || count > 0);
      if (or__4668__auto__) {
        return or__4668__auto__;
      } else {
        var and__4656__auto__ = max_count;
        if (cljs.core.truth_(and__4656__auto__)) {
          return count >= max_count;
        } else {
          return and__4656__auto__;
        }
      }
    }())) {
      return navigator__$2;
    } else {
      var vec__10744 = cljs.pprint.next_arg_or_nil.call(null, navigator__$2);
      var sublist = cljs.core.nth.call(null, vec__10744, 0, null);
      var navigator__$3 = cljs.core.nth.call(null, vec__10744, 1, null);
      var iter_result = cljs.pprint.execute_sub_format.call(null, clause, cljs.pprint.init_navigator.call(null, sublist), navigator__$3);
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "colon-up-arrow", "colon-up-arrow", 244853007), cljs.core.first.call(null, iter_result))) {
        return navigator__$3;
      } else {
        var G__10745 = count + 1;
        var G__10746 = navigator__$3;
        count = G__10745;
        navigator__$2 = G__10746;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.format_logical_block;
cljs.pprint.justify_clauses;
cljs.pprint.logical_block_or_justify = function cljs$pprint$logical_block_or_justify(params, navigator, offsets) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "right-params", "right-params", -1790676237)).cljs$core$IFn$_invoke$arity$1(params)))) {
    return cljs.pprint.format_logical_block.call(null, params, navigator, offsets);
  } else {
    return cljs.pprint.justify_clauses.call(null, params, navigator, offsets);
  }
};
cljs.pprint.render_clauses = function cljs$pprint$render_clauses(clauses, navigator, base_navigator) {
  var clauses__$1 = clauses;
  var acc = cljs.core.PersistentVector.EMPTY;
  var navigator__$1 = navigator;
  while (true) {
    if (cljs.core.empty_QMARK_.call(null, clauses__$1)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [acc, navigator__$1], null);
    } else {
      var clause = cljs.core.first.call(null, clauses__$1);
      var vec__10749 = function() {
        var sb = new goog.string.StringBuffer;
        var _STAR_out_STAR_10750 = cljs.core._STAR_out_STAR_;
        cljs.core._STAR_out_STAR_ = new cljs.core.StringBufferWriter(sb);
        try {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.pprint.execute_sub_format.call(null, clause, navigator__$1, base_navigator), [cljs.core.str(sb)].join("")], null);
        } finally {
          cljs.core._STAR_out_STAR_ = _STAR_out_STAR_10750;
        }
      }();
      var iter_result = cljs.core.nth.call(null, vec__10749, 0, null);
      var result_str = cljs.core.nth.call(null, vec__10749, 1, null);
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333), cljs.core.first.call(null, iter_result))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [acc, cljs.core.second.call(null, iter_result)], null);
      } else {
        var G__10751 = cljs.core.next.call(null, clauses__$1);
        var G__10752 = cljs.core.conj.call(null, acc, result_str);
        var G__10753 = iter_result;
        clauses__$1 = G__10751;
        acc = G__10752;
        navigator__$1 = G__10753;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.justify_clauses = function cljs$pprint$justify_clauses(params, navigator, offsets) {
  var vec__10758 = function() {
    var temp__4425__auto__ = (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var else$ = temp__4425__auto__;
      return cljs.pprint.render_clauses.call(null, else$, navigator, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
    } else {
      return null;
    }
  }();
  var vec__10759 = cljs.core.nth.call(null, vec__10758, 0, null);
  var eol_str = cljs.core.nth.call(null, vec__10759, 0, null);
  var new_navigator = cljs.core.nth.call(null, vec__10758, 1, null);
  var navigator__$1 = function() {
    var or__4668__auto__ = new_navigator;
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return navigator;
    }
  }();
  var vec__10760 = function() {
    var temp__4425__auto__ = (new cljs.core.Keyword(null, "else-params", "else-params", -832171646)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var p = temp__4425__auto__;
      return cljs.pprint.realize_parameter_list.call(null, p, navigator__$1);
    } else {
      return null;
    }
  }();
  var else_params = cljs.core.nth.call(null, vec__10760, 0, null);
  var new_navigator__$1 = cljs.core.nth.call(null, vec__10760, 1, null);
  var navigator__$2 = function() {
    var or__4668__auto__ = new_navigator__$1;
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return navigator__$1;
    }
  }();
  var min_remaining = function() {
    var or__4668__auto__ = cljs.core.first.call(null, (new cljs.core.Keyword(null, "min-remaining", "min-remaining", 962687677)).cljs$core$IFn$_invoke$arity$1(else_params));
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return 0;
    }
  }();
  var max_columns = function() {
    var or__4668__auto__ = cljs.core.first.call(null, (new cljs.core.Keyword(null, "max-columns", "max-columns", 1742323262)).cljs$core$IFn$_invoke$arity$1(else_params));
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return cljs.pprint.get_max_column.call(null, cljs.core._STAR_out_STAR_);
    }
  }();
  var clauses = (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params);
  var vec__10761 = cljs.pprint.render_clauses.call(null, clauses, navigator__$2, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
  var strs = cljs.core.nth.call(null, vec__10761, 0, null);
  var navigator__$3 = cljs.core.nth.call(null, vec__10761, 1, null);
  var slots = function() {
    var x__4999__auto__ = 1;
    var y__5000__auto__ = cljs.core.count.call(null, strs) - 1 + (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? 1 : 0) + (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)) ? 1 : 0);
    return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
  }();
  var chars = cljs.core.reduce.call(null, cljs.core._PLUS_, cljs.core.map.call(null, cljs.core.count, strs));
  var mincol = (new cljs.core.Keyword(null, "mincol", "mincol", 1230695445)).cljs$core$IFn$_invoke$arity$1(params);
  var minpad = (new cljs.core.Keyword(null, "minpad", "minpad", 323570901)).cljs$core$IFn$_invoke$arity$1(params);
  var colinc = (new cljs.core.Keyword(null, "colinc", "colinc", -584873385)).cljs$core$IFn$_invoke$arity$1(params);
  var minout = chars + slots * minpad;
  var result_columns = minout <= mincol ? mincol : mincol + colinc * (1 + cljs.core.quot.call(null, minout - mincol - 1, colinc));
  var total_pad = result_columns - chars;
  var pad = function() {
    var x__4999__auto__ = minpad;
    var y__5000__auto__ = cljs.core.quot.call(null, total_pad, slots);
    return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
  }();
  var extra_pad = total_pad - pad * slots;
  var pad_str = cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, pad, (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params)));
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = eol_str;
    if (cljs.core.truth_(and__4656__auto__)) {
      return cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, cljs.core._STAR_out_STAR_)))) + min_remaining + result_columns > max_columns;
    } else {
      return and__4656__auto__;
    }
  }())) {
    cljs.pprint.print.call(null, eol_str);
  } else {
  }
  var slots_10762__$1 = slots;
  var extra_pad_10763__$1 = extra_pad;
  var strs_10764__$1 = strs;
  var pad_only_10765 = function() {
    var or__4668__auto__ = (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return cljs.core._EQ_.call(null, cljs.core.count.call(null, strs_10764__$1), 1) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params));
    }
  }();
  while (true) {
    if (cljs.core.seq.call(null, strs_10764__$1)) {
      cljs.pprint.print.call(null, [cljs.core.str(cljs.core.not.call(null, pad_only_10765) ? cljs.core.first.call(null, strs_10764__$1) : null), cljs.core.str(cljs.core.truth_(function() {
        var or__4668__auto__ = pad_only_10765;
        if (cljs.core.truth_(or__4668__auto__)) {
          return or__4668__auto__;
        } else {
          var or__4668__auto____$1 = cljs.core.next.call(null, strs_10764__$1);
          if (or__4668__auto____$1) {
            return or__4668__auto____$1;
          } else {
            return (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
          }
        }
      }()) ? pad_str : null), cljs.core.str(extra_pad_10763__$1 > 0 ? (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params) : null)].join(""));
      var G__10766 = slots_10762__$1 - 1;
      var G__10767 = extra_pad_10763__$1 - 1;
      var G__10768 = cljs.core.truth_(pad_only_10765) ? strs_10764__$1 : cljs.core.next.call(null, strs_10764__$1);
      var G__10769 = false;
      slots_10762__$1 = G__10766;
      extra_pad_10763__$1 = G__10767;
      strs_10764__$1 = G__10768;
      pad_only_10765 = G__10769;
      continue;
    } else {
    }
    break;
  }
  return navigator__$3;
};
cljs.pprint.downcase_writer = function cljs$pprint$downcase_writer(writer) {
  if (typeof cljs.pprint.t_cljs$pprint10776 !== "undefined") {
  } else {
    cljs.pprint.t_cljs$pprint10776 = function(downcase_writer, writer, meta10777) {
      this.downcase_writer = downcase_writer;
      this.writer = writer;
      this.meta10777 = meta10777;
      this.cljs$lang$protocol_mask$partition0$ = 1074135040;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.pprint.t_cljs$pprint10776.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10778, meta10777__$1) {
      var self__ = this;
      var _10778__$1 = this;
      return new cljs.pprint.t_cljs$pprint10776(self__.downcase_writer, self__.writer, meta10777__$1);
    };
    cljs.pprint.t_cljs$pprint10776.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10778) {
      var self__ = this;
      var _10778__$1 = this;
      return self__.meta10777;
    };
    cljs.pprint.t_cljs$pprint10776.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core._flush.call(null, self__.writer);
    };
    cljs.pprint.t_cljs$pprint10776.prototype.cljs$core$IWriter$_write$arity$2 = function(this$, x) {
      var self__ = this;
      var this$__$1 = this;
      var pred__10779 = cljs.core._EQ_;
      var expr__10780 = cljs.core.type.call(null, x);
      if (cljs.core.truth_(pred__10779.call(null, String, expr__10780))) {
        var s = x;
        return cljs.core._write.call(null, self__.writer, clojure.string.lower_case.call(null, s));
      } else {
        if (cljs.core.truth_(pred__10779.call(null, Number, expr__10780))) {
          var c = x;
          return cljs.core._write.call(null, self__.writer, clojure.string.lower_case.call(null, cljs.core.char$.call(null, c)));
        } else {
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__10780)].join(""));
        }
      }
    };
    cljs.pprint.t_cljs$pprint10776.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "downcase-writer", "downcase-writer", 37286911, null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 
      1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "writer", "writer", 1362963291, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Returns a proxy that wraps writer, converting all characters to lower case"], null)), new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "meta10777", "meta10777", -863253353, null)], null);
    };
    cljs.pprint.t_cljs$pprint10776.cljs$lang$type = true;
    cljs.pprint.t_cljs$pprint10776.cljs$lang$ctorStr = "cljs.pprint/t_cljs$pprint10776";
    cljs.pprint.t_cljs$pprint10776.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
      return cljs.core._write.call(null, writer__5267__auto__, "cljs.pprint/t_cljs$pprint10776");
    };
    cljs.pprint.__GT_t_cljs$pprint10776 = function cljs$pprint$downcase_writer_$___GT_t_cljs$pprint10776(downcase_writer__$1, writer__$1, meta10777) {
      return new cljs.pprint.t_cljs$pprint10776(downcase_writer__$1, writer__$1, meta10777);
    };
  }
  return new cljs.pprint.t_cljs$pprint10776(cljs$pprint$downcase_writer, writer, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.pprint.upcase_writer = function cljs$pprint$upcase_writer(writer) {
  if (typeof cljs.pprint.t_cljs$pprint10788 !== "undefined") {
  } else {
    cljs.pprint.t_cljs$pprint10788 = function(upcase_writer, writer, meta10789) {
      this.upcase_writer = upcase_writer;
      this.writer = writer;
      this.meta10789 = meta10789;
      this.cljs$lang$protocol_mask$partition0$ = 1074135040;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.pprint.t_cljs$pprint10788.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10790, meta10789__$1) {
      var self__ = this;
      var _10790__$1 = this;
      return new cljs.pprint.t_cljs$pprint10788(self__.upcase_writer, self__.writer, meta10789__$1);
    };
    cljs.pprint.t_cljs$pprint10788.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10790) {
      var self__ = this;
      var _10790__$1 = this;
      return self__.meta10789;
    };
    cljs.pprint.t_cljs$pprint10788.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core._flush.call(null, self__.writer);
    };
    cljs.pprint.t_cljs$pprint10788.prototype.cljs$core$IWriter$_write$arity$2 = function(this$, x) {
      var self__ = this;
      var this$__$1 = this;
      var pred__10791 = cljs.core._EQ_;
      var expr__10792 = cljs.core.type.call(null, x);
      if (cljs.core.truth_(pred__10791.call(null, String, expr__10792))) {
        var s = x;
        return cljs.core._write.call(null, self__.writer, clojure.string.upper_case.call(null, s));
      } else {
        if (cljs.core.truth_(pred__10791.call(null, Number, expr__10792))) {
          var c = x;
          return cljs.core._write.call(null, self__.writer, clojure.string.upper_case.call(null, cljs.core.char$.call(null, c)));
        } else {
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__10792)].join(""));
        }
      }
    };
    cljs.pprint.t_cljs$pprint10788.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "upcase-writer", "upcase-writer", 51077317, null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 
      1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "writer", "writer", 1362963291, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Returns a proxy that wraps writer, converting all characters to upper case"], null)), new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "meta10789", "meta10789", 1529283771, null)], null);
    };
    cljs.pprint.t_cljs$pprint10788.cljs$lang$type = true;
    cljs.pprint.t_cljs$pprint10788.cljs$lang$ctorStr = "cljs.pprint/t_cljs$pprint10788";
    cljs.pprint.t_cljs$pprint10788.cljs$lang$ctorPrWriter = function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
      return cljs.core._write.call(null, writer__5267__auto__, "cljs.pprint/t_cljs$pprint10788");
    };
    cljs.pprint.__GT_t_cljs$pprint10788 = function cljs$pprint$upcase_writer_$___GT_t_cljs$pprint10788(upcase_writer__$1, writer__$1, meta10789) {
      return new cljs.pprint.t_cljs$pprint10788(upcase_writer__$1, writer__$1, meta10789);
    };
  }
  return new cljs.pprint.t_cljs$pprint10788(cljs$pprint$upcase_writer, writer, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.pprint.capitalize_string = function cljs$pprint$capitalize_string(s, first_QMARK_) {
  var f = cljs.core.first.call(null, s);
  var s__$1 = cljs.core.truth_(function() {
    var and__4656__auto__ = first_QMARK_;
    if (cljs.core.truth_(and__4656__auto__)) {
      var and__4656__auto____$1 = f;
      if (cljs.core.truth_(and__4656__auto____$1)) {
        return goog.string.isUnicodeChar(f);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }()) ? [cljs.core.str(clojure.string.upper_case.call(null, f)), cljs.core.str(cljs.core.subs.call(null, s, 1))].join("") : s;
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.first.call(null, cljs.pprint.consume.call(null, function(f, s__$1) {
    return function(s__$2) {
      if (cljs.core.empty_QMARK_.call(null, s__$2)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, null], null);
      } else {
        var m = RegExp("\\W\\w", "g").exec(s__$2);
        var offset = function() {
          var and__4656__auto__ = m;
          if (cljs.core.truth_(and__4656__auto__)) {
            return m.index + 1;
          } else {
            return and__4656__auto__;
          }
        }();
        if (cljs.core.truth_(offset)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(cljs.core.subs.call(null, s__$2, 0, offset)), cljs.core.str(clojure.string.upper_case.call(null, cljs.core.nth.call(null, s__$2, offset)))].join(""), cljs.core.subs.call(null, s__$2, offset + 1)], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s__$2, null], null);
        }
      }
    };
  }(f, s__$1), s__$1)));
};
cljs.pprint.capitalize_word_writer = function cljs$pprint$capitalize_word_writer(writer) {
  var last_was_whitespace_QMARK_ = cljs.core.atom.call(null, true);
  if (typeof cljs.pprint.t_cljs$pprint10800 !== "undefined") {
  } else {
    cljs.pprint.t_cljs$pprint10800 = function(capitalize_word_writer, writer, last_was_whitespace_QMARK_, meta10801) {
      this.capitalize_word_writer = capitalize_word_writer;
      this.writer = writer;
      this.last_was_whitespace_QMARK_ = last_was_whitespace_QMARK_;
      this.meta10801 = meta10801;
      this.cljs$lang$protocol_mask$partition0$ = 1074135040;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.pprint.t_cljs$pprint10800.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(last_was_whitespace_QMARK_) {
      return function(_10802, meta10801__$1) {
        var self__ = this;
        var _10802__$1 = this;
        return new cljs.pprint.t_cljs$pprint10800(self__.capitalize_word_writer, self__.writer, self__.last_was_whitespace_QMARK_, meta10801__$1);
      };
    }(last_was_whitespace_QMARK_);
    cljs.pprint.t_cljs$pprint10800.prototype.cljs$core$IMeta$_meta$arity$1 = function(last_was_whitespace_QMARK_) {
      return function(_10802) {
        var self__ = this;
        var _10802__$1 = this;
        return self__.meta10801;
      };
    }(last_was_whitespace_QMARK_);
    cljs.pprint.t_cljs$pprint10800.prototype.cljs$core$IWriter$_flush$arity$1 = function(last_was_whitespace_QMARK_) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core._flush.call(null, self__.writer);
      };
    }(last_was_whitespace_QMARK_);
    cljs.pprint.t_cljs$pprint10800.prototype.cljs$core$IWriter$_write$arity$2 = function(last_was_whitespace_QMARK_) {
      return function(this$, x) {
        var self__ = this;
        var this$__$1 = this;
        var pred__10803 = cljs.core._EQ_;
        var expr__10804 = cljs.core.type.call(null, x);
        if (cljs.core.truth_(pred__10803.call(null, String, expr__10804))) {
          var s = x;
          cljs.core._write.call(null, self__.writer, cljs.pprint.capitalize_string.call(null, s.toLowerCase(), cljs.core.deref.call(null, self__.last_was_whitespace_QMARK_)));
          if (s.length > 0) {
            return cljs.core.reset_BANG_.call(null, self__.last_was_whitespace_QMARK_, goog.string.isEmptyOrWhitespace(cljs.core.nth.call(null, s, cljs.core.count.call(null, s) - 1)));
          } else {
            return null;
          }
        } else {
          if (cljs.core.truth_(pred__10803.call(null, Number, expr__10804))) {
            var c = cljs.core.char$.call(null, x);
            var mod_c = cljs.core.truth_(cljs.core.deref.call(null, self__.last_was_whitespace_QMARK_)) ? clojure.string.upper_case.call(null, c) : c;
            cljs.core._write.call(null, self__.writer, mod_c);
            return cljs.core.reset_BANG_.call(null, self__.last_was_whitespace_QMARK_, goog.string.isEmptyOrWhitespace(c));
          } else {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__10804)].join(""));
          }
        }
      };
    }(last_was_whitespace_QMARK_);
    cljs.pprint.t_cljs$pprint10800.getBasis = function(last_was_whitespace_QMARK_) {
      return function() {
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "capitalize-word-writer", "capitalize-word-writer", 196688059, null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 
        1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "writer", "writer", 1362963291, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Returns a proxy that wraps writer, capitalizing all words"], null)), new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "last-was-whitespace?", "last-was-whitespace?", -1073928093, null), new cljs.core.Symbol(null, "meta10801", "meta10801", -1199817733, null)], null);
      };
    }(last_was_whitespace_QMARK_);
    cljs.pprint.t_cljs$pprint10800.cljs$lang$type = true;
    cljs.pprint.t_cljs$pprint10800.cljs$lang$ctorStr = "cljs.pprint/t_cljs$pprint10800";
    cljs.pprint.t_cljs$pprint10800.cljs$lang$ctorPrWriter = function(last_was_whitespace_QMARK_) {
      return function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
        return cljs.core._write.call(null, writer__5267__auto__, "cljs.pprint/t_cljs$pprint10800");
      };
    }(last_was_whitespace_QMARK_);
    cljs.pprint.__GT_t_cljs$pprint10800 = function(last_was_whitespace_QMARK_) {
      return function cljs$pprint$capitalize_word_writer_$___GT_t_cljs$pprint10800(capitalize_word_writer__$1, writer__$1, last_was_whitespace_QMARK___$1, meta10801) {
        return new cljs.pprint.t_cljs$pprint10800(capitalize_word_writer__$1, writer__$1, last_was_whitespace_QMARK___$1, meta10801);
      };
    }(last_was_whitespace_QMARK_);
  }
  return new cljs.pprint.t_cljs$pprint10800(cljs$pprint$capitalize_word_writer, writer, last_was_whitespace_QMARK_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.pprint.init_cap_writer = function cljs$pprint$init_cap_writer(writer) {
  var capped = cljs.core.atom.call(null, false);
  if (typeof cljs.pprint.t_cljs$pprint10812 !== "undefined") {
  } else {
    cljs.pprint.t_cljs$pprint10812 = function(init_cap_writer, writer, capped, meta10813) {
      this.init_cap_writer = init_cap_writer;
      this.writer = writer;
      this.capped = capped;
      this.meta10813 = meta10813;
      this.cljs$lang$protocol_mask$partition0$ = 1074135040;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.pprint.t_cljs$pprint10812.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(capped) {
      return function(_10814, meta10813__$1) {
        var self__ = this;
        var _10814__$1 = this;
        return new cljs.pprint.t_cljs$pprint10812(self__.init_cap_writer, self__.writer, self__.capped, meta10813__$1);
      };
    }(capped);
    cljs.pprint.t_cljs$pprint10812.prototype.cljs$core$IMeta$_meta$arity$1 = function(capped) {
      return function(_10814) {
        var self__ = this;
        var _10814__$1 = this;
        return self__.meta10813;
      };
    }(capped);
    cljs.pprint.t_cljs$pprint10812.prototype.cljs$core$IWriter$_flush$arity$1 = function(capped) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core._flush.call(null, self__.writer);
      };
    }(capped);
    cljs.pprint.t_cljs$pprint10812.prototype.cljs$core$IWriter$_write$arity$2 = function(capped) {
      return function(this$, x) {
        var self__ = this;
        var this$__$1 = this;
        var pred__10815 = cljs.core._EQ_;
        var expr__10816 = cljs.core.type.call(null, x);
        if (cljs.core.truth_(pred__10815.call(null, String, expr__10816))) {
          var s = clojure.string.lower_case.call(null, x);
          if (cljs.core.not.call(null, cljs.core.deref.call(null, self__.capped))) {
            var m = RegExp("\\S", "g").exec(s);
            var offset = function() {
              var and__4656__auto__ = m;
              if (cljs.core.truth_(and__4656__auto__)) {
                return m.index;
              } else {
                return and__4656__auto__;
              }
            }();
            if (cljs.core.truth_(offset)) {
              cljs.core._write.call(null, self__.writer, [cljs.core.str(cljs.core.subs.call(null, s, 0, offset)), cljs.core.str(clojure.string.upper_case.call(null, cljs.core.nth.call(null, s, offset))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, offset + 1)))].join(""));
              return cljs.core.reset_BANG_.call(null, self__.capped, true);
            } else {
              return cljs.core._write.call(null, self__.writer, s);
            }
          } else {
            return cljs.core._write.call(null, self__.writer, clojure.string.lower_case.call(null, s));
          }
        } else {
          if (cljs.core.truth_(pred__10815.call(null, Number, expr__10816))) {
            var c = cljs.core.char$.call(null, x);
            if (cljs.core.truth_(function() {
              var and__4656__auto__ = cljs.core.not.call(null, cljs.core.deref.call(null, self__.capped));
              if (and__4656__auto__) {
                return goog.string.isUnicodeChar(c);
              } else {
                return and__4656__auto__;
              }
            }())) {
              cljs.core.reset_BANG_.call(null, self__.capped, true);
              return cljs.core._write.call(null, self__.writer, clojure.string.upper_case.call(null, c));
            } else {
              return cljs.core._write.call(null, self__.writer, clojure.string.lower_case.call(null, c));
            }
          } else {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__10816)].join(""));
          }
        }
      };
    }(capped);
    cljs.pprint.t_cljs$pprint10812.getBasis = function(capped) {
      return function() {
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "init-cap-writer", "init-cap-writer", -861558336, null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 
        1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "writer", "writer", 1362963291, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Returns a proxy that wraps writer, capitalizing the first word"], null)), new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "capped", "capped", -1650988402, null), new cljs.core.Symbol(null, "meta10813", "meta10813", 556646206, null)], null);
      };
    }(capped);
    cljs.pprint.t_cljs$pprint10812.cljs$lang$type = true;
    cljs.pprint.t_cljs$pprint10812.cljs$lang$ctorStr = "cljs.pprint/t_cljs$pprint10812";
    cljs.pprint.t_cljs$pprint10812.cljs$lang$ctorPrWriter = function(capped) {
      return function(this__5266__auto__, writer__5267__auto__, opt__5268__auto__) {
        return cljs.core._write.call(null, writer__5267__auto__, "cljs.pprint/t_cljs$pprint10812");
      };
    }(capped);
    cljs.pprint.__GT_t_cljs$pprint10812 = function(capped) {
      return function cljs$pprint$init_cap_writer_$___GT_t_cljs$pprint10812(init_cap_writer__$1, writer__$1, capped__$1, meta10813) {
        return new cljs.pprint.t_cljs$pprint10812(init_cap_writer__$1, writer__$1, capped__$1, meta10813);
      };
    }(capped);
  }
  return new cljs.pprint.t_cljs$pprint10812(cljs$pprint$init_cap_writer, writer, capped, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.pprint.modify_case = function cljs$pprint$modify_case(make_writer, params, navigator, offsets) {
  var clause = cljs.core.first.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params));
  var _STAR_out_STAR_10819 = cljs.core._STAR_out_STAR_;
  cljs.core._STAR_out_STAR_ = make_writer.call(null, cljs.core._STAR_out_STAR_);
  try {
    return cljs.pprint.execute_sub_format.call(null, clause, navigator, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
  } finally {
    cljs.core._STAR_out_STAR_ = _STAR_out_STAR_10819;
  }
};
cljs.pprint.get_pretty_writer = function cljs$pprint$get_pretty_writer(writer) {
  if (cljs.core.truth_(cljs.pprint.pretty_writer_QMARK_.call(null, writer))) {
    return writer;
  } else {
    return cljs.pprint.pretty_writer.call(null, writer, cljs.pprint._STAR_print_right_margin_STAR_, cljs.pprint._STAR_print_miser_width_STAR_);
  }
};
cljs.pprint.fresh_line = function cljs$pprint$fresh_line() {
  if (!(cljs.core._STAR_out_STAR_ == null) ? cljs.core._STAR_out_STAR_.cljs$lang$protocol_mask$partition0$ & 32768 || cljs.core._STAR_out_STAR_.cljs$core$IDeref$ ? true : !cljs.core._STAR_out_STAR_.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, cljs.core._STAR_out_STAR_) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, cljs.core._STAR_out_STAR_)) {
    if (!cljs.core._EQ_.call(null, 0, cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, cljs.core._STAR_out_STAR_)))))) {
      return cljs.pprint.prn.call(null);
    } else {
      return null;
    }
  } else {
    return cljs.pprint.prn.call(null);
  }
};
cljs.pprint.absolute_tabulation = function cljs$pprint$absolute_tabulation(params, navigator, offsets) {
  var colnum_10822 = (new cljs.core.Keyword(null, "colnum", "colnum", 2023796854)).cljs$core$IFn$_invoke$arity$1(params);
  var colinc_10823 = (new cljs.core.Keyword(null, "colinc", "colinc", -584873385)).cljs$core$IFn$_invoke$arity$1(params);
  var current_10824 = cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, cljs.core._STAR_out_STAR_))));
  var space_count_10825 = current_10824 < colnum_10822 ? colnum_10822 - current_10824 : cljs.core._EQ_.call(null, colinc_10823, 0) ? 0 : colinc_10823 - cljs.core.rem.call(null, current_10824 - colnum_10822, colinc_10823);
  cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, space_count_10825, " ")));
  return navigator;
};
cljs.pprint.relative_tabulation = function cljs$pprint$relative_tabulation(params, navigator, offsets) {
  var colrel_10826 = (new cljs.core.Keyword(null, "colnum", "colnum", 2023796854)).cljs$core$IFn$_invoke$arity$1(params);
  var colinc_10827 = (new cljs.core.Keyword(null, "colinc", "colinc", -584873385)).cljs$core$IFn$_invoke$arity$1(params);
  var start_col_10828 = colrel_10826 + cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, cljs.core._STAR_out_STAR_))));
  var offset_10829 = colinc_10827 > 0 ? cljs.core.rem.call(null, start_col_10828, colinc_10827) : 0;
  var space_count_10830 = colrel_10826 + (cljs.core._EQ_.call(null, 0, offset_10829) ? 0 : colinc_10827 - offset_10829);
  cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, space_count_10830, " ")));
  return navigator;
};
cljs.pprint.format_logical_block = function cljs$pprint$format_logical_block(params, navigator, offsets) {
  var clauses = (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params);
  var clause_count = cljs.core.count.call(null, clauses);
  var prefix = clause_count > 1 ? (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, cljs.core.first.call(null, clauses)))) : cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? "(" : null;
  var body = cljs.core.nth.call(null, clauses, clause_count > 1 ? 1 : 0);
  var suffix = clause_count > 2 ? (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, cljs.core.nth.call(null, clauses, 2)))) : cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? ")" : null;
  var vec__10834 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__10834, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__10834, 1, null);
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_10835_10837 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_10836_10838 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, prefix, null, suffix);
      cljs.pprint.execute_sub_format.call(null, body, cljs.pprint.init_navigator.call(null, arg), (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_10836_10838;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_10835_10837;
    }
  }
  return navigator__$1;
};
cljs.pprint.set_indent = function cljs$pprint$set_indent(params, navigator, offsets) {
  var relative_to = cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? new cljs.core.Keyword(null, "current", "current", -1088038603) : new cljs.core.Keyword(null, "block", "block", 664686210);
  cljs.pprint.pprint_indent.call(null, relative_to, (new cljs.core.Keyword(null, "n", "n", 562130025)).cljs$core$IFn$_invoke$arity$1(params));
  return navigator;
};
cljs.pprint.conditional_newline = function cljs$pprint$conditional_newline(params, navigator, offsets) {
  var kind = cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)) ? new cljs.core.Keyword(null, "mandatory", "mandatory", 542802336) : new cljs.core.Keyword(null, "fill", "fill", 883462889) : cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)) ? new cljs.core.Keyword(null, 
  "miser", "miser", -556060186) : new cljs.core.Keyword(null, "linear", "linear", 872268697);
  cljs.pprint.pprint_newline.call(null, kind);
  return navigator;
};
cljs.pprint.directive_table = cljs.core.PersistentHashMap.fromArrays(["A", "S", "D", "B", "O", "X", "R", "P", "C", "F", "E", "G", "$", "%", "\x26", "|", "~", "\n", "T", "*", "?", "(", ")", "[", ";", "]", "{", "}", "\x3c", "\x3e", "^", "W", "_", "I"], [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "A", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", 
"mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "colinc", "colinc", -584873385), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null), new cljs.core.Keyword(null, "minpad", "minpad", 323570901), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", 
-1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(p1__10839_SHARP_, p2__10840_SHARP_, p3__10841_SHARP_) {
    return cljs.pprint.format_ascii.call(null, cljs.core.print_str, p1__10839_SHARP_, p2__10840_SHARP_, p3__10841_SHARP_);
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "S", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "colinc", "colinc", -584873385), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[1, Number], null), new cljs.core.Keyword(null, "minpad", "minpad", 323570901), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, 
"colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(p1__10842_SHARP_, p2__10843_SHARP_, p3__10844_SHARP_) {
    return cljs.pprint.format_ascii.call(null, cljs.core.pr_str, p1__10842_SHARP_, p2__10843_SHARP_, p3__10844_SHARP_);
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "D", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[" ", String], null), new cljs.core.Keyword(null, "commachar", "commachar", 652859327), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [",", String], null), new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(p1__10845_SHARP_, p2__10846_SHARP_, p3__10847_SHARP_) {
    return cljs.pprint.format_integer.call(null, 10, p1__10845_SHARP_, p2__10846_SHARP_, p3__10847_SHARP_);
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "B", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[" ", String], null), new cljs.core.Keyword(null, "commachar", "commachar", 652859327), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [",", String], null), new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(p1__10848_SHARP_, p2__10849_SHARP_, p3__10850_SHARP_) {
    return cljs.pprint.format_integer.call(null, 2, p1__10848_SHARP_, p2__10849_SHARP_, p3__10850_SHARP_);
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "O", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[" ", String], null), new cljs.core.Keyword(null, "commachar", "commachar", 652859327), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [",", String], null), new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(p1__10851_SHARP_, p2__10852_SHARP_, p3__10853_SHARP_) {
    return cljs.pprint.format_integer.call(null, 8, p1__10851_SHARP_, p2__10852_SHARP_, p3__10853_SHARP_);
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "X", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[" ", String], null), new cljs.core.Keyword(null, "commachar", "commachar", 652859327), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [",", String], null), new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(p1__10854_SHARP_, p2__10855_SHARP_, p3__10856_SHARP_) {
    return cljs.pprint.format_integer.call(null, 16, p1__10854_SHARP_, p2__10855_SHARP_, p3__10856_SHARP_);
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "R", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "base", "base", 185279322), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null), new cljs.core.Keyword(null, "commachar", "commachar", 652859327), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [",", String], null), new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[3, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, 
"generator-fn", "generator-fn", 811851656), function(params, offset) {
  if (cljs.core.truth_(cljs.core.first.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(params)))) {
    return function(p1__10857_SHARP_, p2__10858_SHARP_, p3__10859_SHARP_) {
      return cljs.pprint.format_integer.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(p1__10857_SHARP_), p1__10857_SHARP_, p2__10858_SHARP_, p3__10859_SHARP_);
    };
  } else {
    if (cljs.core.truth_(function() {
      var and__4656__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
      if (cljs.core.truth_(and__4656__auto__)) {
        return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params);
      } else {
        return and__4656__auto__;
      }
    }())) {
      return function(p1__10860_SHARP_, p2__10861_SHARP_, p3__10862_SHARP_) {
        return cljs.pprint.format_old_roman.call(null, p1__10860_SHARP_, p2__10861_SHARP_, p3__10862_SHARP_);
      };
    } else {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
        return function(p1__10863_SHARP_, p2__10864_SHARP_, p3__10865_SHARP_) {
          return cljs.pprint.format_new_roman.call(null, p1__10863_SHARP_, p2__10864_SHARP_, p3__10865_SHARP_);
        };
      } else {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params))) {
          return function(p1__10866_SHARP_, p2__10867_SHARP_, p3__10868_SHARP_) {
            return cljs.pprint.format_ordinal_english.call(null, p1__10866_SHARP_, p2__10867_SHARP_, p3__10868_SHARP_);
          };
        } else {
          return function(p1__10869_SHARP_, p2__10870_SHARP_, p3__10871_SHARP_) {
            return cljs.pprint.format_cardinal_english.call(null, p1__10869_SHARP_, p2__10870_SHARP_, p3__10871_SHARP_);
          };
        }
      }
    }
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "P", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, 
"both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, navigator, offsets) {
    var navigator__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? cljs.pprint.relative_reposition.call(null, navigator, -1) : navigator;
    var strs = cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["y", "ies"], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", "s"], null);
    var vec__10881 = cljs.pprint.next_arg.call(null, navigator__$1);
    var arg = cljs.core.nth.call(null, vec__10881, 0, null);
    var navigator__$2 = cljs.core.nth.call(null, vec__10881, 1, null);
    cljs.pprint.print.call(null, cljs.core._EQ_.call(null, arg, 1) ? cljs.core.first.call(null, strs) : cljs.core.second.call(null, strs));
    return navigator__$2;
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "C", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "char-format", "char-format", -1016499218), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, 
new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params))) {
    return cljs.pprint.pretty_character;
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
      return cljs.pprint.readable_character;
    } else {
      return cljs.pprint.plain_character;
    }
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "F", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "w", "w", 354169001), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "d", "d", 1972142424), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[null, Number], null), new cljs.core.Keyword(null, "k", "k", -2146297393), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, String], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[" ", String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "at", "at", 1476951349), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.fixed_float;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "E", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "w", "w", 354169001), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "d", "d", 1972142424), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[null, Number], null), new cljs.core.Keyword(null, "e", "e", 1381269198), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "k", "k", -2146297393), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null), new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, String], 
null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null), new cljs.core.Keyword(null, "exponentchar", "exponentchar", 1986664222), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
"at", "at", 1476951349), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.exponential_float;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "G", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "w", "w", 354169001), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "d", "d", 1972142424), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[null, Number], null), new cljs.core.Keyword(null, "e", "e", 1381269198), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "k", "k", -2146297393), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null), new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, String], 
null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null), new cljs.core.Keyword(null, "exponentchar", "exponentchar", 1986664222), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
"at", "at", 1476951349), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.general_float;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "$", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "d", "d", 1972142424), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, Number], null), new cljs.core.Keyword(null, "n", "n", 562130025), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[1, Number], null), new cljs.core.Keyword(null, "w", "w", 354169001), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, 
"colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.dollar_float;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "%", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "count", "count", 2139924085), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, 
"bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, arg_navigator, offsets) {
    var n__5571__auto___10887 = (new cljs.core.Keyword(null, "count", "count", 2139924085)).cljs$core$IFn$_invoke$arity$1(params__$1);
    var i_10888 = 0;
    while (true) {
      if (i_10888 < n__5571__auto___10887) {
        cljs.pprint.prn.call(null);
        var G__10889 = i_10888 + 1;
        i_10888 = G__10889;
        continue;
      } else {
      }
      break;
    }
    return arg_navigator;
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "\x26", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "count", "count", 2139924085), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
1, [new cljs.core.Keyword(null, "pretty", "pretty", -1916372486), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, arg_navigator, offsets) {
    var cnt_10890 = (new cljs.core.Keyword(null, "count", "count", 2139924085)).cljs$core$IFn$_invoke$arity$1(params__$1);
    if (cnt_10890 > 0) {
      cljs.pprint.fresh_line.call(null);
    } else {
    }
    var n__5571__auto___10891 = cnt_10890 - 1;
    var i_10892 = 0;
    while (true) {
      if (i_10892 < n__5571__auto___10891) {
        cljs.pprint.prn.call(null);
        var G__10893 = i_10892 + 1;
        i_10892 = G__10893;
        continue;
      } else {
      }
      break;
    }
    return arg_navigator;
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "|", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "count", "count", 2139924085), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, 
"bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, arg_navigator, offsets) {
    var n__5571__auto___10894 = (new cljs.core.Keyword(null, "count", "count", 2139924085)).cljs$core$IFn$_invoke$arity$1(params__$1);
    var i_10895 = 0;
    while (true) {
      if (i_10895 < n__5571__auto___10894) {
        cljs.pprint.print.call(null, "\f");
        var G__10896 = i_10895 + 1;
        i_10895 = G__10896;
        continue;
      } else {
      }
      break;
    }
    return arg_navigator;
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "~", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "n", "n", 562130025), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, 
"bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, arg_navigator, offsets) {
    var n = (new cljs.core.Keyword(null, "n", "n", 562130025)).cljs$core$IFn$_invoke$arity$1(params__$1);
    cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, n, "~")));
    return arg_navigator;
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "\n", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null], null), null), 
new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, arg_navigator, offsets) {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params__$1))) {
      cljs.pprint.prn.call(null);
    } else {
    }
    return arg_navigator;
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "T", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "colnum", "colnum", 2023796854), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null), new cljs.core.Keyword(null, "colinc", "colinc", -584873385), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[1, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "pretty", "pretty", -1916372486), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, 
offset) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
    return function(p1__10872_SHARP_, p2__10873_SHARP_, p3__10874_SHARP_) {
      return cljs.pprint.relative_tabulation.call(null, p1__10872_SHARP_, p2__10873_SHARP_, p3__10874_SHARP_);
    };
  } else {
    return function(p1__10875_SHARP_, p2__10876_SHARP_, p3__10877_SHARP_) {
      return cljs.pprint.absolute_tabulation.call(null, p1__10875_SHARP_, p2__10876_SHARP_, p3__10877_SHARP_);
    };
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "*", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "n", "n", 562130025), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, navigator, offsets) {
    var n = (new cljs.core.Keyword(null, "n", "n", 562130025)).cljs$core$IFn$_invoke$arity$1(params__$1);
    if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params__$1))) {
      return cljs.pprint.absolute_reposition.call(null, navigator, n);
    } else {
      return cljs.pprint.relative_reposition.call(null, navigator, cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? -n : n);
    }
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "?", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "at", "at", 1476951349), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), 
cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
    return function(params__$1, navigator, offsets) {
      var vec__10882 = cljs.pprint.get_format_arg.call(null, navigator);
      var subformat = cljs.core.nth.call(null, vec__10882, 0, null);
      var navigator__$1 = cljs.core.nth.call(null, vec__10882, 1, null);
      return cljs.pprint.execute_sub_format.call(null, subformat, navigator__$1, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params__$1));
    };
  } else {
    return function(params__$1, navigator, offsets) {
      var vec__10883 = cljs.pprint.get_format_arg.call(null, navigator);
      var subformat = cljs.core.nth.call(null, vec__10883, 0, null);
      var navigator__$1 = cljs.core.nth.call(null, vec__10883, 1, null);
      var vec__10884 = cljs.pprint.next_arg.call(null, navigator__$1);
      var subargs = cljs.core.nth.call(null, vec__10884, 0, null);
      var navigator__$2 = cljs.core.nth.call(null, vec__10884, 1, null);
      var sub_navigator = cljs.pprint.init_navigator.call(null, subargs);
      cljs.pprint.execute_sub_format.call(null, subformat, sub_navigator, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params__$1));
      return navigator__$2;
    };
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "(", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, 
"both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "right", "right", -452581833), ")", new cljs.core.Keyword(null, "allows-separator", "allows-separator", -818967742), null, new cljs.core.Keyword(null, "else", "else", -1508377146), null], null), new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  var mod_case_writer = cljs.core.truth_(function() {
    var and__4656__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(and__4656__auto__)) {
      return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params);
    } else {
      return and__4656__auto__;
    }
  }()) ? cljs.pprint.upcase_writer : cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? cljs.pprint.capitalize_word_writer : cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)) ? cljs.pprint.init_cap_writer : cljs.pprint.downcase_writer;
  return function(mod_case_writer) {
    return function(p1__10878_SHARP_, p2__10879_SHARP_, p3__10880_SHARP_) {
      return cljs.pprint.modify_case.call(null, mod_case_writer, p1__10878_SHARP_, p2__10879_SHARP_, p3__10880_SHARP_);
    };
  }(mod_case_writer);
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), ")", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, 
offset) {
  return null;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "[", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "selector", "selector", 762528866), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "right", "right", -452581833), "]", new cljs.core.Keyword(null, "allows-separator", "allows-separator", -818967742), true, new cljs.core.Keyword(null, "else", "else", -1508377146), 
new cljs.core.Keyword(null, "last", "last", 1105735132)], null), new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params))) {
    return cljs.pprint.boolean_conditional;
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
      return cljs.pprint.check_arg_conditional;
    } else {
      return cljs.pprint.choice_conditional;
    }
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), ";", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "min-remaining", "min-remaining", 962687677), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "max-columns", "max-columns", 1742323262), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "separator", "separator", -1628749125), true], null), new cljs.core.Keyword(null, 
"generator-fn", "generator-fn", 811851656), function(params, offset) {
  return null;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "]", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, 
offset) {
  return null;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "{", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "max-iterations", "max-iterations", 2021275563), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, 
new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "right", "right", -452581833), "}", new cljs.core.Keyword(null, "allows-separator", "allows-separator", -818967742), 
false], null), new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(and__4656__auto__)) {
      return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params);
    } else {
      return and__4656__auto__;
    }
  }())) {
    return cljs.pprint.iterate_main_sublists;
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params))) {
      return cljs.pprint.iterate_list_of_sublists;
    } else {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
        return cljs.pprint.iterate_main_list;
      } else {
        return cljs.pprint.iterate_sublist;
      }
    }
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "}", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", 
-1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return null;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "\x3c", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "colinc", "colinc", -584873385), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[1, Number], null), new cljs.core.Keyword(null, "minpad", "minpad", 323570901), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, 
"colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null, new cljs.core.Keyword(null, "pretty", "pretty", -1916372486), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "right", "right", -452581833), "\x3e", new cljs.core.Keyword(null, "allows-separator", "allows-separator", -818967742), 
true, new cljs.core.Keyword(null, "else", "else", -1508377146), new cljs.core.Keyword(null, "first", "first", -644103046)], null), new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.logical_block_or_justify;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "\x3e", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", 
-1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return null;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "^", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "arg1", "arg1", 951899358), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "arg2", "arg2", 1729550917), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[null, Number], null), new cljs.core.Keyword(null, "arg3", "arg3", -1486822496), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, 
new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, navigator, offsets) {
    var arg1 = (new cljs.core.Keyword(null, "arg1", "arg1", 951899358)).cljs$core$IFn$_invoke$arity$1(params__$1);
    var arg2 = (new cljs.core.Keyword(null, "arg2", "arg2", 1729550917)).cljs$core$IFn$_invoke$arity$1(params__$1);
    var arg3 = (new cljs.core.Keyword(null, "arg3", "arg3", -1486822496)).cljs$core$IFn$_invoke$arity$1(params__$1);
    var exit = cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? new cljs.core.Keyword(null, "colon-up-arrow", "colon-up-arrow", 244853007) : new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333);
    if (cljs.core.truth_(function() {
      var and__4656__auto__ = arg1;
      if (cljs.core.truth_(and__4656__auto__)) {
        var and__4656__auto____$1 = arg2;
        if (cljs.core.truth_(and__4656__auto____$1)) {
          return arg3;
        } else {
          return and__4656__auto____$1;
        }
      } else {
        return and__4656__auto__;
      }
    }())) {
      if (arg1 <= arg2 && arg2 <= arg3) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [exit, navigator], null);
      } else {
        return navigator;
      }
    } else {
      if (cljs.core.truth_(function() {
        var and__4656__auto__ = arg1;
        if (cljs.core.truth_(and__4656__auto__)) {
          return arg2;
        } else {
          return and__4656__auto__;
        }
      }())) {
        if (cljs.core._EQ_.call(null, arg1, arg2)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [exit, navigator], null);
        } else {
          return navigator;
        }
      } else {
        if (cljs.core.truth_(arg1)) {
          if (cljs.core._EQ_.call(null, arg1, 0)) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [exit, navigator], null);
          } else {
            return navigator;
          }
        } else {
          if (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params__$1))) : cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator))) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [exit, navigator], null);
          } else {
            return navigator;
          }
        }
      }
    }
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "W", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, 
"both", "both", -393648840), null, new cljs.core.Keyword(null, "pretty", "pretty", -1916372486), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  if (cljs.core.truth_(function() {
    var or__4668__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params);
    }
  }())) {
    var bindings = cljs.core.concat.call(null, cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)) ? new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "level", "level", 1290497552), null, new cljs.core.Keyword(null, "length", "length", 588987862), null], null) : cljs.core.PersistentVector.EMPTY, cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? 
    new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pretty", "pretty", -1916372486), true], null) : cljs.core.PersistentVector.EMPTY);
    return function(bindings) {
      return function(params__$1, navigator, offsets) {
        var vec__10885 = cljs.pprint.next_arg.call(null, navigator);
        var arg = cljs.core.nth.call(null, vec__10885, 0, null);
        var navigator__$1 = cljs.core.nth.call(null, vec__10885, 1, null);
        if (cljs.core.truth_(cljs.core.apply.call(null, cljs.pprint.write, arg, bindings))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333), navigator__$1], null);
        } else {
          return navigator__$1;
        }
      };
    }(bindings);
  } else {
    return function(params__$1, navigator, offsets) {
      var vec__10886 = cljs.pprint.next_arg.call(null, navigator);
      var arg = cljs.core.nth.call(null, vec__10886, 0, null);
      var navigator__$1 = cljs.core.nth.call(null, vec__10886, 1, null);
      if (cljs.core.truth_(cljs.pprint.write_out.call(null, arg))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333), navigator__$1], null);
      } else {
        return navigator__$1;
      }
    };
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "_", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, 
"both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.conditional_newline;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "I", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "n", "n", 562130025), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
1, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.set_indent;
}], null)]);
cljs.pprint.param_pattern = /^([vV]|#|('.)|([+-]?\d+)|(?=,))/;
cljs.pprint.special_params = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "remaining-arg-count", "remaining-arg-count", -1216589335), null, new cljs.core.Keyword(null, "parameter-from-args", "parameter-from-args", -758446196), null], null), null);
cljs.pprint.extract_param = function cljs$pprint$extract_param(p__10897) {
  var vec__10899 = p__10897;
  var s = cljs.core.nth.call(null, vec__10899, 0, null);
  var offset = cljs.core.nth.call(null, vec__10899, 1, null);
  var saw_comma = cljs.core.nth.call(null, vec__10899, 2, null);
  var m = new RegExp(cljs.pprint.param_pattern.source, "g");
  var param = m.exec(s);
  if (cljs.core.truth_(param)) {
    var token_str = cljs.core.first.call(null, param);
    var remainder = cljs.core.subs.call(null, s, m.lastIndex);
    var new_offset = offset + m.lastIndex;
    if (!cljs.core._EQ_.call(null, ",", cljs.core.nth.call(null, remainder, 0))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [token_str, offset], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [remainder, new_offset, false], null)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [token_str, offset], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.call(null, remainder, 1), new_offset + 1, true], null)], null);
    }
  } else {
    if (cljs.core.truth_(saw_comma)) {
      return cljs.pprint.format_error.call(null, "Badly formed parameters in format directive", offset);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, offset], null)], null);
    }
  }
};
cljs.pprint.extract_params = function cljs$pprint$extract_params(s, offset) {
  return cljs.pprint.consume.call(null, cljs.pprint.extract_param, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, offset, false], null));
};
cljs.pprint.translate_param = function cljs$pprint$translate_param(p__10900) {
  var vec__10902 = p__10900;
  var p = cljs.core.nth.call(null, vec__10902, 0, null);
  var offset = cljs.core.nth.call(null, vec__10902, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._EQ_.call(null, p.length, 0) ? null : cljs.core._EQ_.call(null, p.length, 1) && cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["V", null, "v", null], null), null), cljs.core.nth.call(null, p, 0)) ? new cljs.core.Keyword(null, "parameter-from-args", "parameter-from-args", -758446196) : cljs.core._EQ_.call(null, p.length, 1) && 
  cljs.core._EQ_.call(null, "#", cljs.core.nth.call(null, p, 0)) ? new cljs.core.Keyword(null, "remaining-arg-count", "remaining-arg-count", -1216589335) : cljs.core._EQ_.call(null, p.length, 2) && cljs.core._EQ_.call(null, "'", cljs.core.nth.call(null, p, 0)) ? cljs.core.nth.call(null, p, 1) : parseInt(p, 10), offset], null);
};
cljs.pprint.flag_defs = new cljs.core.PersistentArrayMap(null, 2, [":", new cljs.core.Keyword(null, "colon", "colon", -965200945), "@", new cljs.core.Keyword(null, "at", "at", 1476951349)], null);
cljs.pprint.extract_flags = function cljs$pprint$extract_flags(s, offset) {
  return cljs.pprint.consume.call(null, function(p__10905) {
    var vec__10906 = p__10905;
    var s__$1 = cljs.core.nth.call(null, vec__10906, 0, null);
    var offset__$1 = cljs.core.nth.call(null, vec__10906, 1, null);
    var flags = cljs.core.nth.call(null, vec__10906, 2, null);
    if (cljs.core.empty_QMARK_.call(null, s__$1)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [s__$1, offset__$1, flags], null)], null);
    } else {
      var flag = cljs.core.get.call(null, cljs.pprint.flag_defs, cljs.core.first.call(null, s__$1));
      if (cljs.core.truth_(flag)) {
        if (cljs.core.contains_QMARK_.call(null, flags, flag)) {
          return cljs.pprint.format_error.call(null, [cljs.core.str('Flag "'), cljs.core.str(cljs.core.first.call(null, s__$1)), cljs.core.str('" appears more than once in a directive')].join(""), offset__$1);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.call(null, s__$1, 1), offset__$1 + 1, cljs.core.assoc.call(null, flags, flag, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, offset__$1], null))], null)], null);
        }
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [s__$1, offset__$1, flags], null)], null);
      }
    }
  }, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, offset, cljs.core.PersistentArrayMap.EMPTY], null));
};
cljs.pprint.check_flags = function cljs$pprint$check_flags(def, flags) {
  var allowed = (new cljs.core.Keyword(null, "flags", "flags", 1775418075)).cljs$core$IFn$_invoke$arity$1(def);
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(allowed));
    if (and__4656__auto__) {
      return (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(flags);
    } else {
      return and__4656__auto__;
    }
  }())) {
    cljs.pprint.format_error.call(null, [cljs.core.str('"@" is an illegal flag for format directive "'), cljs.core.str((new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1(def)), cljs.core.str('"')].join(""), cljs.core.nth.call(null, (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(flags), 1));
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(allowed));
    if (and__4656__auto__) {
      return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(flags);
    } else {
      return and__4656__auto__;
    }
  }())) {
    cljs.pprint.format_error.call(null, [cljs.core.str('":" is an illegal flag for format directive "'), cljs.core.str((new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1(def)), cljs.core.str('"')].join(""), cljs.core.nth.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(flags), 1));
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "both", "both", -393648840)).cljs$core$IFn$_invoke$arity$1(allowed));
    if (and__4656__auto__) {
      var and__4656__auto____$1 = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(flags);
      if (cljs.core.truth_(and__4656__auto____$1)) {
        return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(flags);
      } else {
        return and__4656__auto____$1;
      }
    } else {
      return and__4656__auto__;
    }
  }())) {
    return cljs.pprint.format_error.call(null, [cljs.core.str('Cannot combine "@" and ":" flags for format directive "'), cljs.core.str((new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1(def)), cljs.core.str('"')].join(""), function() {
      var x__5006__auto__ = cljs.core.nth.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(flags), 1);
      var y__5007__auto__ = cljs.core.nth.call(null, (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(flags), 1);
      return x__5006__auto__ < y__5007__auto__ ? x__5006__auto__ : y__5007__auto__;
    }());
  } else {
    return null;
  }
};
cljs.pprint.map_params = function cljs$pprint$map_params(def, params, flags, offset) {
  cljs.pprint.check_flags.call(null, def, flags);
  if (cljs.core.count.call(null, params) > cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(def))) {
    cljs.pprint.format_error.call(null, cljs.pprint.cl_format.call(null, null, 'Too many parameters for directive "~C": ~D~:* ~[were~;was~:;were~] specified but only ~D~:* ~[are~;is~:;are~] allowed', (new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1(def), cljs.core.count.call(null, params), cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(def))), cljs.core.second.call(null, cljs.core.first.call(null, 
    params)));
  } else {
  }
  cljs.core.doall.call(null, cljs.core.map.call(null, function(p1__10907_SHARP_, p2__10908_SHARP_) {
    var val = cljs.core.first.call(null, p1__10907_SHARP_);
    if (!(val == null || cljs.core.contains_QMARK_.call(null, cljs.pprint.special_params, val) || cljs.core._EQ_.call(null, cljs.core.second.call(null, cljs.core.second.call(null, p2__10908_SHARP_)), cljs.core.type.call(null, val)))) {
      return cljs.pprint.format_error.call(null, [cljs.core.str("Parameter "), cljs.core.str(cljs.core.name.call(null, cljs.core.first.call(null, p2__10908_SHARP_))), cljs.core.str(' has bad type in directive "'), cljs.core.str((new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1(def)), cljs.core.str('": '), cljs.core.str(cljs.core.type.call(null, val))].join(""), cljs.core.second.call(null, p1__10907_SHARP_));
    } else {
      return null;
    }
  }, params, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(def)));
  return cljs.core.merge.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.reverse.call(null, function() {
    var iter__5440__auto__ = function cljs$pprint$map_params_$_iter__10924(s__10925) {
      return new cljs.core.LazySeq(null, function() {
        var s__10925__$1 = s__10925;
        while (true) {
          var temp__4425__auto__ = cljs.core.seq.call(null, s__10925__$1);
          if (temp__4425__auto__) {
            var s__10925__$2 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__10925__$2)) {
              var c__5438__auto__ = cljs.core.chunk_first.call(null, s__10925__$2);
              var size__5439__auto__ = cljs.core.count.call(null, c__5438__auto__);
              var b__10927 = cljs.core.chunk_buffer.call(null, size__5439__auto__);
              if (function() {
                var i__10926 = 0;
                while (true) {
                  if (i__10926 < size__5439__auto__) {
                    var vec__10932 = cljs.core._nth.call(null, c__5438__auto__, i__10926);
                    var name = cljs.core.nth.call(null, vec__10932, 0, null);
                    var vec__10933 = cljs.core.nth.call(null, vec__10932, 1, null);
                    var default$ = cljs.core.nth.call(null, vec__10933, 0, null);
                    cljs.core.chunk_append.call(null, b__10927, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [name, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [default$, offset], null)], null));
                    var G__10936 = i__10926 + 1;
                    i__10926 = G__10936;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10927), cljs$pprint$map_params_$_iter__10924.call(null, cljs.core.chunk_rest.call(null, s__10925__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10927), null);
              }
            } else {
              var vec__10934 = cljs.core.first.call(null, s__10925__$2);
              var name = cljs.core.nth.call(null, vec__10934, 0, null);
              var vec__10935 = cljs.core.nth.call(null, vec__10934, 1, null);
              var default$ = cljs.core.nth.call(null, vec__10935, 0, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [name, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [default$, offset], null)], null), cljs$pprint$map_params_$_iter__10924.call(null, cljs.core.rest.call(null, s__10925__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5440__auto__.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(def));
  }())), cljs.core.reduce.call(null, function(p1__10909_SHARP_, p2__10910_SHARP_) {
    return cljs.core.apply.call(null, cljs.core.assoc, p1__10909_SHARP_, p2__10910_SHARP_);
  }, cljs.core.PersistentArrayMap.EMPTY, cljs.core.filter.call(null, function(p1__10911_SHARP_) {
    return cljs.core.first.call(null, cljs.core.nth.call(null, p1__10911_SHARP_, 1));
  }, cljs.core.zipmap.call(null, cljs.core.keys.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(def)), params))), flags);
};
cljs.pprint.compile_directive = function cljs$pprint$compile_directive(s, offset) {
  var vec__10941 = cljs.pprint.extract_params.call(null, s, offset);
  var raw_params = cljs.core.nth.call(null, vec__10941, 0, null);
  var vec__10942 = cljs.core.nth.call(null, vec__10941, 1, null);
  var rest = cljs.core.nth.call(null, vec__10942, 0, null);
  var offset__$1 = cljs.core.nth.call(null, vec__10942, 1, null);
  var vec__10943 = cljs.pprint.extract_flags.call(null, rest, offset__$1);
  var _ = cljs.core.nth.call(null, vec__10943, 0, null);
  var vec__10944 = cljs.core.nth.call(null, vec__10943, 1, null);
  var rest__$1 = cljs.core.nth.call(null, vec__10944, 0, null);
  var offset__$2 = cljs.core.nth.call(null, vec__10944, 1, null);
  var flags = cljs.core.nth.call(null, vec__10944, 2, null);
  var directive = cljs.core.first.call(null, rest__$1);
  var def = cljs.core.get.call(null, cljs.pprint.directive_table, clojure.string.upper_case.call(null, directive));
  var params = cljs.core.truth_(def) ? cljs.pprint.map_params.call(null, def, cljs.core.map.call(null, cljs.pprint.translate_param, raw_params), flags, offset__$2) : null;
  if (cljs.core.not.call(null, directive)) {
    cljs.pprint.format_error.call(null, "Format string ended in the middle of a directive", offset__$2);
  } else {
  }
  if (cljs.core.not.call(null, def)) {
    cljs.pprint.format_error.call(null, [cljs.core.str('Directive "'), cljs.core.str(directive), cljs.core.str('" is undefined')].join(""), offset__$2);
  } else {
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.pprint.compiled_directive((new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656)).cljs$core$IFn$_invoke$arity$1(def).call(null, params, offset__$2), def, params, offset__$2, null, null, null), function() {
    var remainder = cljs.core.subs.call(null, rest__$1, 1);
    var offset__$3 = offset__$2 + 1;
    var trim_QMARK_ = cljs.core._EQ_.call(null, "\n", (new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1(def)) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params));
    var trim_count = trim_QMARK_ ? cljs.pprint.prefix_count.call(null, remainder, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", "\t"], null)) : 0;
    var remainder__$1 = cljs.core.subs.call(null, remainder, trim_count);
    var offset__$4 = offset__$3 + trim_count;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [remainder__$1, offset__$4], null);
  }()], null);
};
cljs.pprint.compile_raw_string = function cljs$pprint$compile_raw_string(s, offset) {
  return new cljs.pprint.compiled_directive(function(_, a, ___$1) {
    cljs.pprint.print.call(null, s);
    return a;
  }, null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "string", "string", -1989541586), s], null), offset, null, null, null);
};
cljs.pprint.right_bracket = function cljs$pprint$right_bracket(this$) {
  return (new cljs.core.Keyword(null, "right", "right", -452581833)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$)));
};
cljs.pprint.separator_QMARK_ = function cljs$pprint$separator_QMARK_(this$) {
  return (new cljs.core.Keyword(null, "separator", "separator", -1628749125)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$)));
};
cljs.pprint.else_separator_QMARK_ = function cljs$pprint$else_separator_QMARK_(this$) {
  var and__4656__auto__ = (new cljs.core.Keyword(null, "separator", "separator", -1628749125)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$)));
  if (cljs.core.truth_(and__4656__auto__)) {
    return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(this$));
  } else {
    return and__4656__auto__;
  }
};
cljs.pprint.collect_clauses;
cljs.pprint.process_bracket = function cljs$pprint$process_bracket(this$, remainder) {
  var vec__10946 = cljs.pprint.collect_clauses.call(null, (new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$)), (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(this$), remainder);
  var subex = cljs.core.nth.call(null, vec__10946, 0, null);
  var remainder__$1 = cljs.core.nth.call(null, vec__10946, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.pprint.compiled_directive((new cljs.core.Keyword(null, "func", "func", -238706040)).cljs$core$IFn$_invoke$arity$1(this$), (new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$), cljs.core.merge.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(this$), cljs.pprint.tuple_map.call(null, subex, (new cljs.core.Keyword(null, 
  "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(this$))), (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(this$), null, null, null), remainder__$1], null);
};
cljs.pprint.process_clause = function cljs$pprint$process_clause(bracket_info, offset, remainder) {
  return cljs.pprint.consume.call(null, function(remainder__$1) {
    if (cljs.core.empty_QMARK_.call(null, remainder__$1)) {
      return cljs.pprint.format_error.call(null, "No closing bracket found.", offset);
    } else {
      var this$ = cljs.core.first.call(null, remainder__$1);
      var remainder__$2 = cljs.core.next.call(null, remainder__$1);
      if (cljs.core.truth_(cljs.pprint.right_bracket.call(null, this$))) {
        return cljs.pprint.process_bracket.call(null, this$, remainder__$2);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "right", "right", -452581833)).cljs$core$IFn$_invoke$arity$1(bracket_info), (new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$)))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "right-bracket", "right-bracket", 951856080), (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(this$), null, remainder__$2], null)], null);
        } else {
          if (cljs.core.truth_(cljs.pprint.else_separator_QMARK_.call(null, this$))) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "else", "else", -1508377146), null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(this$), remainder__$2], null)], null);
          } else {
            if (cljs.core.truth_(cljs.pprint.separator_QMARK_.call(null, this$))) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "separator", "separator", -1628749125), null, null, remainder__$2], null)], null);
            } else {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$, remainder__$2], null);
            }
          }
        }
      }
    }
  }, remainder);
};
cljs.pprint.collect_clauses = function cljs$pprint$collect_clauses(bracket_info, offset, remainder) {
  return cljs.core.second.call(null, cljs.pprint.consume.call(null, function(p__10951) {
    var vec__10952 = p__10951;
    var clause_map = cljs.core.nth.call(null, vec__10952, 0, null);
    var saw_else = cljs.core.nth.call(null, vec__10952, 1, null);
    var remainder__$1 = cljs.core.nth.call(null, vec__10952, 2, null);
    var vec__10953 = cljs.pprint.process_clause.call(null, bracket_info, offset, remainder__$1);
    var clause = cljs.core.nth.call(null, vec__10953, 0, null);
    var vec__10954 = cljs.core.nth.call(null, vec__10953, 1, null);
    var type = cljs.core.nth.call(null, vec__10954, 0, null);
    var right_params = cljs.core.nth.call(null, vec__10954, 1, null);
    var else_params = cljs.core.nth.call(null, vec__10954, 2, null);
    var remainder__$2 = cljs.core.nth.call(null, vec__10954, 3, null);
    if (cljs.core._EQ_.call(null, type, new cljs.core.Keyword(null, "right-bracket", "right-bracket", 951856080))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge_with.call(null, cljs.core.concat, clause_map, cljs.core.PersistentArrayMap.fromArray([cljs.core.truth_(saw_else) ? new cljs.core.Keyword(null, "else", "else", -1508377146) : new cljs.core.Keyword(null, "clauses", "clauses", 1454841241), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
      [clause], null), new cljs.core.Keyword(null, "right-params", "right-params", -1790676237), right_params], true, false)), remainder__$2], null)], null);
    } else {
      if (cljs.core._EQ_.call(null, type, new cljs.core.Keyword(null, "else", "else", -1508377146))) {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(clause_map))) {
          return cljs.pprint.format_error.call(null, 'Two else clauses ("~:;") inside bracket construction.', offset);
        } else {
          if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(bracket_info))) {
            return cljs.pprint.format_error.call(null, 'An else clause ("~:;") is in a bracket type that doesn\'t support it.', offset);
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "first", "first", -644103046), (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(bracket_info)) && cljs.core.seq.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(clause_map))) {
              return cljs.pprint.format_error.call(null, 'The else clause ("~:;") is only allowed in the first position for this directive.', offset);
            } else {
              if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "first", "first", -644103046), (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(bracket_info))) {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge_with.call(null, cljs.core.concat, clause_map, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "else", "else", -1508377146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause], null), new cljs.core.Keyword(null, "else-params", "else-params", 
                -832171646), else_params], null)), false, remainder__$2], null)], null);
              } else {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge_with.call(null, cljs.core.concat, clause_map, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "clauses", "clauses", 1454841241), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause], null)], null)), true, remainder__$2], null)], 
                null);
              }
            }
          }
        }
      } else {
        if (cljs.core._EQ_.call(null, type, new cljs.core.Keyword(null, "separator", "separator", -1628749125))) {
          if (cljs.core.truth_(saw_else)) {
            return cljs.pprint.format_error.call(null, 'A plain clause (with "~;") follows an else clause ("~:;") inside bracket construction.', offset);
          } else {
            if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "allows-separator", "allows-separator", -818967742)).cljs$core$IFn$_invoke$arity$1(bracket_info))) {
              return cljs.pprint.format_error.call(null, 'A separator ("~;") is in a bracket type that doesn\'t support it.', offset);
            } else {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge_with.call(null, cljs.core.concat, clause_map, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "clauses", "clauses", 1454841241), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause], null)], null)), false, remainder__$2], null)], null)
              ;
            }
          }
        } else {
          return null;
        }
      }
    }
  }, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "clauses", "clauses", 1454841241), cljs.core.PersistentVector.EMPTY], null), false, remainder], null)));
};
cljs.pprint.process_nesting = function cljs$pprint$process_nesting(format) {
  return cljs.core.first.call(null, cljs.pprint.consume.call(null, function(remainder) {
    var this$ = cljs.core.first.call(null, remainder);
    var remainder__$1 = cljs.core.next.call(null, remainder);
    var bracket = (new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$));
    if (cljs.core.truth_((new cljs.core.Keyword(null, "right", "right", -452581833)).cljs$core$IFn$_invoke$arity$1(bracket))) {
      return cljs.pprint.process_bracket.call(null, this$, remainder__$1);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$, remainder__$1], null);
    }
  }, format));
};
cljs.pprint.compile_format = function cljs$pprint$compile_format(format_str) {
  var _STAR_format_str_STAR_10958 = cljs.pprint._STAR_format_str_STAR_;
  cljs.pprint._STAR_format_str_STAR_ = format_str;
  try {
    return cljs.pprint.process_nesting.call(null, cljs.core.first.call(null, cljs.pprint.consume.call(null, function(_STAR_format_str_STAR_10958) {
      return function(p__10959) {
        var vec__10960 = p__10959;
        var s = cljs.core.nth.call(null, vec__10960, 0, null);
        var offset = cljs.core.nth.call(null, vec__10960, 1, null);
        if (cljs.core.empty_QMARK_.call(null, s)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, s], null);
        } else {
          var tilde = s.indexOf("~");
          if (tilde < 0) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.pprint.compile_raw_string.call(null, s, offset), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", offset + s.length], null)], null);
          } else {
            if (tilde === 0) {
              return cljs.pprint.compile_directive.call(null, cljs.core.subs.call(null, s, 1), offset + 1);
            } else {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.pprint.compile_raw_string.call(null, cljs.core.subs.call(null, s, 0, tilde), offset), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.call(null, s, tilde), tilde + offset], null)], null);
            }
          }
        }
      };
    }(_STAR_format_str_STAR_10958), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [format_str, 0], null))));
  } finally {
    cljs.pprint._STAR_format_str_STAR_ = _STAR_format_str_STAR_10958;
  }
};
cljs.pprint.needs_pretty = function cljs$pprint$needs_pretty(format) {
  var format__$1 = format;
  while (true) {
    if (cljs.core.empty_QMARK_.call(null, format__$1)) {
      return false;
    } else {
      if (cljs.core.truth_(function() {
        var or__4668__auto__ = (new cljs.core.Keyword(null, "pretty", "pretty", -1916372486)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "flags", "flags", 1775418075)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, format__$1))));
        if (cljs.core.truth_(or__4668__auto__)) {
          return or__4668__auto__;
        } else {
          var or__4668__auto____$1 = cljs.core.some.call(null, cljs$pprint$needs_pretty, cljs.core.first.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, format__$1)))));
          if (cljs.core.truth_(or__4668__auto____$1)) {
            return or__4668__auto____$1;
          } else {
            return cljs.core.some.call(null, cljs$pprint$needs_pretty, cljs.core.first.call(null, (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, format__$1)))));
          }
        }
      }())) {
        return true;
      } else {
        var G__10961 = cljs.core.next.call(null, format__$1);
        format__$1 = G__10961;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.execute_format = function cljs$pprint$execute_format(var_args) {
  var args10962 = [];
  var len__5726__auto___10968 = arguments.length;
  var i__5727__auto___10969 = 0;
  while (true) {
    if (i__5727__auto___10969 < len__5726__auto___10968) {
      args10962.push(arguments[i__5727__auto___10969]);
      var G__10970 = i__5727__auto___10969 + 1;
      i__5727__auto___10969 = G__10970;
      continue;
    } else {
    }
    break;
  }
  var G__10964 = args10962.length;
  switch(G__10964) {
    case 3:
      return cljs.pprint.execute_format.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return cljs.pprint.execute_format.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10962.length)].join(""));;
  }
};
cljs.pprint.execute_format.cljs$core$IFn$_invoke$arity$3 = function(stream, format, args) {
  var sb = new goog.string.StringBuffer;
  var real_stream = cljs.core.not.call(null, stream) || stream === true ? new cljs.core.StringBufferWriter(sb) : stream;
  var wrapped_stream = cljs.core.truth_(function() {
    var and__4656__auto__ = cljs.pprint.needs_pretty.call(null, format);
    if (cljs.core.truth_(and__4656__auto__)) {
      return cljs.core.not.call(null, cljs.pprint.pretty_writer_QMARK_.call(null, real_stream));
    } else {
      return and__4656__auto__;
    }
  }()) ? cljs.pprint.get_pretty_writer.call(null, real_stream) : real_stream;
  var _STAR_out_STAR_10965 = cljs.core._STAR_out_STAR_;
  cljs.core._STAR_out_STAR_ = wrapped_stream;
  try {
    try {
      cljs.pprint.execute_format.call(null, format, args);
    } finally {
      if (!(real_stream === wrapped_stream)) {
        cljs.core._flush.call(null, wrapped_stream);
      } else {
      }
    }
    if (cljs.core.not.call(null, stream)) {
      return [cljs.core.str(sb)].join("");
    } else {
      if (stream === true) {
        return cljs.core._STAR_print_fn_STAR_.call(null, [cljs.core.str(sb)].join(""));
      } else {
        return null;
      }
    }
  } finally {
    cljs.core._STAR_out_STAR_ = _STAR_out_STAR_10965;
  }
};
cljs.pprint.execute_format.cljs$core$IFn$_invoke$arity$2 = function(format, args) {
  cljs.pprint.map_passing_context.call(null, function(element, context) {
    if (cljs.core.truth_(cljs.pprint.abort_QMARK_.call(null, context))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, context], null);
    } else {
      var vec__10966 = cljs.pprint.realize_parameter_list.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(element), context);
      var params = cljs.core.nth.call(null, vec__10966, 0, null);
      var args__$1 = cljs.core.nth.call(null, vec__10966, 1, null);
      var vec__10967 = cljs.pprint.unzip_map.call(null, params);
      var params__$1 = cljs.core.nth.call(null, vec__10967, 0, null);
      var offsets = cljs.core.nth.call(null, vec__10967, 1, null);
      var params__$2 = cljs.core.assoc.call(null, params__$1, new cljs.core.Keyword(null, "base-args", "base-args", -1268706822), args__$1);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.apply.call(null, (new cljs.core.Keyword(null, "func", "func", -238706040)).cljs$core$IFn$_invoke$arity$1(element), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [params__$2, args__$1, offsets], null))], null);
    }
  }, args, format);
  return null;
};
cljs.pprint.execute_format.cljs$lang$maxFixedArity = 3;
cljs.pprint.cached_compile = cljs.core.memoize.call(null, cljs.pprint.compile_format);
cljs.pprint.use_method = function cljs$pprint$use_method(multifn, dispatch_val, func) {
  return cljs.core._add_method.call(null, multifn, dispatch_val, func);
};
cljs.pprint.reader_macros = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), "'", new cljs.core.Symbol(null, "var", "var", 870848730, null), "#'", new cljs.core.Symbol("clojure.core", "deref", "clojure.core/deref", 188719157, null), "@", new cljs.core.Symbol("clojure.core", "unquote", "clojure.core/unquote", 843087510, null), "~", new cljs.core.Symbol("cljs.core", "deref", "cljs.core/deref", 1901963335, null), "@", new cljs.core.Symbol("cljs.core", 
"unquote", "cljs.core/unquote", 1013085760, null), "~"], null);
cljs.pprint.pprint_reader_macro = function cljs$pprint$pprint_reader_macro(alis) {
  var macro_char = cljs.pprint.reader_macros.call(null, cljs.core.first.call(null, alis));
  if (cljs.core.truth_(function() {
    var and__4656__auto__ = macro_char;
    if (cljs.core.truth_(and__4656__auto__)) {
      return cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, alis));
    } else {
      return and__4656__auto__;
    }
  }())) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, macro_char);
    cljs.pprint.write_out.call(null, cljs.core.second.call(null, alis));
    return true;
  } else {
    return null;
  }
};
cljs.pprint.pprint_simple_list = function cljs$pprint$pprint_simple_list(alis) {
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_10975_10978 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_10976_10979 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
      var length_count10977_10980 = 0;
      var alis_10981__$1 = cljs.core.seq.call(null, alis);
      while (true) {
        if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count10977_10980 < cljs.core._STAR_print_length_STAR_) {
          if (alis_10981__$1) {
            cljs.pprint.write_out.call(null, cljs.core.first.call(null, alis_10981__$1));
            if (cljs.core.next.call(null, alis_10981__$1)) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
              cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
              var G__10982 = length_count10977_10980 + 1;
              var G__10983 = cljs.core.next.call(null, alis_10981__$1);
              length_count10977_10980 = G__10982;
              alis_10981__$1 = G__10983;
              continue;
            } else {
            }
          } else {
          }
        } else {
          cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
        }
        break;
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_10976_10979;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_10975_10978;
    }
  }
  return null;
};
cljs.pprint.pprint_list = function cljs$pprint$pprint_list(alis) {
  if (cljs.core.not.call(null, cljs.pprint.pprint_reader_macro.call(null, alis))) {
    return cljs.pprint.pprint_simple_list.call(null, alis);
  } else {
    return null;
  }
};
cljs.pprint.pprint_vector = function cljs$pprint$pprint_vector(avec) {
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_10987_10990 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_10988_10991 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "[", null, "]");
      var length_count10989_10992 = 0;
      var aseq_10993 = cljs.core.seq.call(null, avec);
      while (true) {
        if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count10989_10992 < cljs.core._STAR_print_length_STAR_) {
          if (aseq_10993) {
            cljs.pprint.write_out.call(null, cljs.core.first.call(null, aseq_10993));
            if (cljs.core.next.call(null, aseq_10993)) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
              cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
              var G__10994 = length_count10989_10992 + 1;
              var G__10995 = cljs.core.next.call(null, aseq_10993);
              length_count10989_10992 = G__10994;
              aseq_10993 = G__10995;
              continue;
            } else {
            }
          } else {
          }
        } else {
          cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
        }
        break;
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_10988_10991;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_10987_10990;
    }
  }
  return null;
};
cljs.pprint.pprint_array = function() {
  var format_in__10215__auto__ = "~\x3c[~;~@{~w~^, ~:_~}~;]~:\x3e";
  var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
  return function(format_in__10215__auto__, cf__10216__auto__) {
    return function() {
      var G__10996__delegate = function(args__10217__auto__) {
        var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
        return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
      };
      var G__10996 = function(var_args) {
        var args__10217__auto__ = null;
        if (arguments.length > 0) {
          var G__10997__i = 0, G__10997__a = new Array(arguments.length - 0);
          while (G__10997__i < G__10997__a.length) {
            G__10997__a[G__10997__i] = arguments[G__10997__i + 0];
            ++G__10997__i;
          }
          args__10217__auto__ = new cljs.core.IndexedSeq(G__10997__a, 0);
        }
        return G__10996__delegate.call(this, args__10217__auto__);
      };
      G__10996.cljs$lang$maxFixedArity = 0;
      G__10996.cljs$lang$applyTo = function(arglist__10998) {
        var args__10217__auto__ = cljs.core.seq(arglist__10998);
        return G__10996__delegate(args__10217__auto__);
      };
      G__10996.cljs$core$IFn$_invoke$arity$variadic = G__10996__delegate;
      return G__10996;
    }();
  }(format_in__10215__auto__, cf__10216__auto__);
}();
cljs.pprint.pprint_map = function cljs$pprint$pprint_map(amap) {
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_11004_11009 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_11005_11010 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "{", null, "}");
      var length_count11006_11011 = 0;
      var aseq_11012 = cljs.core.seq.call(null, amap);
      while (true) {
        if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count11006_11011 < cljs.core._STAR_print_length_STAR_) {
          if (aseq_11012) {
            if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
            } else {
              var _STAR_current_level_STAR_11007_11013 = cljs.pprint._STAR_current_level_STAR_;
              var _STAR_current_length_STAR_11008_11014 = cljs.pprint._STAR_current_length_STAR_;
              cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
              cljs.pprint._STAR_current_length_STAR_ = 0;
              try {
                cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, null, null, null);
                cljs.pprint.write_out.call(null, cljs.core.ffirst.call(null, aseq_11012));
                cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
                cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
                cljs.pprint._STAR_current_length_STAR_ = 0;
                cljs.pprint.write_out.call(null, cljs.core.fnext.call(null, cljs.core.first.call(null, aseq_11012)));
                cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
              } finally {
                cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11008_11014;
                cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11007_11013;
              }
            }
            if (cljs.core.next.call(null, aseq_11012)) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, ", ");
              cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
              var G__11015 = length_count11006_11011 + 1;
              var G__11016 = cljs.core.next.call(null, aseq_11012);
              length_count11006_11011 = G__11015;
              aseq_11012 = G__11016;
              continue;
            } else {
            }
          } else {
          }
        } else {
          cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
        }
        break;
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11005_11010;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11004_11009;
    }
  }
  return null;
};
cljs.pprint.pprint_simple_default = function cljs$pprint$pprint_simple_default(obj) {
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, cljs.core.pr_str.call(null, obj));
};
cljs.pprint.pprint_set = function() {
  var format_in__10215__auto__ = "~\x3c#{~;~@{~w~^ ~:_~}~;}~:\x3e";
  var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
  return function(format_in__10215__auto__, cf__10216__auto__) {
    return function() {
      var G__11017__delegate = function(args__10217__auto__) {
        var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
        return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
      };
      var G__11017 = function(var_args) {
        var args__10217__auto__ = null;
        if (arguments.length > 0) {
          var G__11018__i = 0, G__11018__a = new Array(arguments.length - 0);
          while (G__11018__i < G__11018__a.length) {
            G__11018__a[G__11018__i] = arguments[G__11018__i + 0];
            ++G__11018__i;
          }
          args__10217__auto__ = new cljs.core.IndexedSeq(G__11018__a, 0);
        }
        return G__11017__delegate.call(this, args__10217__auto__);
      };
      G__11017.cljs$lang$maxFixedArity = 0;
      G__11017.cljs$lang$applyTo = function(arglist__11019) {
        var args__10217__auto__ = cljs.core.seq(arglist__11019);
        return G__11017__delegate(args__10217__auto__);
      };
      G__11017.cljs$core$IFn$_invoke$arity$variadic = G__11017__delegate;
      return G__11017;
    }();
  }(format_in__10215__auto__, cf__10216__auto__);
}();
cljs.pprint.type_map = new cljs.core.PersistentArrayMap(null, 2, ["core$future_call", "Future", "core$promise", "Promise"], null);
cljs.pprint.map_ref_type = function cljs$pprint$map_ref_type(name) {
  var or__4668__auto__ = function() {
    var temp__4425__auto__ = cljs.core.re_find.call(null, /^[^$]+\$[^$]+/, name);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var match = temp__4425__auto__;
      return cljs.pprint.type_map.call(null, match);
    } else {
      return null;
    }
  }();
  if (cljs.core.truth_(or__4668__auto__)) {
    return or__4668__auto__;
  } else {
    return name;
  }
};
cljs.pprint.pprint_ideref = function cljs$pprint$pprint_ideref(o) {
  var prefix = [cljs.core.str("#\x3c"), cljs.core.str(cljs.pprint.map_ref_type.call(null, cljs.core.type.call(null, o).name)), cljs.core.str("@"), cljs.core.str(goog.getUid(o)), cljs.core.str(": ")].join("");
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_11024_11028 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_11025_11029 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, prefix, null, "\x3e");
      cljs.pprint.pprint_indent.call(null, new cljs.core.Keyword(null, "block", "block", 664686210), -(cljs.core.count.call(null, prefix) - 2));
      cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
      cljs.pprint.write_out.call(null, function() {
        var and__4656__auto__ = !(o == null) ? o.cljs$lang$protocol_mask$partition1$ & 1 || o.cljs$core$IPending$ ? true : !o.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPending, o) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPending, o);
        if (and__4656__auto__) {
          return !cljs.core._realized_QMARK_.call(null, o);
        } else {
          return and__4656__auto__;
        }
      }() ? new cljs.core.Keyword(null, "not-delivered", "not-delivered", 1599158697) : cljs.core.deref.call(null, o));
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11025_11029;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11024_11028;
    }
  }
  return null;
};
cljs.pprint.pprint_pqueue = function() {
  var format_in__10215__auto__ = "~\x3c\x3c-(~;~@{~w~^ ~_~}~;)-\x3c~:\x3e";
  var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
  return function(format_in__10215__auto__, cf__10216__auto__) {
    return function() {
      var G__11030__delegate = function(args__10217__auto__) {
        var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
        return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
      };
      var G__11030 = function(var_args) {
        var args__10217__auto__ = null;
        if (arguments.length > 0) {
          var G__11031__i = 0, G__11031__a = new Array(arguments.length - 0);
          while (G__11031__i < G__11031__a.length) {
            G__11031__a[G__11031__i] = arguments[G__11031__i + 0];
            ++G__11031__i;
          }
          args__10217__auto__ = new cljs.core.IndexedSeq(G__11031__a, 0);
        }
        return G__11030__delegate.call(this, args__10217__auto__);
      };
      G__11030.cljs$lang$maxFixedArity = 0;
      G__11030.cljs$lang$applyTo = function(arglist__11032) {
        var args__10217__auto__ = cljs.core.seq(arglist__11032);
        return G__11030__delegate(args__10217__auto__);
      };
      G__11030.cljs$core$IFn$_invoke$arity$variadic = G__11030__delegate;
      return G__11030;
    }();
  }(format_in__10215__auto__, cf__10216__auto__);
}();
cljs.pprint.type_dispatcher = function cljs$pprint$type_dispatcher(obj) {
  if (obj instanceof cljs.core.PersistentQueue) {
    return new cljs.core.Keyword(null, "queue", "queue", 1455835879);
  } else {
    if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 32768 || obj.cljs$core$IDeref$ ? true : !obj.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, obj) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, obj)) {
      return new cljs.core.Keyword(null, "deref", "deref", -145586795);
    } else {
      if (obj instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(null, "symbol", "symbol", -1038572696);
      } else {
        if (cljs.core.seq_QMARK_.call(null, obj)) {
          return new cljs.core.Keyword(null, "list", "list", 765357683);
        } else {
          if (cljs.core.map_QMARK_.call(null, obj)) {
            return new cljs.core.Keyword(null, "map", "map", 1371690461);
          } else {
            if (cljs.core.vector_QMARK_.call(null, obj)) {
              return new cljs.core.Keyword(null, "vector", "vector", 1902966158);
            } else {
              if (cljs.core.set_QMARK_.call(null, obj)) {
                return new cljs.core.Keyword(null, "set", "set", 304602554);
              } else {
                if (obj == null) {
                  return null;
                } else {
                  return new cljs.core.Keyword(null, "default", "default", -1987822328);
                }
              }
            }
          }
        }
      }
    }
  }
};
if (typeof cljs.pprint.simple_dispatch !== "undefined") {
} else {
  cljs.pprint.simple_dispatch = function() {
    var method_table__5581__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5582__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5583__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5584__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5585__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.pprint", "simple-dispatch"), cljs.pprint.type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5585__auto__, method_table__5581__auto__, prefer_table__5582__auto__, method_cache__5583__auto__, cached_hierarchy__5584__auto__);
  }();
}
cljs.pprint.use_method.call(null, cljs.pprint.simple_dispatch, new cljs.core.Keyword(null, "list", "list", 765357683), cljs.pprint.pprint_list);
cljs.pprint.use_method.call(null, cljs.pprint.simple_dispatch, new cljs.core.Keyword(null, "vector", "vector", 1902966158), cljs.pprint.pprint_vector);
cljs.pprint.use_method.call(null, cljs.pprint.simple_dispatch, new cljs.core.Keyword(null, "map", "map", 1371690461), cljs.pprint.pprint_map);
cljs.pprint.use_method.call(null, cljs.pprint.simple_dispatch, new cljs.core.Keyword(null, "set", "set", 304602554), cljs.pprint.pprint_set);
cljs.pprint.use_method.call(null, cljs.pprint.simple_dispatch, null, function() {
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, cljs.core.pr_str.call(null, null));
});
cljs.pprint.use_method.call(null, cljs.pprint.simple_dispatch, new cljs.core.Keyword(null, "default", "default", -1987822328), cljs.pprint.pprint_simple_default);
cljs.pprint.set_pprint_dispatch.call(null, cljs.pprint.simple_dispatch);
cljs.pprint.pprint_simple_code_list;
cljs.pprint.brackets = function cljs$pprint$brackets(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["[", "]"], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(", ")"], null);
  }
};
cljs.pprint.pprint_ns_reference = function cljs$pprint$pprint_ns_reference(reference) {
  if (cljs.core.sequential_QMARK_.call(null, reference)) {
    var vec__11043 = cljs.pprint.brackets.call(null, reference);
    var start = cljs.core.nth.call(null, vec__11043, 0, null);
    var end = cljs.core.nth.call(null, vec__11043, 1, null);
    var vec__11044 = reference;
    var keyw = cljs.core.nth.call(null, vec__11044, 0, null);
    var args = cljs.core.nthnext.call(null, vec__11044, 1);
    if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
      cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
    } else {
      var _STAR_current_level_STAR_11045_11051 = cljs.pprint._STAR_current_level_STAR_;
      var _STAR_current_length_STAR_11046_11052 = cljs.pprint._STAR_current_length_STAR_;
      cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
      cljs.pprint._STAR_current_length_STAR_ = 0;
      try {
        cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, start, null, end);
        (function() {
          var format_in__10215__auto__ = "~w~:i";
          var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
          return function(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args) {
            return function() {
              var G__11053__delegate = function(args__10217__auto__) {
                var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
              };
              var G__11053 = function(var_args) {
                var args__10217__auto__ = null;
                if (arguments.length > 0) {
                  var G__11054__i = 0, G__11054__a = new Array(arguments.length - 0);
                  while (G__11054__i < G__11054__a.length) {
                    G__11054__a[G__11054__i] = arguments[G__11054__i + 0];
                    ++G__11054__i;
                  }
                  args__10217__auto__ = new cljs.core.IndexedSeq(G__11054__a, 0);
                }
                return G__11053__delegate.call(this, args__10217__auto__);
              };
              G__11053.cljs$lang$maxFixedArity = 0;
              G__11053.cljs$lang$applyTo = function(arglist__11055) {
                var args__10217__auto__ = cljs.core.seq(arglist__11055);
                return G__11053__delegate(args__10217__auto__);
              };
              G__11053.cljs$core$IFn$_invoke$arity$variadic = G__11053__delegate;
              return G__11053;
            }();
          }(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args);
        })().call(null, keyw);
        var args_11056__$1 = args;
        while (true) {
          if (cljs.core.seq.call(null, args_11056__$1)) {
            (function() {
              var format_in__10215__auto__ = " ";
              var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
              return function(args_11056__$1, format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args) {
                return function() {
                  var G__11057__delegate = function(args__10217__auto__) {
                    var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                    return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
                  };
                  var G__11057 = function(var_args) {
                    var args__10217__auto__ = null;
                    if (arguments.length > 0) {
                      var G__11058__i = 0, G__11058__a = new Array(arguments.length - 0);
                      while (G__11058__i < G__11058__a.length) {
                        G__11058__a[G__11058__i] = arguments[G__11058__i + 0];
                        ++G__11058__i;
                      }
                      args__10217__auto__ = new cljs.core.IndexedSeq(G__11058__a, 0);
                    }
                    return G__11057__delegate.call(this, args__10217__auto__);
                  };
                  G__11057.cljs$lang$maxFixedArity = 0;
                  G__11057.cljs$lang$applyTo = function(arglist__11059) {
                    var args__10217__auto__ = cljs.core.seq(arglist__11059);
                    return G__11057__delegate(args__10217__auto__);
                  };
                  G__11057.cljs$core$IFn$_invoke$arity$variadic = G__11057__delegate;
                  return G__11057;
                }();
              }(args_11056__$1, format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args);
            })().call(null);
            var arg_11060 = cljs.core.first.call(null, args_11056__$1);
            if (cljs.core.sequential_QMARK_.call(null, arg_11060)) {
              var vec__11047_11061 = cljs.pprint.brackets.call(null, arg_11060);
              var start_11062__$1 = cljs.core.nth.call(null, vec__11047_11061, 0, null);
              var end_11063__$1 = cljs.core.nth.call(null, vec__11047_11061, 1, null);
              if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
                cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
              } else {
                var _STAR_current_level_STAR_11048_11064 = cljs.pprint._STAR_current_level_STAR_;
                var _STAR_current_length_STAR_11049_11065 = cljs.pprint._STAR_current_length_STAR_;
                cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
                cljs.pprint._STAR_current_length_STAR_ = 0;
                try {
                  cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, start_11062__$1, null, end_11063__$1);
                  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, arg_11060), 3) && cljs.core.second.call(null, arg_11060) instanceof cljs.core.Keyword) {
                    var vec__11050_11066 = arg_11060;
                    var ns_11067 = cljs.core.nth.call(null, vec__11050_11066, 0, null);
                    var kw_11068 = cljs.core.nth.call(null, vec__11050_11066, 1, null);
                    var lis_11069 = cljs.core.nth.call(null, vec__11050_11066, 2, null);
                    (function() {
                      var format_in__10215__auto__ = "~w ~w ";
                      var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
                      return function(args_11056__$1, format_in__10215__auto__, cf__10216__auto__, vec__11050_11066, ns_11067, kw_11068, lis_11069, _STAR_current_level_STAR_11048_11064, _STAR_current_length_STAR_11049_11065, vec__11047_11061, start_11062__$1, end_11063__$1, arg_11060, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args) {
                        return function() {
                          var G__11070__delegate = function(args__10217__auto__) {
                            var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                            return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
                          };
                          var G__11070 = function(var_args) {
                            var args__10217__auto__ = null;
                            if (arguments.length > 0) {
                              var G__11071__i = 0, G__11071__a = new Array(arguments.length - 0);
                              while (G__11071__i < G__11071__a.length) {
                                G__11071__a[G__11071__i] = arguments[G__11071__i + 0];
                                ++G__11071__i;
                              }
                              args__10217__auto__ = new cljs.core.IndexedSeq(G__11071__a, 0);
                            }
                            return G__11070__delegate.call(this, args__10217__auto__);
                          };
                          G__11070.cljs$lang$maxFixedArity = 0;
                          G__11070.cljs$lang$applyTo = function(arglist__11072) {
                            var args__10217__auto__ = cljs.core.seq(arglist__11072);
                            return G__11070__delegate(args__10217__auto__);
                          };
                          G__11070.cljs$core$IFn$_invoke$arity$variadic = G__11070__delegate;
                          return G__11070;
                        }();
                      }(args_11056__$1, format_in__10215__auto__, cf__10216__auto__, vec__11050_11066, ns_11067, kw_11068, lis_11069, _STAR_current_level_STAR_11048_11064, _STAR_current_length_STAR_11049_11065, vec__11047_11061, start_11062__$1, end_11063__$1, arg_11060, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args);
                    })().call(null, ns_11067, kw_11068);
                    if (cljs.core.sequential_QMARK_.call(null, lis_11069)) {
                      (function() {
                        var format_in__10215__auto__ = cljs.core.vector_QMARK_.call(null, lis_11069) ? "~\x3c[~;~@{~w~^ ~:_~}~;]~:\x3e" : "~\x3c(~;~@{~w~^ ~:_~}~;)~:\x3e";
                        var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
                        return function(args_11056__$1, format_in__10215__auto__, cf__10216__auto__, vec__11050_11066, ns_11067, kw_11068, lis_11069, _STAR_current_level_STAR_11048_11064, _STAR_current_length_STAR_11049_11065, vec__11047_11061, start_11062__$1, end_11063__$1, arg_11060, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args) {
                          return function() {
                            var G__11073__delegate = function(args__10217__auto__) {
                              var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                              return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
                            };
                            var G__11073 = function(var_args) {
                              var args__10217__auto__ = null;
                              if (arguments.length > 0) {
                                var G__11074__i = 0, G__11074__a = new Array(arguments.length - 0);
                                while (G__11074__i < G__11074__a.length) {
                                  G__11074__a[G__11074__i] = arguments[G__11074__i + 0];
                                  ++G__11074__i;
                                }
                                args__10217__auto__ = new cljs.core.IndexedSeq(G__11074__a, 0);
                              }
                              return G__11073__delegate.call(this, args__10217__auto__);
                            };
                            G__11073.cljs$lang$maxFixedArity = 0;
                            G__11073.cljs$lang$applyTo = function(arglist__11075) {
                              var args__10217__auto__ = cljs.core.seq(arglist__11075);
                              return G__11073__delegate(args__10217__auto__);
                            };
                            G__11073.cljs$core$IFn$_invoke$arity$variadic = G__11073__delegate;
                            return G__11073;
                          }();
                        }(args_11056__$1, format_in__10215__auto__, cf__10216__auto__, vec__11050_11066, ns_11067, kw_11068, lis_11069, _STAR_current_level_STAR_11048_11064, _STAR_current_length_STAR_11049_11065, vec__11047_11061, start_11062__$1, end_11063__$1, arg_11060, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args);
                      })().call(null, lis_11069);
                    } else {
                      cljs.pprint.write_out.call(null, lis_11069);
                    }
                  } else {
                    cljs.core.apply.call(null, function() {
                      var format_in__10215__auto__ = "~w ~:i~@{~w~^ ~:_~}";
                      var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
                      return function(args_11056__$1, format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11048_11064, _STAR_current_length_STAR_11049_11065, vec__11047_11061, start_11062__$1, end_11063__$1, arg_11060, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args) {
                        return function() {
                          var G__11076__delegate = function(args__10217__auto__) {
                            var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                            return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
                          };
                          var G__11076 = function(var_args) {
                            var args__10217__auto__ = null;
                            if (arguments.length > 0) {
                              var G__11077__i = 0, G__11077__a = new Array(arguments.length - 0);
                              while (G__11077__i < G__11077__a.length) {
                                G__11077__a[G__11077__i] = arguments[G__11077__i + 0];
                                ++G__11077__i;
                              }
                              args__10217__auto__ = new cljs.core.IndexedSeq(G__11077__a, 0);
                            }
                            return G__11076__delegate.call(this, args__10217__auto__);
                          };
                          G__11076.cljs$lang$maxFixedArity = 0;
                          G__11076.cljs$lang$applyTo = function(arglist__11078) {
                            var args__10217__auto__ = cljs.core.seq(arglist__11078);
                            return G__11076__delegate(args__10217__auto__);
                          };
                          G__11076.cljs$core$IFn$_invoke$arity$variadic = G__11076__delegate;
                          return G__11076;
                        }();
                      }(args_11056__$1, format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11048_11064, _STAR_current_length_STAR_11049_11065, vec__11047_11061, start_11062__$1, end_11063__$1, arg_11060, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args);
                    }(), arg_11060);
                  }
                  cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
                } finally {
                  cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11049_11065;
                  cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11048_11064;
                }
              }
              if (cljs.core.next.call(null, args_11056__$1)) {
                (function() {
                  var format_in__10215__auto__ = "~_";
                  var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
                  return function(args_11056__$1, format_in__10215__auto__, cf__10216__auto__, vec__11047_11061, start_11062__$1, end_11063__$1, arg_11060, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args) {
                    return function() {
                      var G__11079__delegate = function(args__10217__auto__) {
                        var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                        return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
                      };
                      var G__11079 = function(var_args) {
                        var args__10217__auto__ = null;
                        if (arguments.length > 0) {
                          var G__11080__i = 0, G__11080__a = new Array(arguments.length - 0);
                          while (G__11080__i < G__11080__a.length) {
                            G__11080__a[G__11080__i] = arguments[G__11080__i + 0];
                            ++G__11080__i;
                          }
                          args__10217__auto__ = new cljs.core.IndexedSeq(G__11080__a, 0);
                        }
                        return G__11079__delegate.call(this, args__10217__auto__);
                      };
                      G__11079.cljs$lang$maxFixedArity = 0;
                      G__11079.cljs$lang$applyTo = function(arglist__11081) {
                        var args__10217__auto__ = cljs.core.seq(arglist__11081);
                        return G__11079__delegate(args__10217__auto__);
                      };
                      G__11079.cljs$core$IFn$_invoke$arity$variadic = G__11079__delegate;
                      return G__11079;
                    }();
                  }(args_11056__$1, format_in__10215__auto__, cf__10216__auto__, vec__11047_11061, start_11062__$1, end_11063__$1, arg_11060, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args);
                })().call(null);
              } else {
              }
            } else {
              cljs.pprint.write_out.call(null, arg_11060);
              if (cljs.core.next.call(null, args_11056__$1)) {
                (function() {
                  var format_in__10215__auto__ = "~:_";
                  var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
                  return function(args_11056__$1, format_in__10215__auto__, cf__10216__auto__, arg_11060, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args) {
                    return function() {
                      var G__11082__delegate = function(args__10217__auto__) {
                        var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                        return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
                      };
                      var G__11082 = function(var_args) {
                        var args__10217__auto__ = null;
                        if (arguments.length > 0) {
                          var G__11083__i = 0, G__11083__a = new Array(arguments.length - 0);
                          while (G__11083__i < G__11083__a.length) {
                            G__11083__a[G__11083__i] = arguments[G__11083__i + 0];
                            ++G__11083__i;
                          }
                          args__10217__auto__ = new cljs.core.IndexedSeq(G__11083__a, 0);
                        }
                        return G__11082__delegate.call(this, args__10217__auto__);
                      };
                      G__11082.cljs$lang$maxFixedArity = 0;
                      G__11082.cljs$lang$applyTo = function(arglist__11084) {
                        var args__10217__auto__ = cljs.core.seq(arglist__11084);
                        return G__11082__delegate(args__10217__auto__);
                      };
                      G__11082.cljs$core$IFn$_invoke$arity$variadic = G__11082__delegate;
                      return G__11082;
                    }();
                  }(args_11056__$1, format_in__10215__auto__, cf__10216__auto__, arg_11060, _STAR_current_level_STAR_11045_11051, _STAR_current_length_STAR_11046_11052, vec__11043, start, end, vec__11044, keyw, args);
                })().call(null);
              } else {
              }
            }
            var G__11085 = cljs.core.next.call(null, args_11056__$1);
            args_11056__$1 = G__11085;
            continue;
          } else {
          }
          break;
        }
        cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
      } finally {
        cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11046_11052;
        cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11045_11051;
      }
    }
    return null;
  } else {
    return cljs.pprint.write_out.call(null, reference);
  }
};
cljs.pprint.pprint_ns = function cljs$pprint$pprint_ns(alis) {
  if (cljs.core.next.call(null, alis)) {
    var vec__11091 = alis;
    var ns_sym = cljs.core.nth.call(null, vec__11091, 0, null);
    var ns_name = cljs.core.nth.call(null, vec__11091, 1, null);
    var stuff = cljs.core.nthnext.call(null, vec__11091, 2);
    var vec__11092 = typeof cljs.core.first.call(null, stuff) === "string" ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, stuff), cljs.core.next.call(null, stuff)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, stuff], null);
    var doc_str = cljs.core.nth.call(null, vec__11092, 0, null);
    var stuff__$1 = cljs.core.nth.call(null, vec__11092, 1, null);
    var vec__11093 = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, stuff__$1)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, stuff__$1), cljs.core.next.call(null, stuff__$1)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, stuff__$1], null);
    var attr_map = cljs.core.nth.call(null, vec__11093, 0, null);
    var references = cljs.core.nth.call(null, vec__11093, 1, null);
    if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
      cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
    } else {
      var _STAR_current_level_STAR_11094_11096 = cljs.pprint._STAR_current_level_STAR_;
      var _STAR_current_length_STAR_11095_11097 = cljs.pprint._STAR_current_length_STAR_;
      cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
      cljs.pprint._STAR_current_length_STAR_ = 0;
      try {
        cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
        (function() {
          var format_in__10215__auto__ = "~w ~1I~@_~w";
          var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
          return function(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11094_11096, _STAR_current_length_STAR_11095_11097, vec__11091, ns_sym, ns_name, stuff, vec__11092, doc_str, stuff__$1, vec__11093, attr_map, references) {
            return function() {
              var G__11098__delegate = function(args__10217__auto__) {
                var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
              };
              var G__11098 = function(var_args) {
                var args__10217__auto__ = null;
                if (arguments.length > 0) {
                  var G__11099__i = 0, G__11099__a = new Array(arguments.length - 0);
                  while (G__11099__i < G__11099__a.length) {
                    G__11099__a[G__11099__i] = arguments[G__11099__i + 0];
                    ++G__11099__i;
                  }
                  args__10217__auto__ = new cljs.core.IndexedSeq(G__11099__a, 0);
                }
                return G__11098__delegate.call(this, args__10217__auto__);
              };
              G__11098.cljs$lang$maxFixedArity = 0;
              G__11098.cljs$lang$applyTo = function(arglist__11100) {
                var args__10217__auto__ = cljs.core.seq(arglist__11100);
                return G__11098__delegate(args__10217__auto__);
              };
              G__11098.cljs$core$IFn$_invoke$arity$variadic = G__11098__delegate;
              return G__11098;
            }();
          }(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11094_11096, _STAR_current_length_STAR_11095_11097, vec__11091, ns_sym, ns_name, stuff, vec__11092, doc_str, stuff__$1, vec__11093, attr_map, references);
        })().call(null, ns_sym, ns_name);
        if (cljs.core.truth_(function() {
          var or__4668__auto__ = doc_str;
          if (cljs.core.truth_(or__4668__auto__)) {
            return or__4668__auto__;
          } else {
            var or__4668__auto____$1 = attr_map;
            if (cljs.core.truth_(or__4668__auto____$1)) {
              return or__4668__auto____$1;
            } else {
              return cljs.core.seq.call(null, references);
            }
          }
        }())) {
          (function() {
            var format_in__10215__auto__ = "~@:_";
            var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
            return function(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11094_11096, _STAR_current_length_STAR_11095_11097, vec__11091, ns_sym, ns_name, stuff, vec__11092, doc_str, stuff__$1, vec__11093, attr_map, references) {
              return function() {
                var G__11101__delegate = function(args__10217__auto__) {
                  var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                  return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
                };
                var G__11101 = function(var_args) {
                  var args__10217__auto__ = null;
                  if (arguments.length > 0) {
                    var G__11102__i = 0, G__11102__a = new Array(arguments.length - 0);
                    while (G__11102__i < G__11102__a.length) {
                      G__11102__a[G__11102__i] = arguments[G__11102__i + 0];
                      ++G__11102__i;
                    }
                    args__10217__auto__ = new cljs.core.IndexedSeq(G__11102__a, 0);
                  }
                  return G__11101__delegate.call(this, args__10217__auto__);
                };
                G__11101.cljs$lang$maxFixedArity = 0;
                G__11101.cljs$lang$applyTo = function(arglist__11103) {
                  var args__10217__auto__ = cljs.core.seq(arglist__11103);
                  return G__11101__delegate(args__10217__auto__);
                };
                G__11101.cljs$core$IFn$_invoke$arity$variadic = G__11101__delegate;
                return G__11101;
              }();
            }(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11094_11096, _STAR_current_length_STAR_11095_11097, vec__11091, ns_sym, ns_name, stuff, vec__11092, doc_str, stuff__$1, vec__11093, attr_map, references);
          })().call(null);
        } else {
        }
        if (cljs.core.truth_(doc_str)) {
          cljs.pprint.cl_format.call(null, true, '"~a"~:[~;~:@_~]', doc_str, function() {
            var or__4668__auto__ = attr_map;
            if (cljs.core.truth_(or__4668__auto__)) {
              return or__4668__auto__;
            } else {
              return cljs.core.seq.call(null, references);
            }
          }());
        } else {
        }
        if (cljs.core.truth_(attr_map)) {
          (function() {
            var format_in__10215__auto__ = "~w~:[~;~:@_~]";
            var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
            return function(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11094_11096, _STAR_current_length_STAR_11095_11097, vec__11091, ns_sym, ns_name, stuff, vec__11092, doc_str, stuff__$1, vec__11093, attr_map, references) {
              return function() {
                var G__11104__delegate = function(args__10217__auto__) {
                  var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                  return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
                };
                var G__11104 = function(var_args) {
                  var args__10217__auto__ = null;
                  if (arguments.length > 0) {
                    var G__11105__i = 0, G__11105__a = new Array(arguments.length - 0);
                    while (G__11105__i < G__11105__a.length) {
                      G__11105__a[G__11105__i] = arguments[G__11105__i + 0];
                      ++G__11105__i;
                    }
                    args__10217__auto__ = new cljs.core.IndexedSeq(G__11105__a, 0);
                  }
                  return G__11104__delegate.call(this, args__10217__auto__);
                };
                G__11104.cljs$lang$maxFixedArity = 0;
                G__11104.cljs$lang$applyTo = function(arglist__11106) {
                  var args__10217__auto__ = cljs.core.seq(arglist__11106);
                  return G__11104__delegate(args__10217__auto__);
                };
                G__11104.cljs$core$IFn$_invoke$arity$variadic = G__11104__delegate;
                return G__11104;
              }();
            }(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11094_11096, _STAR_current_length_STAR_11095_11097, vec__11091, ns_sym, ns_name, stuff, vec__11092, doc_str, stuff__$1, vec__11093, attr_map, references);
          })().call(null, attr_map, cljs.core.seq.call(null, references));
        } else {
        }
        var references_11107__$1 = references;
        while (true) {
          cljs.pprint.pprint_ns_reference.call(null, cljs.core.first.call(null, references_11107__$1));
          var temp__4425__auto___11108 = cljs.core.next.call(null, references_11107__$1);
          if (temp__4425__auto___11108) {
            var references_11109__$2 = temp__4425__auto___11108;
            cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
            var G__11110 = references_11109__$2;
            references_11107__$1 = G__11110;
            continue;
          } else {
          }
          break;
        }
        cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
      } finally {
        cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11095_11097;
        cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11094_11096;
      }
    }
    return null;
  } else {
    return cljs.pprint.write_out.call(null, alis);
  }
};
cljs.pprint.pprint_hold_first = function() {
  var format_in__10215__auto__ = "~:\x3c~w~^ ~@_~w~^ ~_~@{~w~^ ~_~}~:\x3e";
  var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
  return function(format_in__10215__auto__, cf__10216__auto__) {
    return function() {
      var G__11111__delegate = function(args__10217__auto__) {
        var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
        return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
      };
      var G__11111 = function(var_args) {
        var args__10217__auto__ = null;
        if (arguments.length > 0) {
          var G__11112__i = 0, G__11112__a = new Array(arguments.length - 0);
          while (G__11112__i < G__11112__a.length) {
            G__11112__a[G__11112__i] = arguments[G__11112__i + 0];
            ++G__11112__i;
          }
          args__10217__auto__ = new cljs.core.IndexedSeq(G__11112__a, 0);
        }
        return G__11111__delegate.call(this, args__10217__auto__);
      };
      G__11111.cljs$lang$maxFixedArity = 0;
      G__11111.cljs$lang$applyTo = function(arglist__11113) {
        var args__10217__auto__ = cljs.core.seq(arglist__11113);
        return G__11111__delegate(args__10217__auto__);
      };
      G__11111.cljs$core$IFn$_invoke$arity$variadic = G__11111__delegate;
      return G__11111;
    }();
  }(format_in__10215__auto__, cf__10216__auto__);
}();
cljs.pprint.single_defn = function cljs$pprint$single_defn(alis, has_doc_str_QMARK_) {
  if (cljs.core.seq.call(null, alis)) {
    if (cljs.core.truth_(has_doc_str_QMARK_)) {
      (function() {
        var format_in__10215__auto__ = " ~_";
        var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
        return function(format_in__10215__auto__, cf__10216__auto__) {
          return function() {
            var G__11114__delegate = function(args__10217__auto__) {
              var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
              return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
            };
            var G__11114 = function(var_args) {
              var args__10217__auto__ = null;
              if (arguments.length > 0) {
                var G__11115__i = 0, G__11115__a = new Array(arguments.length - 0);
                while (G__11115__i < G__11115__a.length) {
                  G__11115__a[G__11115__i] = arguments[G__11115__i + 0];
                  ++G__11115__i;
                }
                args__10217__auto__ = new cljs.core.IndexedSeq(G__11115__a, 0);
              }
              return G__11114__delegate.call(this, args__10217__auto__);
            };
            G__11114.cljs$lang$maxFixedArity = 0;
            G__11114.cljs$lang$applyTo = function(arglist__11116) {
              var args__10217__auto__ = cljs.core.seq(arglist__11116);
              return G__11114__delegate(args__10217__auto__);
            };
            G__11114.cljs$core$IFn$_invoke$arity$variadic = G__11114__delegate;
            return G__11114;
          }();
        }(format_in__10215__auto__, cf__10216__auto__);
      })().call(null);
    } else {
      (function() {
        var format_in__10215__auto__ = " ~@_";
        var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
        return function(format_in__10215__auto__, cf__10216__auto__) {
          return function() {
            var G__11117__delegate = function(args__10217__auto__) {
              var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
              return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
            };
            var G__11117 = function(var_args) {
              var args__10217__auto__ = null;
              if (arguments.length > 0) {
                var G__11118__i = 0, G__11118__a = new Array(arguments.length - 0);
                while (G__11118__i < G__11118__a.length) {
                  G__11118__a[G__11118__i] = arguments[G__11118__i + 0];
                  ++G__11118__i;
                }
                args__10217__auto__ = new cljs.core.IndexedSeq(G__11118__a, 0);
              }
              return G__11117__delegate.call(this, args__10217__auto__);
            };
            G__11117.cljs$lang$maxFixedArity = 0;
            G__11117.cljs$lang$applyTo = function(arglist__11119) {
              var args__10217__auto__ = cljs.core.seq(arglist__11119);
              return G__11117__delegate(args__10217__auto__);
            };
            G__11117.cljs$core$IFn$_invoke$arity$variadic = G__11117__delegate;
            return G__11117;
          }();
        }(format_in__10215__auto__, cf__10216__auto__);
      })().call(null);
    }
    return function() {
      var format_in__10215__auto__ = "~{~w~^ ~_~}";
      var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
      return function(format_in__10215__auto__, cf__10216__auto__) {
        return function() {
          var G__11120__delegate = function(args__10217__auto__) {
            var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
            return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
          };
          var G__11120 = function(var_args) {
            var args__10217__auto__ = null;
            if (arguments.length > 0) {
              var G__11121__i = 0, G__11121__a = new Array(arguments.length - 0);
              while (G__11121__i < G__11121__a.length) {
                G__11121__a[G__11121__i] = arguments[G__11121__i + 0];
                ++G__11121__i;
              }
              args__10217__auto__ = new cljs.core.IndexedSeq(G__11121__a, 0);
            }
            return G__11120__delegate.call(this, args__10217__auto__);
          };
          G__11120.cljs$lang$maxFixedArity = 0;
          G__11120.cljs$lang$applyTo = function(arglist__11122) {
            var args__10217__auto__ = cljs.core.seq(arglist__11122);
            return G__11120__delegate(args__10217__auto__);
          };
          G__11120.cljs$core$IFn$_invoke$arity$variadic = G__11120__delegate;
          return G__11120;
        }();
      }(format_in__10215__auto__, cf__10216__auto__);
    }().call(null, alis);
  } else {
    return null;
  }
};
cljs.pprint.multi_defn = function cljs$pprint$multi_defn(alis, has_doc_str_QMARK_) {
  if (cljs.core.seq.call(null, alis)) {
    return function() {
      var format_in__10215__auto__ = " ~_~{~w~^ ~_~}";
      var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
      return function(format_in__10215__auto__, cf__10216__auto__) {
        return function() {
          var G__11123__delegate = function(args__10217__auto__) {
            var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
            return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
          };
          var G__11123 = function(var_args) {
            var args__10217__auto__ = null;
            if (arguments.length > 0) {
              var G__11124__i = 0, G__11124__a = new Array(arguments.length - 0);
              while (G__11124__i < G__11124__a.length) {
                G__11124__a[G__11124__i] = arguments[G__11124__i + 0];
                ++G__11124__i;
              }
              args__10217__auto__ = new cljs.core.IndexedSeq(G__11124__a, 0);
            }
            return G__11123__delegate.call(this, args__10217__auto__);
          };
          G__11123.cljs$lang$maxFixedArity = 0;
          G__11123.cljs$lang$applyTo = function(arglist__11125) {
            var args__10217__auto__ = cljs.core.seq(arglist__11125);
            return G__11123__delegate(args__10217__auto__);
          };
          G__11123.cljs$core$IFn$_invoke$arity$variadic = G__11123__delegate;
          return G__11123;
        }();
      }(format_in__10215__auto__, cf__10216__auto__);
    }().call(null, alis);
  } else {
    return null;
  }
};
cljs.pprint.pprint_defn = function cljs$pprint$pprint_defn(alis) {
  if (cljs.core.next.call(null, alis)) {
    var vec__11131 = alis;
    var defn_sym = cljs.core.nth.call(null, vec__11131, 0, null);
    var defn_name = cljs.core.nth.call(null, vec__11131, 1, null);
    var stuff = cljs.core.nthnext.call(null, vec__11131, 2);
    var vec__11132 = typeof cljs.core.first.call(null, stuff) === "string" ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, stuff), cljs.core.next.call(null, stuff)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, stuff], null);
    var doc_str = cljs.core.nth.call(null, vec__11132, 0, null);
    var stuff__$1 = cljs.core.nth.call(null, vec__11132, 1, null);
    var vec__11133 = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, stuff__$1)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, stuff__$1), cljs.core.next.call(null, stuff__$1)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, stuff__$1], null);
    var attr_map = cljs.core.nth.call(null, vec__11133, 0, null);
    var stuff__$2 = cljs.core.nth.call(null, vec__11133, 1, null);
    if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
      cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
    } else {
      var _STAR_current_level_STAR_11134_11136 = cljs.pprint._STAR_current_level_STAR_;
      var _STAR_current_length_STAR_11135_11137 = cljs.pprint._STAR_current_length_STAR_;
      cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
      cljs.pprint._STAR_current_length_STAR_ = 0;
      try {
        cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
        (function() {
          var format_in__10215__auto__ = "~w ~1I~@_~w";
          var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
          return function(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11134_11136, _STAR_current_length_STAR_11135_11137, vec__11131, defn_sym, defn_name, stuff, vec__11132, doc_str, stuff__$1, vec__11133, attr_map, stuff__$2) {
            return function() {
              var G__11138__delegate = function(args__10217__auto__) {
                var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
              };
              var G__11138 = function(var_args) {
                var args__10217__auto__ = null;
                if (arguments.length > 0) {
                  var G__11139__i = 0, G__11139__a = new Array(arguments.length - 0);
                  while (G__11139__i < G__11139__a.length) {
                    G__11139__a[G__11139__i] = arguments[G__11139__i + 0];
                    ++G__11139__i;
                  }
                  args__10217__auto__ = new cljs.core.IndexedSeq(G__11139__a, 0);
                }
                return G__11138__delegate.call(this, args__10217__auto__);
              };
              G__11138.cljs$lang$maxFixedArity = 0;
              G__11138.cljs$lang$applyTo = function(arglist__11140) {
                var args__10217__auto__ = cljs.core.seq(arglist__11140);
                return G__11138__delegate(args__10217__auto__);
              };
              G__11138.cljs$core$IFn$_invoke$arity$variadic = G__11138__delegate;
              return G__11138;
            }();
          }(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11134_11136, _STAR_current_length_STAR_11135_11137, vec__11131, defn_sym, defn_name, stuff, vec__11132, doc_str, stuff__$1, vec__11133, attr_map, stuff__$2);
        })().call(null, defn_sym, defn_name);
        if (cljs.core.truth_(doc_str)) {
          (function() {
            var format_in__10215__auto__ = " ~_~w";
            var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
            return function(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11134_11136, _STAR_current_length_STAR_11135_11137, vec__11131, defn_sym, defn_name, stuff, vec__11132, doc_str, stuff__$1, vec__11133, attr_map, stuff__$2) {
              return function() {
                var G__11141__delegate = function(args__10217__auto__) {
                  var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                  return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
                };
                var G__11141 = function(var_args) {
                  var args__10217__auto__ = null;
                  if (arguments.length > 0) {
                    var G__11142__i = 0, G__11142__a = new Array(arguments.length - 0);
                    while (G__11142__i < G__11142__a.length) {
                      G__11142__a[G__11142__i] = arguments[G__11142__i + 0];
                      ++G__11142__i;
                    }
                    args__10217__auto__ = new cljs.core.IndexedSeq(G__11142__a, 0);
                  }
                  return G__11141__delegate.call(this, args__10217__auto__);
                };
                G__11141.cljs$lang$maxFixedArity = 0;
                G__11141.cljs$lang$applyTo = function(arglist__11143) {
                  var args__10217__auto__ = cljs.core.seq(arglist__11143);
                  return G__11141__delegate(args__10217__auto__);
                };
                G__11141.cljs$core$IFn$_invoke$arity$variadic = G__11141__delegate;
                return G__11141;
              }();
            }(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11134_11136, _STAR_current_length_STAR_11135_11137, vec__11131, defn_sym, defn_name, stuff, vec__11132, doc_str, stuff__$1, vec__11133, attr_map, stuff__$2);
          })().call(null, doc_str);
        } else {
        }
        if (cljs.core.truth_(attr_map)) {
          (function() {
            var format_in__10215__auto__ = " ~_~w";
            var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
            return function(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11134_11136, _STAR_current_length_STAR_11135_11137, vec__11131, defn_sym, defn_name, stuff, vec__11132, doc_str, stuff__$1, vec__11133, attr_map, stuff__$2) {
              return function() {
                var G__11144__delegate = function(args__10217__auto__) {
                  var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                  return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
                };
                var G__11144 = function(var_args) {
                  var args__10217__auto__ = null;
                  if (arguments.length > 0) {
                    var G__11145__i = 0, G__11145__a = new Array(arguments.length - 0);
                    while (G__11145__i < G__11145__a.length) {
                      G__11145__a[G__11145__i] = arguments[G__11145__i + 0];
                      ++G__11145__i;
                    }
                    args__10217__auto__ = new cljs.core.IndexedSeq(G__11145__a, 0);
                  }
                  return G__11144__delegate.call(this, args__10217__auto__);
                };
                G__11144.cljs$lang$maxFixedArity = 0;
                G__11144.cljs$lang$applyTo = function(arglist__11146) {
                  var args__10217__auto__ = cljs.core.seq(arglist__11146);
                  return G__11144__delegate(args__10217__auto__);
                };
                G__11144.cljs$core$IFn$_invoke$arity$variadic = G__11144__delegate;
                return G__11144;
              }();
            }(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11134_11136, _STAR_current_length_STAR_11135_11137, vec__11131, defn_sym, defn_name, stuff, vec__11132, doc_str, stuff__$1, vec__11133, attr_map, stuff__$2);
          })().call(null, attr_map);
        } else {
        }
        if (cljs.core.vector_QMARK_.call(null, cljs.core.first.call(null, stuff__$2))) {
          cljs.pprint.single_defn.call(null, stuff__$2, function() {
            var or__4668__auto__ = doc_str;
            if (cljs.core.truth_(or__4668__auto__)) {
              return or__4668__auto__;
            } else {
              return attr_map;
            }
          }());
        } else {
          cljs.pprint.multi_defn.call(null, stuff__$2, function() {
            var or__4668__auto__ = doc_str;
            if (cljs.core.truth_(or__4668__auto__)) {
              return or__4668__auto__;
            } else {
              return attr_map;
            }
          }());
        }
        cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
      } finally {
        cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11135_11137;
        cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11134_11136;
      }
    }
    return null;
  } else {
    return cljs.pprint.pprint_simple_code_list.call(null, alis);
  }
};
cljs.pprint.pprint_binding_form = function cljs$pprint$pprint_binding_form(binding_vec) {
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_11152_11157 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_11153_11158 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "[", null, "]");
      var length_count11154_11159 = 0;
      var binding_11160 = binding_vec;
      while (true) {
        if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count11154_11159 < cljs.core._STAR_print_length_STAR_) {
          if (cljs.core.seq.call(null, binding_11160)) {
            if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
            } else {
              var _STAR_current_level_STAR_11155_11161 = cljs.pprint._STAR_current_level_STAR_;
              var _STAR_current_length_STAR_11156_11162 = cljs.pprint._STAR_current_length_STAR_;
              cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
              cljs.pprint._STAR_current_length_STAR_ = 0;
              try {
                cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, null, null, null);
                cljs.pprint.write_out.call(null, cljs.core.first.call(null, binding_11160));
                if (cljs.core.next.call(null, binding_11160)) {
                  cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
                  cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "miser", "miser", -556060186));
                  cljs.pprint.write_out.call(null, cljs.core.second.call(null, binding_11160));
                } else {
                }
                cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
              } finally {
                cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11156_11162;
                cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11155_11161;
              }
            }
            if (cljs.core.next.call(null, cljs.core.rest.call(null, binding_11160))) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
              cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
              var G__11163 = length_count11154_11159 + 1;
              var G__11164 = cljs.core.next.call(null, cljs.core.rest.call(null, binding_11160));
              length_count11154_11159 = G__11163;
              binding_11160 = G__11164;
              continue;
            } else {
            }
          } else {
          }
        } else {
          cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
        }
        break;
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11153_11158;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11152_11157;
    }
  }
  return null;
};
cljs.pprint.pprint_let = function cljs$pprint$pprint_let(alis) {
  var base_sym = cljs.core.first.call(null, alis);
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_11167_11169 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_11168_11170 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
      if (cljs.core.next.call(null, alis) && cljs.core.vector_QMARK_.call(null, cljs.core.second.call(null, alis))) {
        (function() {
          var format_in__10215__auto__ = "~w ~1I~@_";
          var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
          return function(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11167_11169, _STAR_current_length_STAR_11168_11170, base_sym) {
            return function() {
              var G__11171__delegate = function(args__10217__auto__) {
                var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
              };
              var G__11171 = function(var_args) {
                var args__10217__auto__ = null;
                if (arguments.length > 0) {
                  var G__11172__i = 0, G__11172__a = new Array(arguments.length - 0);
                  while (G__11172__i < G__11172__a.length) {
                    G__11172__a[G__11172__i] = arguments[G__11172__i + 0];
                    ++G__11172__i;
                  }
                  args__10217__auto__ = new cljs.core.IndexedSeq(G__11172__a, 0);
                }
                return G__11171__delegate.call(this, args__10217__auto__);
              };
              G__11171.cljs$lang$maxFixedArity = 0;
              G__11171.cljs$lang$applyTo = function(arglist__11173) {
                var args__10217__auto__ = cljs.core.seq(arglist__11173);
                return G__11171__delegate(args__10217__auto__);
              };
              G__11171.cljs$core$IFn$_invoke$arity$variadic = G__11171__delegate;
              return G__11171;
            }();
          }(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11167_11169, _STAR_current_length_STAR_11168_11170, base_sym);
        })().call(null, base_sym);
        cljs.pprint.pprint_binding_form.call(null, cljs.core.second.call(null, alis));
        (function() {
          var format_in__10215__auto__ = " ~_~{~w~^ ~_~}";
          var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
          return function(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11167_11169, _STAR_current_length_STAR_11168_11170, base_sym) {
            return function() {
              var G__11174__delegate = function(args__10217__auto__) {
                var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
              };
              var G__11174 = function(var_args) {
                var args__10217__auto__ = null;
                if (arguments.length > 0) {
                  var G__11175__i = 0, G__11175__a = new Array(arguments.length - 0);
                  while (G__11175__i < G__11175__a.length) {
                    G__11175__a[G__11175__i] = arguments[G__11175__i + 0];
                    ++G__11175__i;
                  }
                  args__10217__auto__ = new cljs.core.IndexedSeq(G__11175__a, 0);
                }
                return G__11174__delegate.call(this, args__10217__auto__);
              };
              G__11174.cljs$lang$maxFixedArity = 0;
              G__11174.cljs$lang$applyTo = function(arglist__11176) {
                var args__10217__auto__ = cljs.core.seq(arglist__11176);
                return G__11174__delegate(args__10217__auto__);
              };
              G__11174.cljs$core$IFn$_invoke$arity$variadic = G__11174__delegate;
              return G__11174;
            }();
          }(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11167_11169, _STAR_current_length_STAR_11168_11170, base_sym);
        })().call(null, cljs.core.next.call(null, cljs.core.rest.call(null, alis)));
      } else {
        cljs.pprint.pprint_simple_code_list.call(null, alis);
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11168_11170;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11167_11169;
    }
  }
  return null;
};
cljs.pprint.pprint_if = function() {
  var format_in__10215__auto__ = "~:\x3c~1I~w~^ ~@_~w~@{ ~_~w~}~:\x3e";
  var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
  return function(format_in__10215__auto__, cf__10216__auto__) {
    return function() {
      var G__11177__delegate = function(args__10217__auto__) {
        var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
        return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
      };
      var G__11177 = function(var_args) {
        var args__10217__auto__ = null;
        if (arguments.length > 0) {
          var G__11178__i = 0, G__11178__a = new Array(arguments.length - 0);
          while (G__11178__i < G__11178__a.length) {
            G__11178__a[G__11178__i] = arguments[G__11178__i + 0];
            ++G__11178__i;
          }
          args__10217__auto__ = new cljs.core.IndexedSeq(G__11178__a, 0);
        }
        return G__11177__delegate.call(this, args__10217__auto__);
      };
      G__11177.cljs$lang$maxFixedArity = 0;
      G__11177.cljs$lang$applyTo = function(arglist__11179) {
        var args__10217__auto__ = cljs.core.seq(arglist__11179);
        return G__11177__delegate(args__10217__auto__);
      };
      G__11177.cljs$core$IFn$_invoke$arity$variadic = G__11177__delegate;
      return G__11177;
    }();
  }(format_in__10215__auto__, cf__10216__auto__);
}();
cljs.pprint.pprint_cond = function cljs$pprint$pprint_cond(alis) {
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_11185_11190 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_11186_11191 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
      cljs.pprint.pprint_indent.call(null, new cljs.core.Keyword(null, "block", "block", 664686210), 1);
      cljs.pprint.write_out.call(null, cljs.core.first.call(null, alis));
      if (cljs.core.next.call(null, alis)) {
        cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
        cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
        var length_count11187_11192 = 0;
        var alis_11193__$1 = cljs.core.next.call(null, alis);
        while (true) {
          if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count11187_11192 < cljs.core._STAR_print_length_STAR_) {
            if (alis_11193__$1) {
              if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
                cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
              } else {
                var _STAR_current_level_STAR_11188_11194 = cljs.pprint._STAR_current_level_STAR_;
                var _STAR_current_length_STAR_11189_11195 = cljs.pprint._STAR_current_length_STAR_;
                cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
                cljs.pprint._STAR_current_length_STAR_ = 0;
                try {
                  cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, null, null, null);
                  cljs.pprint.write_out.call(null, cljs.core.first.call(null, alis_11193__$1));
                  if (cljs.core.next.call(null, alis_11193__$1)) {
                    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
                    cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "miser", "miser", -556060186));
                    cljs.pprint.write_out.call(null, cljs.core.second.call(null, alis_11193__$1));
                  } else {
                  }
                  cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
                } finally {
                  cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11189_11195;
                  cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11188_11194;
                }
              }
              if (cljs.core.next.call(null, cljs.core.rest.call(null, alis_11193__$1))) {
                cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
                cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
                var G__11196 = length_count11187_11192 + 1;
                var G__11197 = cljs.core.next.call(null, cljs.core.rest.call(null, alis_11193__$1));
                length_count11187_11192 = G__11196;
                alis_11193__$1 = G__11197;
                continue;
              } else {
              }
            } else {
            }
          } else {
            cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
          }
          break;
        }
      } else {
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11186_11191;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11185_11190;
    }
  }
  return null;
};
cljs.pprint.pprint_condp = function cljs$pprint$pprint_condp(alis) {
  if (cljs.core.count.call(null, alis) > 3) {
    if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
      cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
    } else {
      var _STAR_current_level_STAR_11203_11208 = cljs.pprint._STAR_current_level_STAR_;
      var _STAR_current_length_STAR_11204_11209 = cljs.pprint._STAR_current_length_STAR_;
      cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
      cljs.pprint._STAR_current_length_STAR_ = 0;
      try {
        cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
        cljs.pprint.pprint_indent.call(null, new cljs.core.Keyword(null, "block", "block", 664686210), 1);
        cljs.core.apply.call(null, function() {
          var format_in__10215__auto__ = "~w ~@_~w ~@_~w ~_";
          var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
          return function(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11203_11208, _STAR_current_length_STAR_11204_11209) {
            return function() {
              var G__11210__delegate = function(args__10217__auto__) {
                var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
                return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
              };
              var G__11210 = function(var_args) {
                var args__10217__auto__ = null;
                if (arguments.length > 0) {
                  var G__11211__i = 0, G__11211__a = new Array(arguments.length - 0);
                  while (G__11211__i < G__11211__a.length) {
                    G__11211__a[G__11211__i] = arguments[G__11211__i + 0];
                    ++G__11211__i;
                  }
                  args__10217__auto__ = new cljs.core.IndexedSeq(G__11211__a, 0);
                }
                return G__11210__delegate.call(this, args__10217__auto__);
              };
              G__11210.cljs$lang$maxFixedArity = 0;
              G__11210.cljs$lang$applyTo = function(arglist__11212) {
                var args__10217__auto__ = cljs.core.seq(arglist__11212);
                return G__11210__delegate(args__10217__auto__);
              };
              G__11210.cljs$core$IFn$_invoke$arity$variadic = G__11210__delegate;
              return G__11210;
            }();
          }(format_in__10215__auto__, cf__10216__auto__, _STAR_current_level_STAR_11203_11208, _STAR_current_length_STAR_11204_11209);
        }(), alis);
        var length_count11205_11213 = 0;
        var alis_11214__$1 = cljs.core.seq.call(null, cljs.core.drop.call(null, 3, alis));
        while (true) {
          if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count11205_11213 < cljs.core._STAR_print_length_STAR_) {
            if (alis_11214__$1) {
              if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
                cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
              } else {
                var _STAR_current_level_STAR_11206_11215 = cljs.pprint._STAR_current_level_STAR_;
                var _STAR_current_length_STAR_11207_11216 = cljs.pprint._STAR_current_length_STAR_;
                cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
                cljs.pprint._STAR_current_length_STAR_ = 0;
                try {
                  cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, null, null, null);
                  cljs.pprint.write_out.call(null, cljs.core.first.call(null, alis_11214__$1));
                  if (cljs.core.next.call(null, alis_11214__$1)) {
                    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
                    cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "miser", "miser", -556060186));
                    cljs.pprint.write_out.call(null, cljs.core.second.call(null, alis_11214__$1));
                  } else {
                  }
                  cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
                } finally {
                  cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11207_11216;
                  cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11206_11215;
                }
              }
              if (cljs.core.next.call(null, cljs.core.rest.call(null, alis_11214__$1))) {
                cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
                cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
                var G__11217 = length_count11205_11213 + 1;
                var G__11218 = cljs.core.next.call(null, cljs.core.rest.call(null, alis_11214__$1));
                length_count11205_11213 = G__11217;
                alis_11214__$1 = G__11218;
                continue;
              } else {
              }
            } else {
            }
          } else {
            cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
          }
          break;
        }
        cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
      } finally {
        cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11204_11209;
        cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11203_11208;
      }
    }
    return null;
  } else {
    return cljs.pprint.pprint_simple_code_list.call(null, alis);
  }
};
cljs.pprint._STAR_symbol_map_STAR_ = cljs.core.PersistentArrayMap.EMPTY;
cljs.pprint.pprint_anon_func = function cljs$pprint$pprint_anon_func(alis) {
  var args = cljs.core.second.call(null, alis);
  var nlis = cljs.core.first.call(null, cljs.core.rest.call(null, cljs.core.rest.call(null, alis)));
  if (cljs.core.vector_QMARK_.call(null, args)) {
    var _STAR_symbol_map_STAR_11222 = cljs.pprint._STAR_symbol_map_STAR_;
    cljs.pprint._STAR_symbol_map_STAR_ = cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, args)) ? cljs.core.PersistentArrayMap.fromArray([cljs.core.first.call(null, args), "%"], true, false) : cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(_STAR_symbol_map_STAR_11222, args, nlis) {
      return function(p1__11219_SHARP_, p2__11220_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11219_SHARP_, [cljs.core.str("%"), cljs.core.str(p2__11220_SHARP_)].join("")], null);
      };
    }(_STAR_symbol_map_STAR_11222, args, nlis), args, cljs.core.range.call(null, 1, cljs.core.count.call(null, args) + 1)));
    try {
      return function() {
        var format_in__10215__auto__ = "~\x3c#(~;~@{~w~^ ~_~}~;)~:\x3e";
        var cf__10216__auto__ = typeof format_in__10215__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__10215__auto__) : format_in__10215__auto__;
        return function(format_in__10215__auto__, cf__10216__auto__, _STAR_symbol_map_STAR_11222, args, nlis) {
          return function() {
            var G__11223__delegate = function(args__10217__auto__) {
              var navigator__10218__auto__ = cljs.pprint.init_navigator.call(null, args__10217__auto__);
              return cljs.pprint.execute_format.call(null, cf__10216__auto__, navigator__10218__auto__);
            };
            var G__11223 = function(var_args) {
              var args__10217__auto__ = null;
              if (arguments.length > 0) {
                var G__11224__i = 0, G__11224__a = new Array(arguments.length - 0);
                while (G__11224__i < G__11224__a.length) {
                  G__11224__a[G__11224__i] = arguments[G__11224__i + 0];
                  ++G__11224__i;
                }
                args__10217__auto__ = new cljs.core.IndexedSeq(G__11224__a, 0);
              }
              return G__11223__delegate.call(this, args__10217__auto__);
            };
            G__11223.cljs$lang$maxFixedArity = 0;
            G__11223.cljs$lang$applyTo = function(arglist__11225) {
              var args__10217__auto__ = cljs.core.seq(arglist__11225);
              return G__11223__delegate(args__10217__auto__);
            };
            G__11223.cljs$core$IFn$_invoke$arity$variadic = G__11223__delegate;
            return G__11223;
          }();
        }(format_in__10215__auto__, cf__10216__auto__, _STAR_symbol_map_STAR_11222, args, nlis);
      }().call(null, nlis);
    } finally {
      cljs.pprint._STAR_symbol_map_STAR_ = _STAR_symbol_map_STAR_11222;
    }
  } else {
    return cljs.pprint.pprint_simple_code_list.call(null, alis);
  }
};
cljs.pprint.pprint_simple_code_list = function cljs$pprint$pprint_simple_code_list(alis) {
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_11229_11232 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_11230_11233 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
      cljs.pprint.pprint_indent.call(null, new cljs.core.Keyword(null, "block", "block", 664686210), 1);
      var length_count11231_11234 = 0;
      var alis_11235__$1 = cljs.core.seq.call(null, alis);
      while (true) {
        if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count11231_11234 < cljs.core._STAR_print_length_STAR_) {
          if (alis_11235__$1) {
            cljs.pprint.write_out.call(null, cljs.core.first.call(null, alis_11235__$1));
            if (cljs.core.next.call(null, alis_11235__$1)) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
              cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
              var G__11236 = length_count11231_11234 + 1;
              var G__11237 = cljs.core.next.call(null, alis_11235__$1);
              length_count11231_11234 = G__11236;
              alis_11235__$1 = G__11237;
              continue;
            } else {
            }
          } else {
          }
        } else {
          cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
        }
        break;
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_11230_11233;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_11229_11232;
    }
  }
  return null;
};
cljs.pprint.two_forms = function cljs$pprint$two_forms(amap) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.mapcat.call(null, cljs.core.identity, function() {
    var iter__5440__auto__ = function cljs$pprint$two_forms_$_iter__11242(s__11243) {
      return new cljs.core.LazySeq(null, function() {
        var s__11243__$1 = s__11243;
        while (true) {
          var temp__4425__auto__ = cljs.core.seq.call(null, s__11243__$1);
          if (temp__4425__auto__) {
            var s__11243__$2 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__11243__$2)) {
              var c__5438__auto__ = cljs.core.chunk_first.call(null, s__11243__$2);
              var size__5439__auto__ = cljs.core.count.call(null, c__5438__auto__);
              var b__11245 = cljs.core.chunk_buffer.call(null, size__5439__auto__);
              if (function() {
                var i__11244 = 0;
                while (true) {
                  if (i__11244 < size__5439__auto__) {
                    var x = cljs.core._nth.call(null, c__5438__auto__, i__11244);
                    cljs.core.chunk_append.call(null, b__11245, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.symbol.call(null, cljs.core.name.call(null, cljs.core.first.call(null, x))), cljs.core.second.call(null, x)], null)], null));
                    var G__11246 = i__11244 + 1;
                    i__11244 = G__11246;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11245), cljs$pprint$two_forms_$_iter__11242.call(null, cljs.core.chunk_rest.call(null, s__11243__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11245), null);
              }
            } else {
              var x = cljs.core.first.call(null, s__11243__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.symbol.call(null, cljs.core.name.call(null, cljs.core.first.call(null, x))), cljs.core.second.call(null, x)], null)], null), cljs$pprint$two_forms_$_iter__11242.call(null, cljs.core.rest.call(null, s__11243__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5440__auto__.call(null, amap);
  }()));
};
cljs.pprint.add_core_ns = function cljs$pprint$add_core_ns(amap) {
  var core = "clojure.core";
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(core) {
    return function(p1__11247_SHARP_) {
      var vec__11249 = p1__11247_SHARP_;
      var s = cljs.core.nth.call(null, vec__11249, 0, null);
      var f = cljs.core.nth.call(null, vec__11249, 1, null);
      if (cljs.core.not.call(null, function() {
        var or__4668__auto__ = cljs.core.namespace.call(null, s);
        if (cljs.core.truth_(or__4668__auto__)) {
          return or__4668__auto__;
        } else {
          return cljs.core.special_symbol_QMARK_.call(null, s);
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.symbol.call(null, core, cljs.core.name.call(null, s)), f], null);
      } else {
        return p1__11247_SHARP_;
      }
    };
  }(core), amap));
};
cljs.pprint._STAR_code_table_STAR_ = cljs.pprint.two_forms.call(null, cljs.pprint.add_core_ns.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null, ".", ".", 1975675962, null), new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), new cljs.core.Symbol(null, "when-first", "when-first", 821699168, null), new cljs.core.Symbol(null, "if", "if", 1181717262, null), new cljs.core.Symbol(null, "condp", "condp", 1054325175, null), new cljs.core.Symbol(null, "..", "..", -300507420, 
null), new cljs.core.Symbol(null, "defmacro", "defmacro", 2054157304, null), new cljs.core.Symbol(null, "defn", "defn", -126010802, null), new cljs.core.Symbol(null, "loop", "loop", 1244978678, null), new cljs.core.Symbol(null, "struct", "struct", 325972931, null), new cljs.core.Symbol(null, "doseq", "doseq", 221164135, null), new cljs.core.Symbol(null, "if-not", "if-not", -265415609, null), new cljs.core.Symbol(null, "when-not", "when-not", -1223136340, null), new cljs.core.Symbol(null, "def", "def", 
597100991, null), new cljs.core.Symbol(null, "when", "when", 1064114221, null), new cljs.core.Symbol(null, "with-open", "with-open", 172119667, null), new cljs.core.Symbol(null, "with-local-vars", "with-local-vars", 837642072, null), new cljs.core.Symbol(null, "defonce", "defonce", -1681484013, null), new cljs.core.Symbol(null, "when-let", "when-let", -1383043480, null), new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "dotimes", "dotimes", -818708397, null), new cljs.core.Symbol(null, 
"cond", "cond", 1606708055, null), new cljs.core.Symbol(null, "let", "let", 358118826, null), new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.Symbol(null, "defn-", "defn-", 1097765044, null), new cljs.core.Symbol(null, "locking", "locking", 1542862874, null), new cljs.core.Symbol(null, "-\x3e", "-\x3e", -2139605430, null), new cljs.core.Symbol(null, "if-let", "if-let", 1803593690, null), new cljs.core.Symbol(null, "binding", "binding", -2114503176, null), new cljs.core.Symbol(null, 
"struct-map", "struct-map", -1387540878, null)], [cljs.pprint.pprint_hold_first, cljs.pprint.pprint_anon_func, cljs.pprint.pprint_let, cljs.pprint.pprint_if, cljs.pprint.pprint_condp, cljs.pprint.pprint_hold_first, cljs.pprint.pprint_defn, cljs.pprint.pprint_defn, cljs.pprint.pprint_let, cljs.pprint.pprint_hold_first, cljs.pprint.pprint_let, cljs.pprint.pprint_if, cljs.pprint.pprint_if, cljs.pprint.pprint_hold_first, cljs.pprint.pprint_if, cljs.pprint.pprint_let, cljs.pprint.pprint_let, cljs.pprint.pprint_hold_first, 
cljs.pprint.pprint_let, cljs.pprint.pprint_ns, cljs.pprint.pprint_let, cljs.pprint.pprint_cond, cljs.pprint.pprint_let, cljs.pprint.pprint_defn, cljs.pprint.pprint_defn, cljs.pprint.pprint_hold_first, cljs.pprint.pprint_hold_first, cljs.pprint.pprint_let, cljs.pprint.pprint_let, cljs.pprint.pprint_hold_first])));
cljs.pprint.pprint_code_list = function cljs$pprint$pprint_code_list(alis) {
  if (cljs.core.not.call(null, cljs.pprint.pprint_reader_macro.call(null, alis))) {
    var temp__4423__auto__ = cljs.pprint._STAR_code_table_STAR_.call(null, cljs.core.first.call(null, alis));
    if (cljs.core.truth_(temp__4423__auto__)) {
      var special_form = temp__4423__auto__;
      return special_form.call(null, alis);
    } else {
      return cljs.pprint.pprint_simple_code_list.call(null, alis);
    }
  } else {
    return null;
  }
};
cljs.pprint.pprint_code_symbol = function cljs$pprint$pprint_code_symbol(sym) {
  var temp__4423__auto__ = sym.call(null, cljs.pprint._STAR_symbol_map_STAR_);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var arg_num = temp__4423__auto__;
    return cljs.pprint.print.call(null, arg_num);
  } else {
    if (cljs.core.truth_(cljs.pprint._STAR_print_suppress_namespaces_STAR_)) {
      return cljs.pprint.print.call(null, cljs.core.name.call(null, sym));
    } else {
      return cljs.pprint.pr.call(null, sym);
    }
  }
};
if (typeof cljs.pprint.code_dispatch !== "undefined") {
} else {
  cljs.pprint.code_dispatch = function() {
    var method_table__5581__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5582__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5583__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5584__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5585__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.pprint", "code-dispatch"), cljs.pprint.type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5585__auto__, method_table__5581__auto__, prefer_table__5582__auto__, method_cache__5583__auto__, cached_hierarchy__5584__auto__);
  }();
}
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "list", "list", 765357683), cljs.pprint.pprint_code_list);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "symbol", "symbol", -1038572696), cljs.pprint.pprint_code_symbol);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "vector", "vector", 1902966158), cljs.pprint.pprint_vector);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "map", "map", 1371690461), cljs.pprint.pprint_map);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "set", "set", 304602554), cljs.pprint.pprint_set);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "queue", "queue", 1455835879), cljs.pprint.pprint_pqueue);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "deref", "deref", -145586795), cljs.pprint.pprint_ideref);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, null, cljs.pprint.pr);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "default", "default", -1987822328), cljs.pprint.pprint_simple_default);
cljs.pprint.set_pprint_dispatch.call(null, cljs.pprint.simple_dispatch);
cljs.pprint.add_padding = function cljs$pprint$add_padding(width, s) {
  var padding = function() {
    var x__4999__auto__ = 0;
    var y__5000__auto__ = width - cljs.core.count.call(null, s);
    return x__4999__auto__ > y__5000__auto__ ? x__4999__auto__ : y__5000__auto__;
  }();
  return cljs.core.apply.call(null, cljs.core.str, clojure.string.join.call(null, cljs.core.repeat.call(null, padding, " ")), s);
};
cljs.pprint.print_table = function cljs$pprint$print_table(var_args) {
  var args11253 = [];
  var len__5726__auto___11269 = arguments.length;
  var i__5727__auto___11270 = 0;
  while (true) {
    if (i__5727__auto___11270 < len__5726__auto___11269) {
      args11253.push(arguments[i__5727__auto___11270]);
      var G__11271 = i__5727__auto___11270 + 1;
      i__5727__auto___11270 = G__11271;
      continue;
    } else {
    }
    break;
  }
  var G__11255 = args11253.length;
  switch(G__11255) {
    case 2:
      return cljs.pprint.print_table.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return cljs.pprint.print_table.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11253.length)].join(""));;
  }
};
cljs.pprint.print_table.cljs$core$IFn$_invoke$arity$2 = function(ks, rows) {
  var _STAR_print_newline_STAR_11256 = cljs.core._STAR_print_newline_STAR_;
  try {
    if (cljs.core.seq.call(null, rows)) {
      var widths = cljs.core.map.call(null, function(_STAR_print_newline_STAR_11256) {
        return function(k) {
          return cljs.core.apply.call(null, cljs.core.max, cljs.core.count.call(null, [cljs.core.str(k)].join("")), cljs.core.map.call(null, function(_STAR_print_newline_STAR_11256) {
            return function(p1__11250_SHARP_) {
              return cljs.core.count.call(null, [cljs.core.str(cljs.core.get.call(null, p1__11250_SHARP_, k))].join(""));
            };
          }(_STAR_print_newline_STAR_11256), rows));
        };
      }(_STAR_print_newline_STAR_11256), ks);
      var spacers = cljs.core.map.call(null, function(widths, _STAR_print_newline_STAR_11256) {
        return function(p1__11251_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, p1__11251_SHARP_, "-"));
        };
      }(widths, _STAR_print_newline_STAR_11256), widths);
      var fmt_row = function(widths, spacers, _STAR_print_newline_STAR_11256) {
        return function(leader, divider, trailer, row) {
          return [cljs.core.str(leader), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, divider, function() {
            var iter__5440__auto__ = function(widths, spacers, _STAR_print_newline_STAR_11256) {
              return function cljs$pprint$iter__11257(s__11258) {
                return new cljs.core.LazySeq(null, function(widths, spacers, _STAR_print_newline_STAR_11256) {
                  return function() {
                    var s__11258__$1 = s__11258;
                    while (true) {
                      var temp__4425__auto__ = cljs.core.seq.call(null, s__11258__$1);
                      if (temp__4425__auto__) {
                        var s__11258__$2 = temp__4425__auto__;
                        if (cljs.core.chunked_seq_QMARK_.call(null, s__11258__$2)) {
                          var c__5438__auto__ = cljs.core.chunk_first.call(null, s__11258__$2);
                          var size__5439__auto__ = cljs.core.count.call(null, c__5438__auto__);
                          var b__11260 = cljs.core.chunk_buffer.call(null, size__5439__auto__);
                          if (function() {
                            var i__11259 = 0;
                            while (true) {
                              if (i__11259 < size__5439__auto__) {
                                var vec__11263 = cljs.core._nth.call(null, c__5438__auto__, i__11259);
                                var col = cljs.core.nth.call(null, vec__11263, 0, null);
                                var width = cljs.core.nth.call(null, vec__11263, 1, null);
                                cljs.core.chunk_append.call(null, b__11260, cljs.pprint.add_padding.call(null, width, [cljs.core.str(col)].join("")));
                                var G__11273 = i__11259 + 1;
                                i__11259 = G__11273;
                                continue;
                              } else {
                                return true;
                              }
                              break;
                            }
                          }()) {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11260), cljs$pprint$iter__11257.call(null, cljs.core.chunk_rest.call(null, s__11258__$2)));
                          } else {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11260), null);
                          }
                        } else {
                          var vec__11264 = cljs.core.first.call(null, s__11258__$2);
                          var col = cljs.core.nth.call(null, vec__11264, 0, null);
                          var width = cljs.core.nth.call(null, vec__11264, 1, null);
                          return cljs.core.cons.call(null, cljs.pprint.add_padding.call(null, width, [cljs.core.str(col)].join("")), cljs$pprint$iter__11257.call(null, cljs.core.rest.call(null, s__11258__$2)));
                        }
                      } else {
                        return null;
                      }
                      break;
                    }
                  };
                }(widths, spacers, _STAR_print_newline_STAR_11256), null, null);
              };
            }(widths, spacers, _STAR_print_newline_STAR_11256);
            return iter__5440__auto__.call(null, cljs.core.map.call(null, cljs.core.vector, cljs.core.map.call(null, function(iter__5440__auto__, widths, spacers, _STAR_print_newline_STAR_11256) {
              return function(p1__11252_SHARP_) {
                return cljs.core.get.call(null, row, p1__11252_SHARP_);
              };
            }(iter__5440__auto__, widths, spacers, _STAR_print_newline_STAR_11256), ks), widths));
          }()))), cljs.core.str(trailer)].join("");
        };
      }(widths, spacers, _STAR_print_newline_STAR_11256);
      cljs.core.println.call(null);
      cljs.core.println.call(null, fmt_row.call(null, "| ", " | ", " |", cljs.core.zipmap.call(null, ks, ks)));
      cljs.core.println.call(null, fmt_row.call(null, "|-", "-+-", "-|", cljs.core.zipmap.call(null, ks, spacers)));
      var seq__11265 = cljs.core.seq.call(null, rows);
      var chunk__11266 = null;
      var count__11267 = 0;
      var i__11268 = 0;
      while (true) {
        if (i__11268 < count__11267) {
          var row = cljs.core._nth.call(null, chunk__11266, i__11268);
          cljs.core.println.call(null, fmt_row.call(null, "| ", " | ", " |", row));
          var G__11274 = seq__11265;
          var G__11275 = chunk__11266;
          var G__11276 = count__11267;
          var G__11277 = i__11268 + 1;
          seq__11265 = G__11274;
          chunk__11266 = G__11275;
          count__11267 = G__11276;
          i__11268 = G__11277;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__11265);
          if (temp__4425__auto__) {
            var seq__11265__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11265__$1)) {
              var c__5471__auto__ = cljs.core.chunk_first.call(null, seq__11265__$1);
              var G__11278 = cljs.core.chunk_rest.call(null, seq__11265__$1);
              var G__11279 = c__5471__auto__;
              var G__11280 = cljs.core.count.call(null, c__5471__auto__);
              var G__11281 = 0;
              seq__11265 = G__11278;
              chunk__11266 = G__11279;
              count__11267 = G__11280;
              i__11268 = G__11281;
              continue;
            } else {
              var row = cljs.core.first.call(null, seq__11265__$1);
              cljs.core.println.call(null, fmt_row.call(null, "| ", " | ", " |", row));
              var G__11282 = cljs.core.next.call(null, seq__11265__$1);
              var G__11283 = null;
              var G__11284 = 0;
              var G__11285 = 0;
              seq__11265 = G__11282;
              chunk__11266 = G__11283;
              count__11267 = G__11284;
              i__11268 = G__11285;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  } finally {
    cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_11256;
  }
};
cljs.pprint.print_table.cljs$core$IFn$_invoke$arity$1 = function(rows) {
  return cljs.pprint.print_table.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, rows)), rows);
};
cljs.pprint.print_table.cljs$lang$maxFixedArity = 2;
goog.provide("cljs.test");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("cljs.pprint");
cljs.test.empty_env = function cljs$test$empty_env(var_args) {
  var args11511 = [];
  var len__5726__auto___11515 = arguments.length;
  var i__5727__auto___11516 = 0;
  while (true) {
    if (i__5727__auto___11516 < len__5726__auto___11515) {
      args11511.push(arguments[i__5727__auto___11516]);
      var G__11517 = i__5727__auto___11516 + 1;
      i__5727__auto___11516 = G__11517;
      continue;
    } else {
    }
    break;
  }
  var G__11513 = args11511.length;
  switch(G__11513) {
    case 0:
      return cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.test.empty_env.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11511.length)].join(""));;
  }
};
cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.test.empty_env.call(null, new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322));
};
cljs.test.empty_env.cljs$core$IFn$_invoke$arity$1 = function(reporter) {
  var G__11514 = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "test", "test", 577538877), 0, new cljs.core.Keyword(null, "pass", "pass", 1574159993), 0, new cljs.core.Keyword(null, "fail", "fail", 1706214930), 0, new cljs.core.Keyword(null, "error", "error", -978969032), 0], null), new cljs.core.Keyword(null, "testing-vars", "testing-vars", -2114769150), 
  cljs.core.List.EMPTY, new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523), cljs.core.List.EMPTY, new cljs.core.Keyword(null, "formatter", "formatter", -483008823), cljs.core.pr_str, new cljs.core.Keyword(null, "reporter", "reporter", -805360621), reporter], null);
  var G__11514__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.test", "pprint", "cljs.test/pprint", 1627393641), reporter) ? cljs.core.assoc.call(null, G__11514, new cljs.core.Keyword(null, "reporter", "reporter", -805360621), new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "formatter", "formatter", -483008823), cljs.pprint.pprint) : G__11514;
  return G__11514__$1;
};
cljs.test.empty_env.cljs$lang$maxFixedArity = 1;
cljs.test._STAR_current_env_STAR_ = null;
cljs.test.get_current_env = function cljs$test$get_current_env() {
  var or__4668__auto__ = cljs.test._STAR_current_env_STAR_;
  if (cljs.core.truth_(or__4668__auto__)) {
    return or__4668__auto__;
  } else {
    return cljs.test.empty_env.call(null);
  }
};
cljs.test.update_current_env_BANG_ = function cljs$test$update_current_env_BANG_(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___11522 = arguments.length;
  var i__5727__auto___11523 = 0;
  while (true) {
    if (i__5727__auto___11523 < len__5726__auto___11522) {
      args__5733__auto__.push(arguments[i__5727__auto___11523]);
      var G__11524 = i__5727__auto___11523 + 1;
      i__5727__auto___11523 = G__11524;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 2 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(2), 0) : null;
  return cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5734__auto__);
};
cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ks, f, args) {
  return cljs.test._STAR_current_env_STAR_ = cljs.core.apply.call(null, cljs.core.update_in, cljs.test.get_current_env.call(null), ks, f, args);
};
cljs.test.update_current_env_BANG_.cljs$lang$maxFixedArity = 2;
cljs.test.update_current_env_BANG_.cljs$lang$applyTo = function(seq11519) {
  var G__11520 = cljs.core.first.call(null, seq11519);
  var seq11519__$1 = cljs.core.next.call(null, seq11519);
  var G__11521 = cljs.core.first.call(null, seq11519__$1);
  var seq11519__$2 = cljs.core.next.call(null, seq11519__$1);
  return cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__11520, G__11521, seq11519__$2);
};
cljs.test.set_env_BANG_ = function cljs$test$set_env_BANG_(new_env) {
  return cljs.test._STAR_current_env_STAR_ = new_env;
};
cljs.test.clear_env_BANG_ = function cljs$test$clear_env_BANG_() {
  return cljs.test._STAR_current_env_STAR_ = null;
};
cljs.test.get_and_clear_env_BANG_ = function cljs$test$get_and_clear_env_BANG_() {
  var env = cljs.test.get_current_env.call(null);
  cljs.test.clear_env_BANG_.call(null);
  return env;
};
cljs.test.testing_vars_str = function cljs$test$testing_vars_str(m) {
  var map__11528 = m;
  var map__11528__$1 = (!(map__11528 == null) ? map__11528.cljs$lang$protocol_mask$partition0$ & 64 || map__11528.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11528) : map__11528;
  var file = cljs.core.get.call(null, map__11528__$1, new cljs.core.Keyword(null, "file", "file", -1269645878));
  var line = cljs.core.get.call(null, map__11528__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  var column = cljs.core.get.call(null, map__11528__$1, new cljs.core.Keyword(null, "column", "column", 2078222095));
  return [cljs.core.str(cljs.core.reverse.call(null, cljs.core.map.call(null, function(map__11528, map__11528__$1, file, line, column) {
    return function(p1__11525_SHARP_) {
      return (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__11525_SHARP_));
    };
  }(map__11528, map__11528__$1, file, line, column), (new cljs.core.Keyword(null, "testing-vars", "testing-vars", -2114769150)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null))))), cljs.core.str(" ("), cljs.core.str(file), cljs.core.str(":"), cljs.core.str(line), cljs.core.str(cljs.core.truth_(column) ? [cljs.core.str(":"), cljs.core.str(column)].join("") : null), cljs.core.str(")")].join("");
};
cljs.test.testing_contexts_str = function cljs$test$testing_contexts_str() {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.reverse.call(null, (new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)))));
};
cljs.test.inc_report_counter_BANG_ = function cljs$test$inc_report_counter_BANG_(name) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)))) {
    return cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242), name], null), cljs.core.fnil.call(null, cljs.core.inc, 0));
  } else {
    return null;
  }
};
if (typeof cljs.test.report !== "undefined") {
} else {
  cljs.test.report = function() {
    var method_table__5581__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5582__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5583__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5584__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5585__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.test", "report"), function(method_table__5581__auto__, prefer_table__5582__auto__, method_cache__5583__auto__, cached_hierarchy__5584__auto__, hierarchy__5585__auto__) {
      return function(m) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "reporter", "reporter", -805360621)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m)], null);
      };
    }(method_table__5581__auto__, prefer_table__5582__auto__, method_cache__5583__auto__, cached_hierarchy__5584__auto__, hierarchy__5585__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5585__auto__, method_table__5581__auto__, prefer_table__5582__auto__, method_cache__5583__auto__, cached_hierarchy__5584__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.Keyword(null, "default", "default", -1987822328), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "pass", "pass", 1574159993)], null), function(m) {
  return cljs.test.inc_report_counter_BANG_.call(null, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
});
cljs.test.print_comparison = function cljs$test$print_comparison(m) {
  var formatter_fn = function() {
    var or__4668__auto__ = (new cljs.core.Keyword(null, "formatter", "formatter", -483008823)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null));
    if (cljs.core.truth_(or__4668__auto__)) {
      return or__4668__auto__;
    } else {
      return cljs.core.pr_str;
    }
  }();
  cljs.core.println.call(null, "expected:", formatter_fn.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
  return cljs.core.println.call(null, "  actual:", formatter_fn.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)));
};
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "fail", "fail", 1706214930)], null), function(m) {
  cljs.test.inc_report_counter_BANG_.call(null, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  cljs.core.println.call(null, "\nFAIL in", cljs.test.testing_vars_str.call(null, m));
  if (cljs.core.seq.call(null, (new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)))) {
    cljs.core.println.call(null, cljs.test.testing_contexts_str.call(null));
  } else {
  }
  var temp__4425__auto___11530 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(temp__4425__auto___11530)) {
    var message_11531 = temp__4425__auto___11530;
    cljs.core.println.call(null, message_11531);
  } else {
  }
  return cljs.test.print_comparison.call(null, m);
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "error", "error", -978969032)], null), function(m) {
  cljs.test.inc_report_counter_BANG_.call(null, new cljs.core.Keyword(null, "error", "error", -978969032));
  cljs.core.println.call(null, "\nERROR in", cljs.test.testing_vars_str.call(null, m));
  if (cljs.core.seq.call(null, (new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)))) {
    cljs.core.println.call(null, cljs.test.testing_contexts_str.call(null));
  } else {
  }
  var temp__4425__auto___11532 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(temp__4425__auto___11532)) {
    var message_11533 = temp__4425__auto___11532;
    cljs.core.println.call(null, message_11533);
  } else {
  }
  return cljs.test.print_comparison.call(null, m);
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "summary", "summary", 380847952)], null), function(m) {
  cljs.core.println.call(null, "\nRan", (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(m), "tests containing", (new cljs.core.Keyword(null, "pass", "pass", 1574159993)).cljs$core$IFn$_invoke$arity$1(m) + (new cljs.core.Keyword(null, "fail", "fail", 1706214930)).cljs$core$IFn$_invoke$arity$1(m) + (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(m), "assertions.");
  return cljs.core.println.call(null, (new cljs.core.Keyword(null, "fail", "fail", 1706214930)).cljs$core$IFn$_invoke$arity$1(m), "failures,", (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(m), "errors.");
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033)], null), function(m) {
  return cljs.core.println.call(null, "\nTesting", cljs.core.name.call(null, (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(m)));
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645)], null), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100)], null), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545)], null), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-run-tests", "end-run-tests", 267300563)], null), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-test-all-vars", "end-test-all-vars", 548827253)], null), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-test-vars", "end-test-vars", -1394419713)], null), function(m) {
  return null;
});
cljs.test.js_line_and_column = function cljs$test$js_line_and_column(stack_element) {
  var parts = stack_element.split(":");
  var cnt = cljs.core.count.call(null, parts);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [parseInt(cljs.core.nth.call(null, parts, cnt - 2), 10), parseInt(cljs.core.nth.call(null, parts, cnt - 1), 10)], null);
};
cljs.test.js_filename = function cljs$test$js_filename(stack_element) {
  return cljs.core.first.call(null, cljs.core.last.call(null, stack_element.split("/out/")).split(":"));
};
cljs.test.mapped_line_and_column = function cljs$test$mapped_line_and_column(filename, line, column) {
  var default$ = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [filename, line, column], null);
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "source-map", "source-map", 1706252311)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var source_map = temp__4423__auto__;
    var temp__4423__auto____$1 = cljs.core.get_in.call(null, source_map, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [filename, line - 1], null));
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var columns = temp__4423__auto____$1;
      return cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.first.call(null, function() {
        var temp__4423__auto____$2 = cljs.core.get.call(null, columns, column - 1);
        if (cljs.core.truth_(temp__4423__auto____$2)) {
          var mapping = temp__4423__auto____$2;
          return mapping;
        } else {
          return cljs.core.second.call(null, cljs.core.first.call(null, columns));
        }
      }()), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "source", "source", -433931539), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "col", "col", -1959363084)], null)));
    } else {
      return default$;
    }
  } else {
    return default$;
  }
};
cljs.test.file_and_line = function cljs$test$file_and_line(exception, depth) {
  var temp__4423__auto__ = function() {
    var and__4656__auto__ = typeof exception.stack === "string";
    if (and__4656__auto__) {
      var G__11539 = exception.stack;
      var G__11539__$1 = G__11539 == null ? null : clojure.string.split_lines.call(null, G__11539);
      var G__11539__$2 = G__11539__$1 == null ? null : cljs.core.get.call(null, G__11539__$1, depth);
      var G__11539__$3 = G__11539__$2 == null ? null : clojure.string.trim.call(null, G__11539__$2);
      return G__11539__$3;
    } else {
      return and__4656__auto__;
    }
  }();
  if (cljs.core.truth_(temp__4423__auto__)) {
    var stack_element = temp__4423__auto__;
    var fname = cljs.test.js_filename.call(null, stack_element);
    var vec__11540 = cljs.test.js_line_and_column.call(null, stack_element);
    var line = cljs.core.nth.call(null, vec__11540, 0, null);
    var column = cljs.core.nth.call(null, vec__11540, 1, null);
    var vec__11541 = cljs.test.mapped_line_and_column.call(null, fname, line, column);
    var fname__$1 = cljs.core.nth.call(null, vec__11541, 0, null);
    var line__$1 = cljs.core.nth.call(null, vec__11541, 1, null);
    var column__$1 = cljs.core.nth.call(null, vec__11541, 2, null);
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "file", "file", -1269645878), fname__$1, new cljs.core.Keyword(null, "line", "line", 212345235), line__$1, new cljs.core.Keyword(null, "column", "column", 2078222095), column__$1], null);
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "file", "file", -1269645878), exception.fileName, new cljs.core.Keyword(null, "line", "line", 212345235), exception.lineNumber], null);
  }
};
cljs.test.do_report = function cljs$test$do_report(m) {
  var m__$1 = function() {
    var G__11543 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m).fqn : null;
    switch(G__11543) {
      case "fail":
        return cljs.core.merge.call(null, cljs.test.file_and_line.call(null, new Error, 4), m);
        break;
      case "error":
        return cljs.core.merge.call(null, cljs.test.file_and_line.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m), 0), m);
        break;
      default:
        return m;
    }
  }();
  return cljs.test.report.call(null, m__$1);
};
cljs.test.IAsyncTest = function() {
};
cljs.test.async_QMARK_ = function cljs$test$async_QMARK_(x) {
  if (!(x == null)) {
    if (false || x.cljs$test$IAsyncTest$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.test.IAsyncTest, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.test.IAsyncTest, x);
  }
};
cljs.test.run_block = function cljs$test$run_block(fns) {
  while (true) {
    var temp__4425__auto__ = cljs.core.seq.call(null, fns);
    if (temp__4425__auto__) {
      var xs__4977__auto__ = temp__4425__auto__;
      var f = cljs.core.first.call(null, xs__4977__auto__);
      var obj = f.call(null);
      if (cljs.core.truth_(cljs.test.async_QMARK_.call(null, obj))) {
        return obj.call(null, function() {
          var d = new cljs.core.Delay(function(fns, obj, f, xs__4977__auto__, temp__4425__auto__) {
            return function() {
              return cljs$test$run_block.call(null, cljs.core.rest.call(null, fns));
            };
          }(fns, obj, f, xs__4977__auto__, temp__4425__auto__), null);
          return function(fns, d, obj, f, xs__4977__auto__, temp__4425__auto__) {
            return function() {
              if (cljs.core.realized_QMARK_.call(null, d)) {
                return cljs.core.println.call(null, "WARNING: Async test called done more than one time.");
              } else {
                return cljs.core.deref.call(null, d);
              }
            };
          }(fns, d, obj, f, xs__4977__auto__, temp__4425__auto__);
        }());
      } else {
        var G__11549 = function() {
          var G__11548 = cljs.core.rest.call(null, fns);
          var G__11548__$1 = cljs.core.truth_((new cljs.core.Keyword("cljs.test", "block?", "cljs.test/block?", 686379965)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, obj))) ? cljs.core.concat.call(null, obj, G__11548) : G__11548;
          return G__11548__$1;
        }();
        fns = G__11549;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.test.block = function cljs$test$block(fns) {
  var G__11551 = fns;
  var G__11551__$1 = G__11551 == null ? null : cljs.core.vary_meta.call(null, G__11551, cljs.core.assoc, new cljs.core.Keyword("cljs.test", "block?", "cljs.test/block?", 686379965), true);
  return G__11551__$1;
};
cljs.test.test_var_block_STAR_ = function cljs$test$test_var_block_STAR_(v, t) {
  if (v instanceof cljs.core.Var) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "Var", "Var", -1833791616, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null))))].join(""));
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
    cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "testing-vars", "testing-vars", -2114769150)], null), cljs.core.conj, v);
    cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242), new cljs.core.Keyword(null, "test", "test", 577538877)], null), cljs.core.inc);
    cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), v], null));
    try {
      return t.call(null);
    } catch (e11554) {
      var e = e11554;
      var G__11555 = e instanceof cljs.core.Keyword ? e.fqn : null;
      switch(G__11555) {
        case "cljs.test/async-disabled":
          throw "Async tests require fixtures to be specified as maps.  Testing aborted.";break;
        default:
          return cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), e], null));
      }
    }
  }, function() {
    cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), v], null));
    return cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "testing-vars", "testing-vars", -2114769150)], null), cljs.core.rest);
  }], null);
};
cljs.test.test_var_block = function cljs$test$test_var_block(v) {
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var t = temp__4423__auto__;
    return cljs.test.test_var_block_STAR_.call(null, v, t);
  } else {
    return null;
  }
};
cljs.test.test_var = function cljs$test$test_var(v) {
  return cljs.test.run_block.call(null, cljs.test.test_var_block.call(null, v));
};
cljs.test.default_fixture = function cljs$test$default_fixture(f) {
  return f.call(null);
};
cljs.test.compose_fixtures = function cljs$test$compose_fixtures(f1, f2) {
  return function(g) {
    return f1.call(null, function() {
      return f2.call(null, g);
    });
  };
};
cljs.test.join_fixtures = function cljs$test$join_fixtures(fixtures) {
  return cljs.core.reduce.call(null, cljs.test.compose_fixtures, cljs.test.default_fixture, fixtures);
};
cljs.test.wrap_map_fixtures = function cljs$test$wrap_map_fixtures(map_fixtures, block) {
  return cljs.core.concat.call(null, cljs.core.keep.call(null, new cljs.core.Keyword(null, "before", "before", -1633692388), map_fixtures), block, cljs.core.reverse.call(null, cljs.core.keep.call(null, new cljs.core.Keyword(null, "after", "after", 594996914), map_fixtures)));
};
cljs.test.execution_strategy = function cljs$test$execution_strategy(once, each) {
  var fixtures_type = function cljs$test$execution_strategy_$_fixtures_type(coll) {
    if (cljs.core.empty_QMARK_.call(null, coll)) {
      return new cljs.core.Keyword(null, "none", "none", 1333468478);
    } else {
      if (cljs.core.every_QMARK_.call(null, cljs.core.map_QMARK_, coll)) {
        return new cljs.core.Keyword(null, "map", "map", 1371690461);
      } else {
        if (cljs.core.every_QMARK_.call(null, cljs.core.fn_QMARK_, coll)) {
          return new cljs.core.Keyword(null, "fn", "fn", -1175266204);
        } else {
          return null;
        }
      }
    }
  };
  var fixtures_types = function cljs$test$execution_strategy_$_fixtures_types() {
    return cljs.core.distinct.call(null, cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "none", "none", 1333468478), null], null), null), cljs.core.map.call(null, fixtures_type, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [once, each], null))));
  };
  var vec__11558 = fixtures_types.call(null);
  var type = cljs.core.nth.call(null, vec__11558, 0, null);
  var types = vec__11558;
  if (cljs.core.not_any_QMARK_.call(null, cljs.core.nil_QMARK_, types)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Fixtures may not be of mixed types"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not-any?", "not-any?", -2114707554, null), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "types", "types", -2064405130, null))))].join(""));
  }
  if (2 > cljs.core.count.call(null, types)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("fixtures specified in :once and :each must be of the same type"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), 2, cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "types", "types", -2064405130, null)))))].join(""));
  }
  return (new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "map", "map", 1371690461), new cljs.core.Keyword(null, "async", "async", 1050769601), new cljs.core.Keyword(null, "fn", "fn", -1175266204), new cljs.core.Keyword(null, "sync", "sync", -624148946)], null)).call(null, type, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.test.disable_async = function cljs$test$disable_async(f) {
  return function() {
    var obj = f.call(null);
    if (cljs.core.truth_(cljs.test.async_QMARK_.call(null, obj))) {
      throw new cljs.core.Keyword("cljs.test", "async-disabled", "cljs.test/async-disabled", -772095377);
    } else {
    }
    return obj;
  };
};
cljs.test.test_vars_block = function cljs$test$test_vars_block(vars) {
  return cljs.core.map.call(null, function(p__11566) {
    var vec__11567 = p__11566;
    var ns = cljs.core.nth.call(null, vec__11567, 0, null);
    var vars__$1 = cljs.core.nth.call(null, vec__11567, 1, null);
    return function(vec__11567, ns, vars__$1) {
      return function() {
        return cljs.test.block.call(null, function() {
          var env = cljs.test.get_current_env.call(null);
          var once_fixtures = cljs.core.get_in.call(null, env, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "once-fixtures", "once-fixtures", 1253947167), ns], null));
          var each_fixtures = cljs.core.get_in.call(null, env, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "each-fixtures", "each-fixtures", 802243977), ns], null));
          var G__11568 = cljs.test.execution_strategy.call(null, once_fixtures, each_fixtures) instanceof cljs.core.Keyword ? cljs.test.execution_strategy.call(null, once_fixtures, each_fixtures).fqn : null;
          switch(G__11568) {
            case "async":
              return cljs.test.wrap_map_fixtures.call(null, once_fixtures, cljs.core.mapcat.call(null, cljs.core.comp.call(null, cljs.core.partial.call(null, cljs.test.wrap_map_fixtures, each_fixtures), cljs.test.test_var_block), cljs.core.filter.call(null, cljs.core.comp.call(null, new cljs.core.Keyword(null, "test", "test", 577538877), cljs.core.meta), vars__$1)));
              break;
            case "sync":
              var each_fixture_fn = cljs.test.join_fixtures.call(null, each_fixtures);
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(each_fixture_fn, G__11568, env, once_fixtures, each_fixtures, vec__11567, ns, vars__$1) {
                return function() {
                  return cljs.test.join_fixtures.call(null, once_fixtures).call(null, function(each_fixture_fn, G__11568, env, once_fixtures, each_fixtures, vec__11567, ns, vars__$1) {
                    return function() {
                      var seq__11569 = cljs.core.seq.call(null, vars__$1);
                      var chunk__11570 = null;
                      var count__11571 = 0;
                      var i__11572 = 0;
                      while (true) {
                        if (i__11572 < count__11571) {
                          var v = cljs.core._nth.call(null, chunk__11570, i__11572);
                          var temp__4425__auto___11574 = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v));
                          if (cljs.core.truth_(temp__4425__auto___11574)) {
                            var t_11575 = temp__4425__auto___11574;
                            each_fixture_fn.call(null, function(seq__11569, chunk__11570, count__11571, i__11572, t_11575, temp__4425__auto___11574, v, each_fixture_fn, G__11568, env, once_fixtures, each_fixtures, vec__11567, ns, vars__$1) {
                              return function() {
                                return cljs.test.run_block.call(null, cljs.test.test_var_block_STAR_.call(null, v, cljs.test.disable_async.call(null, t_11575)));
                              };
                            }(seq__11569, chunk__11570, count__11571, i__11572, t_11575, temp__4425__auto___11574, v, each_fixture_fn, G__11568, env, once_fixtures, each_fixtures, vec__11567, ns, vars__$1));
                          } else {
                          }
                          var G__11576 = seq__11569;
                          var G__11577 = chunk__11570;
                          var G__11578 = count__11571;
                          var G__11579 = i__11572 + 1;
                          seq__11569 = G__11576;
                          chunk__11570 = G__11577;
                          count__11571 = G__11578;
                          i__11572 = G__11579;
                          continue;
                        } else {
                          var temp__4425__auto__ = cljs.core.seq.call(null, seq__11569);
                          if (temp__4425__auto__) {
                            var seq__11569__$1 = temp__4425__auto__;
                            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11569__$1)) {
                              var c__5471__auto__ = cljs.core.chunk_first.call(null, seq__11569__$1);
                              var G__11580 = cljs.core.chunk_rest.call(null, seq__11569__$1);
                              var G__11581 = c__5471__auto__;
                              var G__11582 = cljs.core.count.call(null, c__5471__auto__);
                              var G__11583 = 0;
                              seq__11569 = G__11580;
                              chunk__11570 = G__11581;
                              count__11571 = G__11582;
                              i__11572 = G__11583;
                              continue;
                            } else {
                              var v = cljs.core.first.call(null, seq__11569__$1);
                              var temp__4425__auto___11584__$1 = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v));
                              if (cljs.core.truth_(temp__4425__auto___11584__$1)) {
                                var t_11585 = temp__4425__auto___11584__$1;
                                each_fixture_fn.call(null, function(seq__11569, chunk__11570, count__11571, i__11572, t_11585, temp__4425__auto___11584__$1, v, seq__11569__$1, temp__4425__auto__, each_fixture_fn, G__11568, env, once_fixtures, each_fixtures, vec__11567, ns, vars__$1) {
                                  return function() {
                                    return cljs.test.run_block.call(null, cljs.test.test_var_block_STAR_.call(null, v, cljs.test.disable_async.call(null, t_11585)));
                                  };
                                }(seq__11569, chunk__11570, count__11571, i__11572, t_11585, temp__4425__auto___11584__$1, v, seq__11569__$1, temp__4425__auto__, each_fixture_fn, G__11568, env, once_fixtures, each_fixtures, vec__11567, ns, vars__$1));
                              } else {
                              }
                              var G__11586 = cljs.core.next.call(null, seq__11569__$1);
                              var G__11587 = null;
                              var G__11588 = 0;
                              var G__11589 = 0;
                              seq__11569 = G__11586;
                              chunk__11570 = G__11587;
                              count__11571 = G__11588;
                              i__11572 = G__11589;
                              continue;
                            }
                          } else {
                            return null;
                          }
                        }
                        break;
                      }
                    };
                  }(each_fixture_fn, G__11568, env, once_fixtures, each_fixtures, vec__11567, ns, vars__$1));
                };
              }(each_fixture_fn, G__11568, env, once_fixtures, each_fixtures, vec__11567, ns, vars__$1)], null);
              break;
            default:
              throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(cljs.test.execution_strategy.call(null, once_fixtures, each_fixtures))].join(""));;
          }
        }());
      };
    }(vec__11567, ns, vars__$1);
  }, cljs.core.group_by.call(null, cljs.core.comp.call(null, new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.core.meta), vars));
};
cljs.test.test_vars = function cljs$test$test_vars(vars) {
  return cljs.test.run_block.call(null, cljs.core.concat.call(null, cljs.test.test_vars_block.call(null, vars), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
    return cljs.test.report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-vars", "end-test-vars", -1394419713), new cljs.core.Keyword(null, "vars", "vars", -2046957217), vars], null));
  }], null)));
};
cljs.test.successful_QMARK_ = function cljs$test$successful_QMARK_(summary) {
  return (new cljs.core.Keyword(null, "fail", "fail", 1706214930)).cljs$core$IFn$_invoke$arity$2(summary, 0) === 0 && (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$2(summary, 0) === 0;
};
goog.provide("clojure.test.check.impl");
goog.require("cljs.core");
clojure.test.check.impl.exception_like_QMARK_ = function clojure$test$check$impl$exception_like_QMARK_(v) {
  return v instanceof Error;
};
clojure.test.check.impl.get_current_time_millis = function clojure$test$check$impl$get_current_time_millis() {
  return (new Date).valueOf();
};
goog.provide("clojure.test.check.clojure_test");
goog.require("cljs.core");
goog.require("cljs.test");
goog.require("clojure.test.check.impl");
clojure.test.check.clojure_test.assert_check = function clojure$test$check$clojure_test$assert_check(p__11594) {
  var map__11598 = p__11594;
  var map__11598__$1 = (!(map__11598 == null) ? map__11598.cljs$lang$protocol_mask$partition0$ & 64 || map__11598.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11598) : map__11598;
  var m = map__11598__$1;
  var result = cljs.core.get.call(null, map__11598__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
  cljs.core.prn.call(null, m);
  if (cljs.core.truth_(clojure.test.check.impl.exception_like_QMARK_.call(null, result))) {
    throw result;
  } else {
    try {
      var value__11356__auto__ = result;
      if (cljs.core.truth_(value__11356__auto__)) {
        cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), new cljs.core.Symbol(null, "result", "result", -1239343558, null), new cljs.core.Keyword(null, "actual", "actual", 107306363), value__11356__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
      } else {
        cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), new cljs.core.Symbol(null, "result", "result", -1239343558, null), new cljs.core.Keyword(null, "actual", "actual", 107306363), value__11356__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
      }
      return value__11356__auto__;
    } catch (e11600) {
      var t__11391__auto__ = e11600;
      return cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), new cljs.core.Symbol(null, "result", "result", -1239343558, null), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11391__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
    }
  }
};
clojure.test.check.clojure_test._STAR_default_test_count_STAR_ = 100;
clojure.test.check.clojure_test.process_options = function clojure$test$check$clojure_test$process_options(options) {
  if (options == null) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "num-tests", "num-tests", 2050041354), clojure.test.check.clojure_test._STAR_default_test_count_STAR_], null);
  } else {
    if (typeof options === "number") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "num-tests", "num-tests", 2050041354), options], null);
    } else {
      if (cljs.core.map_QMARK_.call(null, options)) {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "num-tests", "num-tests", 2050041354)).cljs$core$IFn$_invoke$arity$1(options))) {
          return options;
        } else {
          return cljs.core.assoc.call(null, options, new cljs.core.Keyword(null, "num-tests", "num-tests", 2050041354), clojure.test.check.clojure_test._STAR_default_test_count_STAR_);
        }
      } else {
        throw cljs.core.ex_info.call(null, [cljs.core.str("Invalid defspec options: "), cljs.core.str(cljs.core.pr_str.call(null, options))].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "bad-options", "bad-options", -1002783472), options], null));
      }
    }
  }
};
clojure.test.check.clojure_test._STAR_report_trials_STAR_ = false;
clojure.test.check.clojure_test._STAR_report_shrinking_STAR_ = false;
clojure.test.check.clojure_test._STAR_trial_report_period_STAR_ = 1E4;
clojure.test.check.clojure_test.last_trial_report = cljs.core.atom.call(null, 0);
var begin_test_var_method_11602 = cljs.core.get_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100)], null));
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "begin-test", "begin-test", 1831272774)], null), function(begin_test_var_method_11602) {
  return function(m) {
    cljs.core.reset_BANG_.call(null, clojure.test.check.clojure_test.last_trial_report, clojure.test.check.impl.get_current_time_millis.call(null));
    if (cljs.core.truth_(begin_test_var_method_11602)) {
      return begin_test_var_method_11602.call(null, m);
    } else {
      return null;
    }
  };
}(begin_test_var_method_11602));
clojure.test.check.clojure_test.get_property_name = function clojure$test$check$clojure_test$get_property_name(p__11603) {
  var map__11606 = p__11603;
  var map__11606__$1 = (!(map__11606 == null) ? map__11606.cljs$lang$protocol_mask$partition0$ & 64 || map__11606.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11606) : map__11606;
  var report_map = map__11606__$1;
  var property_fun = cljs.core.get.call(null, map__11606__$1, new cljs.core.Keyword("clojure.test.check.clojure-test", "property", "clojure.test.check.clojure-test/property", 1356517781));
  var or__4668__auto__ = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, property_fun));
  if (cljs.core.truth_(or__4668__auto__)) {
    return or__4668__auto__;
  } else {
    return cljs.test.testing_vars_str.call(null, report_map);
  }
};
clojure.test.check.clojure_test.with_test_out_STAR_ = function clojure$test$check$clojure_test$with_test_out_STAR_(f) {
  return f.call(null);
};
clojure.test.check.clojure_test.trial_report_periodic = function clojure$test$check$clojure_test$trial_report_periodic(m) {
  var t = clojure.test.check.impl.get_current_time_millis.call(null);
  if (t - clojure.test.check.clojure_test._STAR_trial_report_period_STAR_ > cljs.core.deref.call(null, clojure.test.check.clojure_test.last_trial_report)) {
    clojure.test.check.clojure_test.with_test_out_STAR_.call(null, function(t) {
      return function() {
        return cljs.core.println.call(null, "Passing trial", cljs.core.first.call(null, (new cljs.core.Keyword("clojure.test.check.clojure-test", "trial", "clojure.test.check.clojure-test/trial", 866433060)).cljs$core$IFn$_invoke$arity$1(m)), "/", cljs.core.second.call(null, (new cljs.core.Keyword("clojure.test.check.clojure-test", "trial", "clojure.test.check.clojure-test/trial", 866433060)).cljs$core$IFn$_invoke$arity$1(m)), "for", clojure.test.check.clojure_test.get_property_name.call(null, m));
      };
    }(t));
    return cljs.core.reset_BANG_.call(null, clojure.test.check.clojure_test.last_trial_report, t);
  } else {
    return null;
  }
};
clojure.test.check.clojure_test.trial_report_dots = function clojure$test$check$clojure_test$trial_report_dots(p__11608) {
  var map__11612 = p__11608;
  var map__11612__$1 = (!(map__11612 == null) ? map__11612.cljs$lang$protocol_mask$partition0$ & 64 || map__11612.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11612) : map__11612;
  var vec__11613 = cljs.core.get.call(null, map__11612__$1, new cljs.core.Keyword("clojure.test.check.clojure-test", "trial", "clojure.test.check.clojure-test/trial", 866433060));
  var so_far = cljs.core.nth.call(null, vec__11613, 0, null);
  var total = cljs.core.nth.call(null, vec__11613, 1, null);
  if (so_far > 0) {
    if (cljs.core.mod.call(null, so_far, 1E3) === 0) {
      cljs.core.print.call(null, ".");
      cljs.core.flush.call(null);
    } else {
    }
    if (so_far === total) {
      return cljs.core.println.call(null);
    } else {
      return null;
    }
  } else {
    return null;
  }
};
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword("clojure.test.check.clojure-test", "trial", "clojure.test.check.clojure-test/trial", 866433060)], null), function(m) {
  var temp__4425__auto__ = function() {
    var and__4656__auto__ = clojure.test.check.clojure_test._STAR_report_trials_STAR_;
    if (cljs.core.truth_(and__4656__auto__)) {
      if (clojure.test.check.clojure_test._STAR_report_trials_STAR_ === true) {
        return clojure.test.check.clojure_test.trial_report_dots;
      } else {
        return clojure.test.check.clojure_test._STAR_report_trials_STAR_;
      }
    } else {
      return and__4656__auto__;
    }
  }();
  if (cljs.core.truth_(temp__4425__auto__)) {
    var trial_report_fn = temp__4425__auto__;
    return trial_report_fn.call(null, m);
  } else {
    return null;
  }
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword("clojure.test.check.clojure-test", "shrinking", "clojure.test.check.clojure-test/shrinking", 372289399)], null), function(m) {
  if (cljs.core.truth_(clojure.test.check.clojure_test._STAR_report_shrinking_STAR_)) {
    return clojure.test.check.clojure_test.with_test_out_STAR_.call(null, function() {
      return cljs.core.println.call(null, "Shrinking", clojure.test.check.clojure_test.get_property_name.call(null, m), "starting with parameters", cljs.core.pr_str.call(null, (new cljs.core.Keyword("clojure.test.check.clojure-test", "params", "clojure.test.check.clojure-test/params", 1851720992)).cljs$core$IFn$_invoke$arity$1(m)));
    });
  } else {
    return null;
  }
});
clojure.test.check.clojure_test.report_trial = function clojure$test$check$clojure_test$report_trial(property_fun, so_far, num_tests) {
  return cljs.test.report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword("clojure.test.check.clojure-test", "trial", "clojure.test.check.clojure-test/trial", 866433060), new cljs.core.Keyword("clojure.test.check.clojure-test", "property", "clojure.test.check.clojure-test/property", 1356517781), property_fun, new cljs.core.Keyword("clojure.test.check.clojure-test", "trial", "clojure.test.check.clojure-test/trial", 
  866433060), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [so_far, num_tests], null)], null));
};
clojure.test.check.clojure_test.report_failure = function clojure$test$check$clojure_test$report_failure(property_fun, result, trial_number, failing_params) {
  return cljs.test.report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword("clojure.test.check.clojure-test", "shrinking", "clojure.test.check.clojure-test/shrinking", 372289399), new cljs.core.Keyword("clojure.test.check.clojure-test", "property", "clojure.test.check.clojure-test/property", 1356517781), property_fun, new cljs.core.Keyword("clojure.test.check.clojure-test", "params", "clojure.test.check.clojure-test/params", 
  1851720992), cljs.core.vec.call(null, failing_params)], null));
};
goog.provide("clojure.test.check");
goog.require("cljs.core");
goog.require("clojure.test.check.generators");
goog.require("clojure.test.check.clojure_test");
goog.require("clojure.test.check.random");
goog.require("clojure.test.check.rose_tree");
goog.require("clojure.test.check.impl");
clojure.test.check.shrink_loop;
clojure.test.check.failure;
clojure.test.check.make_rng = function clojure$test$check$make_rng(seed) {
  if (cljs.core.truth_(seed)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [seed, clojure.test.check.random.make_random.call(null, seed)], null);
  } else {
    var non_nil_seed = clojure.test.check.impl.get_current_time_millis.call(null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [non_nil_seed, clojure.test.check.random.make_random.call(null, non_nil_seed)], null);
  }
};
clojure.test.check.complete = function clojure$test$check$complete(property, num_trials, seed) {
  clojure.test.check.clojure_test.report_trial.call(null, property, num_trials, num_trials);
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "result", "result", 1415092211), true, new cljs.core.Keyword(null, "num-tests", "num-tests", 2050041354), num_trials, new cljs.core.Keyword(null, "seed", "seed", 68613327), seed], null);
};
clojure.test.check.not_falsey_or_exception_QMARK_ = function clojure$test$check$not_falsey_or_exception_QMARK_(value) {
  var and__4656__auto__ = value;
  if (cljs.core.truth_(and__4656__auto__)) {
    return cljs.core.not.call(null, clojure.test.check.impl.exception_like_QMARK_.call(null, value));
  } else {
    return and__4656__auto__;
  }
};
clojure.test.check.quick_check = function clojure$test$check$quick_check(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___11626 = arguments.length;
  var i__5727__auto___11627 = 0;
  while (true) {
    if (i__5727__auto___11627 < len__5726__auto___11626) {
      args__5733__auto__.push(arguments[i__5727__auto___11627]);
      var G__11628 = i__5727__auto___11627 + 1;
      i__5727__auto___11627 = G__11628;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 2 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(2), 0) : null;
  return clojure.test.check.quick_check.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5734__auto__);
};
clojure.test.check.quick_check.cljs$core$IFn$_invoke$arity$variadic = function(num_tests, property, p__11620) {
  var map__11621 = p__11620;
  var map__11621__$1 = (!(map__11621 == null) ? map__11621.cljs$lang$protocol_mask$partition0$ & 64 || map__11621.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11621) : map__11621;
  var seed = cljs.core.get.call(null, map__11621__$1, new cljs.core.Keyword(null, "seed", "seed", 68613327));
  var max_size = cljs.core.get.call(null, map__11621__$1, new cljs.core.Keyword(null, "max-size", "max-size", -874966132), 200);
  var vec__11623 = clojure.test.check.make_rng.call(null, seed);
  var created_seed = cljs.core.nth.call(null, vec__11623, 0, null);
  var rng = cljs.core.nth.call(null, vec__11623, 1, null);
  var size_seq = clojure.test.check.generators.make_size_range_seq.call(null, max_size);
  var so_far = 0;
  var size_seq__$1 = size_seq;
  var rstate = rng;
  while (true) {
    if (so_far === num_tests) {
      return clojure.test.check.complete.call(null, property, num_tests, created_seed);
    } else {
      var vec__11624 = size_seq__$1;
      var size = cljs.core.nth.call(null, vec__11624, 0, null);
      var rest_size_seq = cljs.core.nthnext.call(null, vec__11624, 1);
      var vec__11625 = clojure.test.check.random.split.call(null, rstate);
      var r1 = cljs.core.nth.call(null, vec__11625, 0, null);
      var r2 = cljs.core.nth.call(null, vec__11625, 1, null);
      var result_map_rose = clojure.test.check.generators.call_gen.call(null, property, r1, size);
      var result_map = clojure.test.check.rose_tree.root.call(null, result_map_rose);
      var result = (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(result_map);
      var args = (new cljs.core.Keyword(null, "args", "args", 1315556576)).cljs$core$IFn$_invoke$arity$1(result_map);
      if (cljs.core.truth_(clojure.test.check.not_falsey_or_exception_QMARK_.call(null, result))) {
        clojure.test.check.clojure_test.report_trial.call(null, property, so_far, num_tests);
        var G__11629 = so_far + 1;
        var G__11630 = rest_size_seq;
        var G__11631 = r2;
        so_far = G__11629;
        size_seq__$1 = G__11630;
        rstate = G__11631;
        continue;
      } else {
        return clojure.test.check.failure.call(null, property, result_map_rose, so_far, size, created_seed);
      }
    }
    break;
  }
};
clojure.test.check.quick_check.cljs$lang$maxFixedArity = 2;
clojure.test.check.quick_check.cljs$lang$applyTo = function(seq11617) {
  var G__11618 = cljs.core.first.call(null, seq11617);
  var seq11617__$1 = cljs.core.next.call(null, seq11617);
  var G__11619 = cljs.core.first.call(null, seq11617__$1);
  var seq11617__$2 = cljs.core.next.call(null, seq11617__$1);
  return clojure.test.check.quick_check.cljs$core$IFn$_invoke$arity$variadic(G__11618, G__11619, seq11617__$2);
};
clojure.test.check.smallest_shrink = function clojure$test$check$smallest_shrink(total_nodes_visited, depth, smallest) {
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "total-nodes-visited", "total-nodes-visited", -620132443), total_nodes_visited, new cljs.core.Keyword(null, "depth", "depth", 1768663640), depth, new cljs.core.Keyword(null, "result", "result", 1415092211), (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(smallest), new cljs.core.Keyword(null, "smallest", "smallest", -152623883), (new cljs.core.Keyword(null, "args", "args", 1315556576)).cljs$core$IFn$_invoke$arity$1(smallest)], 
  null);
};
clojure.test.check.shrink_loop = function clojure$test$check$shrink_loop(rose_tree) {
  var shrinks_this_depth = clojure.test.check.rose_tree.children.call(null, rose_tree);
  var nodes = shrinks_this_depth;
  var current_smallest = clojure.test.check.rose_tree.root.call(null, rose_tree);
  var total_nodes_visited = 0;
  var depth = 0;
  while (true) {
    if (cljs.core.empty_QMARK_.call(null, nodes)) {
      return clojure.test.check.smallest_shrink.call(null, total_nodes_visited, depth, current_smallest);
    } else {
      var vec__11633 = nodes;
      var head = cljs.core.nth.call(null, vec__11633, 0, null);
      var tail = cljs.core.nthnext.call(null, vec__11633, 1);
      var result = (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(clojure.test.check.rose_tree.root.call(null, head));
      if (cljs.core.truth_(clojure.test.check.not_falsey_or_exception_QMARK_.call(null, result))) {
        var G__11634 = tail;
        var G__11635 = current_smallest;
        var G__11636 = total_nodes_visited + 1;
        var G__11637 = depth;
        nodes = G__11634;
        current_smallest = G__11635;
        total_nodes_visited = G__11636;
        depth = G__11637;
        continue;
      } else {
        var temp__4423__auto__ = cljs.core.seq.call(null, clojure.test.check.rose_tree.children.call(null, head));
        if (temp__4423__auto__) {
          var children = temp__4423__auto__;
          var G__11638 = children;
          var G__11639 = clojure.test.check.rose_tree.root.call(null, head);
          var G__11640 = total_nodes_visited + 1;
          var G__11641 = depth + 1;
          nodes = G__11638;
          current_smallest = G__11639;
          total_nodes_visited = G__11640;
          depth = G__11641;
          continue;
        } else {
          var G__11642 = tail;
          var G__11643 = clojure.test.check.rose_tree.root.call(null, head);
          var G__11644 = total_nodes_visited + 1;
          var G__11645 = depth;
          nodes = G__11642;
          current_smallest = G__11643;
          total_nodes_visited = G__11644;
          depth = G__11645;
          continue;
        }
      }
    }
    break;
  }
};
clojure.test.check.failure = function clojure$test$check$failure(property, failing_rose_tree, trial_number, size, seed) {
  var root = clojure.test.check.rose_tree.root.call(null, failing_rose_tree);
  var result = (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(root);
  var failing_args = (new cljs.core.Keyword(null, "args", "args", 1315556576)).cljs$core$IFn$_invoke$arity$1(root);
  clojure.test.check.clojure_test.report_failure.call(null, property, result, trial_number, failing_args);
  return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "result", "result", 1415092211), result, new cljs.core.Keyword(null, "seed", "seed", 68613327), seed, new cljs.core.Keyword(null, "failing-size", "failing-size", -429562538), size, new cljs.core.Keyword(null, "num-tests", "num-tests", 2050041354), trial_number + 1, new cljs.core.Keyword(null, "fail", "fail", 1706214930), cljs.core.vec.call(null, failing_args), new cljs.core.Keyword(null, "shrunk", "shrunk", -2041664412), 
  clojure.test.check.shrink_loop.call(null, failing_rose_tree)], null);
};
goog.provide("clojure.test.check.properties");
goog.require("cljs.core");
goog.require("clojure.test.check.generators");
clojure.test.check.properties.apply_gen = function clojure$test$check$properties$apply_gen(function$) {
  return function(args) {
    var result = function() {
      try {
        return cljs.core.apply.call(null, function$, args);
      } catch (e10084) {
        var t = e10084;
        return t;
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "result", "result", 1415092211), result, new cljs.core.Keyword(null, "function", "function", -2127255473), function$, new cljs.core.Keyword(null, "args", "args", 1315556576), args], null);
  };
};
clojure.test.check.properties.for_all_STAR_ = function clojure$test$check$properties$for_all_STAR_(args, function$) {
  return clojure.test.check.generators.fmap.call(null, clojure.test.check.properties.apply_gen.call(null, function$), cljs.core.apply.call(null, clojure.test.check.generators.tuple, args));
};
clojure.test.check.properties.binding_vars = function clojure$test$check$properties$binding_vars(bindings) {
  return cljs.core.map.call(null, cljs.core.first, cljs.core.partition.call(null, 2, bindings));
};
clojure.test.check.properties.binding_gens = function clojure$test$check$properties$binding_gens(bindings) {
  return cljs.core.map.call(null, cljs.core.second, cljs.core.partition.call(null, 2, bindings));
};
clojure.test.check.properties.for_all = function clojure$test$check$properties$for_all(var_args) {
  var args__5733__auto__ = [];
  var len__5726__auto___10089 = arguments.length;
  var i__5727__auto___10090 = 0;
  while (true) {
    if (i__5727__auto___10090 < len__5726__auto___10089) {
      args__5733__auto__.push(arguments[i__5727__auto___10090]);
      var G__10091 = i__5727__auto___10090 + 1;
      i__5727__auto___10090 = G__10091;
      continue;
    } else {
    }
    break;
  }
  var argseq__5734__auto__ = 3 < args__5733__auto__.length ? new cljs.core.IndexedSeq(args__5733__auto__.slice(3), 0) : null;
  return clojure.test.check.properties.for_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5734__auto__);
};
clojure.test.check.properties.for_all.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("clojure.test.check.properties", "for-all*", "clojure.test.check.properties/for-all*", 67088845, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, clojure.test.check.properties.binding_gens.call(null, bindings))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "fn", "cljs.core/fn", -1065745098, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, clojure.test.check.properties.binding_vars.call(null, bindings)))))), body)))))));
};
clojure.test.check.properties.for_all.cljs$lang$maxFixedArity = 3;
clojure.test.check.properties.for_all.cljs$lang$applyTo = function(seq10085) {
  var G__10086 = cljs.core.first.call(null, seq10085);
  var seq10085__$1 = cljs.core.next.call(null, seq10085);
  var G__10087 = cljs.core.first.call(null, seq10085__$1);
  var seq10085__$2 = cljs.core.next.call(null, seq10085__$1);
  var G__10088 = cljs.core.first.call(null, seq10085__$2);
  var seq10085__$3 = cljs.core.next.call(null, seq10085__$2);
  return clojure.test.check.properties.for_all.cljs$core$IFn$_invoke$arity$variadic(G__10086, G__10087, G__10088, seq10085__$3);
};
clojure.test.check.properties.for_all.cljs$lang$macro = true;
goog.provide("vdom_signals.test.core");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("clojure.test.check.generators");
goog.require("cljs.test");
goog.require("clojure.test.check");
goog.require("clojure.test.check.clojure_test");
goog.require("clojure.test.check.properties");
vdom_signals.test.core.success = 0;
vdom_signals.test.core.run = function vdom_signals$test$core$run() {
  console.log("Example test started.");
  hello.run.call(null);
  return vdom_signals.test.core.success;
};
goog.exportSymbol("vdom_signals.test.core.run", vdom_signals.test.core.run);
goog.provide("vdom_signals.test");
goog.require("cljs.core");
goog.require("vdom_signals.test.core");
vdom_signals.test.success = 0;
vdom_signals.test.run = function vdom_signals$test$run() {
  console.log("Example test started.");
  vdom_signals.test.core.run.call(null);
  return vdom_signals.test.success;
};
goog.exportSymbol("vdom_signals.test.run", vdom_signals.test.run);
